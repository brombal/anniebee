%!PS-Adobe-3.1 EPSF-3.0%%Title: WM_D_2Line_Lg_355.eps%%Creator: Adobe Illustrator(R) 11%%AI8_CreatorVersion: 11.0.0%AI9_PrintingDataBegin%%For: ABN Mac User%%CreationDate: 4/25/05%%BoundingBox: 0 0 447 90%%HiResBoundingBox: 0 0 446.2862 89.0914%%CropBox: 0 0 446.2862 89.0914%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)%%+ procset Adobe_CoolType_Utility_T42 (1.0 0)%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.19 0)%%+ procset Adobe_CoolType_Core (2.23 0)%%+ procset Adobe_AGM_Core (2.0 0)%%+ procset Adobe_AGM_Utils (1.0 0)%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors: %%DocumentCustomColors: (PANTONE 355 U)%%CMYKCustomColor: 0.9400 0 1 0 (PANTONE 355 U)%%RGBCustomColor: %ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 28 8%%BeginData: 6576 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD14FFAE333482FFFFFF335E83345EFD04FF8933AE5E345E831189%FD04FFA733835E335E115EFF5E335E335EFFFF83341134FFAE3334835E33%5E335E583A58FD04FF5E58FD04FFAE5834115EA7FF8234335E1189FD2CFF%5E11FD04FF5E5EFF331183FFFFFF585EFFAE0BADFF580BFD04FF5E58FF58%34CFAE82FF8211A8AE0B838334AEFF33AEFF5833FF83FF831183FF83115E%FFFF8311FD04FF8311ADAEAE3311A7FF1183FFA783FD2CFF5834FD04FF5E%83FF5E1111A8FFFF5E5EFFAE3383FFA81183FFFFFF11FFFF8333FD04FFAD%11FFAE11AE5E33FFFFFFCFFF5E5EFFFFFFCF11AEFFFF5E33FFFF33AEFD04%FF11AEFD04FF335EFF3483FD2FFF5E11FD04FF5E5EFF33833333A8FF585E%FFAE0BA7FFFF3333FFFF5858FFFF5E33828383FF82115E585EFF5E1158AE%AEFFFF5E33FFFFFFA81183FFFFFF0B5E585EFD04FF5E33FD05FF830BFF33%5E8283A8FD2CFF5834FD04FF5E83FF5EA7FF113AFF835EFFAE3383FFFFAE%11AEFF3483FFFF83115E33AEFFAD113A33FFFFFF5E3A1133AEFF5E5EFFFF%FFCF11AEFFFFFFAE1134AEFD04FF8333FD05FF8334FF3A33835EFD2DFF5E%11FD04FF5E82FF33ADFFAE0B5E585EFFAE11ADFFFFFF3358AE33FFFFFF5E%33FD04FF8233AE3358FD04FFAE115EFF5E33FFFFFFA81183FD04FF3358FD%05FF5834FD05FF8333FF3383FD2FFF5E11FD04FF33AEFF5E83FFFFAD0B11%82FFA833A7FFFFFF82333383FFFFFF8333FD04FF8911FFAE335EFD04FF5E%5EFF585EFD04FF11AEFD04FF1183FD05FFAE0BAEFD04FF3383FF3483FD2F%FFAE0B5EA8FF5833FFFF1183FFFFFF830B82FFAE0B83FD04FF0B11A8FFFF%FF331183AE33AE8211A8FF831133FFFF8311CFFF3411FFFFFF831182FFFF%FFA81133FD06FF340BA7AEAE335EFFFF0B5EFD30FFAE335E335EAEFF835E%A8FD04FF8383FF5E5E5EFD04FF5E5EFFFFFFA85E585E335E838258FFFFFF%A85E335E58CFFFAE333A83FFFF83345EFFFFFF89335EAEFD06FF5E335E33%83FFFF835E5EFD32FFA8AEFD1AFFAEFFFFFFAEFFCFFD06FFAEA8FFFFFFAE%FFA8FFFFFFAEFD05FFAEFFAEFD09FFA8CFFDA0FFAEFD0DFFA8FD06FFAEA7%CFAEFD05FFA8FFAEFFA8FD07FFA8FD05FFAEFFA8FFAEFFFFFFAEFD05FFA8%FFFFFFA8FD17FFA8FD13FFA8FD09FFAEAEA8FD05FF5E335EA7FD07FFA75E%3389FD04FF5E341112113A5EFFFFFFAE5E335E3334115E83FFFF5E113433%5E585E3334335EFF5E335E3383FD04FF835E5E5E33FD06FF82115E335E58%5E335E335E835E585E335E333A83FF345E34AEFD06FF335EAEFFFFFF8334%83FD07FF5E3411345ECFFFFFFF835E0B33A8FD06FFAD0B5EA8FFFF830B11%3382583A0B1133CFFFFF83110B82835E0B1183AE11825E82111133835E5E%11FF83110B5EAEFD05FF58110B83FD05FFAE115E585E33110B5E5E5E0BAE%5E110B5E5E5E0B34FF83111133FD05FF331183FD04FF330B5EFD05FFAE11%11345E11115EAE585EFF83110B3AFD06FF831183FFFFAD1134A8FD04FFAE%111133FFFFFF1133AEFFFF5E115EA8AEFFFFFF831183FFFFFFADFFFF3311%A8FD06FFAE0B3AFD06FFA8AEFFFFFFAE115EFFFFFFADFFAE1134FFFFFFAD%82FFFFCF111183FFFFFF821182FD04FFAE111111CFFD04FF3311A8FFFFFF%1183FFAE5EFF830B110B5EFD05FFAD0B83FFCF0B33AEFD06FFAE0B1183FF%CF330BAEFFFF581158FD05FF5E115EFD06FF5E0BAEFD06FF831133FD0BFF%831158FD05FFA71133FD08FF830B33A8FF831133FD05FF3333581158FFFF%FFA71158FD04FF8383FD04FF83115E331183FD04FF8334A7FF5E1283FD08%FF5E115EFFFF3333AEFFFF3411AEFD05FF831183FD06FF5811A7FD06FFAE%115EFD0BFFAD115EFD06FF113AFD09FF5E115EFF3A11FD05FFAE125EFF11%34FFFFFFAE1182FD0AFF830BAE83110B83FFFFFFAE0BAEFF340BAEFD08FF%831133FFFF330BADA73411ADFD06FF5E115EFD06FF5E0BAEFD06FF831133%FD04FFCF58FD05FF831158FD05FFA81133CFA8FFAEFD05FFA71111340B89%FD05FF820BAEFF340B89FFFFA7111183FD09FF8311AEFF5E1111AEFFFFA7%11A7FF3333AEFD08FFAE1134FFFF3333331133FD08FF830B83FD06FF3311%3334333A33343334115EFFFFFF8333333389FFFFFF890B5EFD05FFCF1133%333311335EFD05FF5E11115EFD06FF335EFFFF831133FFFFFF3311113458%83AEFD05FF830BAEFFFF331111AEFF830BAEFF3311FD09FF831133FFFF33%0BA7111183FD07FF5E115EFD06FF580B34335E335E335E331133FFFFFF83%110B34AEFFFFFF831158FD05FFA8110B5E335E33ADFD05FFAE0B115EFD05%FF8311338383820B1183FFFFCF33330B110B1183FD04FF8334AEFFFFFF33%1133FF8311A7FF3333AEFD08FFAE115EFFFF3311CFFF1111A7FD06FF8311%83FD06FF3312A8FD06FFAE115EFD04FF335E5EFD04FFAD1183FD05FFCF11%3AFD0AFF58121133AEFD04FF5E113311331133115EFD04FFAEAE835E1133%AEFFFFFF830BAEFFFFFFAE111133830BAEFF3A0B83FD08FF581183FFAE33%0BAEFFAE0B11A8FD05FF5E115EFD06FF5E0BAEFD06FF831133FFFFFFA8AE%FFAECFFFFFFF831158FD05FFA81133FD09FF5E115E5E0B58FFFFFFAE0B5E%AEAEA7CF83110BCFFD07FF340BADFFFFFF8311A8FD04FFAE11111133A7FF%5E1133FD07FFCF3311FFFFFF1133AEFFFF891133AEFD04FF831183FD06FF%341183FD06FFAE0B3AFD0BFFAD115EFD05FFAE1134FD08FF831133FFAE33%1183FFFF5E11AEFD05FF34115EFFAECFFD04FF5E11A7FFFFFF830BAEFD05%FF830B110BAEFFAE0B1158FD06FF5E0B83FFFFFF330BAEFFFFFF5E0B33A8%FFFFFF58115EFD06FF340BAEFD06FF831133FD0BFF831133FD05FF831133%FFFFFFA75EFFFFA8110BFFFFFF5E1111FFA81133FD06FFA70B11FF8333FD%04FF340BFD04FF8311A8FD06FF831133A7FFFF89111133AEAEFF835E1183%FD04FF1134AEFD04FF5E115EFFFFFF821183FD06FF331183FD06FFAE113A%FD0BFFAD115EFD05FFAE113383AEAE8311FFFF5E11AEFD04FF33115E8311%AEFD07FF3411835E1183CFAE5E11ADFFFFFF5E330BAEFD07FF5E0B83FFFF%FF8311110B110B1111ADFFFFFFAE333311AEFD04FFAE330B5EFFAE0B3311%82FD04FF33110B3383FD04FFAD33110B5EAEFD08FFAE1111115EAEFFFFAE%11110B110B110B11FF820B5EFD05FFAE0B110B1133AEFD06FF5E110B330B%110B111183FD04FFAD83AECFFD08FF83A8FD05FF83835E8383FD05FFA8AE%AEAECFFD05FFA8110B5E83AEA8ADA7FFFFFFCF8983AE83AEFD04FFA7ADA7%AE83FD09FFAE8983AE83FFFFFFAE8983AE83AE8389835E0B3AFD07FFAE83%AE8383AEFD07FF83AE83AD828382FD14FFAEFD19FF835E33ADFD1EFFAEFD%07FFAEFD09FF5E82A8FD20FFFF%%EndData%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 68 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/bdict{	mark}bdf/edict{	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/agm_sethalftone{ 	dup	begin		/_Data load		/Thresholds xdf	end	level3 	{ sethalftone }{		dup /HalftoneType get 3 eq {			sethalftone		} {pop} ifelse	}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	/srcDataStrs [ imageDict begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi string		} repeat		end ] def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource {AGMUTIL_imagefile imbuf readstring pop} put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height { 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		1 dict begin		/flushbuffer Width cvi string def		1 1 Height cvi			{			pop			0 1 DataSource length 1 sub				{				DataSource exch get				dup type dup 				/filetype eq					{					exch flushbuffer readstring pop pop					}if				/arraytype eq					{					exec pop					}if				}for			}for		end		}		{		/DataSource load type dup 		/filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 div mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		/arraytype eq			{			1 1 Height { pop DataSource pop } for			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp AGMCORE_tmp 1 add ddf 	dup type /dicttype eq		{			AGMCORE_tmp			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			AGMCORE_tmp exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	AGMCORE_tmp 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{	/indexed_colorspace_dict AGMCORE_gget dup null ne {		/CSD known	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 216 dict dup begin put/nd{	null def}bind def/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSA_cache 0 dict def/AGMCORE_CSD_cache 0 dict def/AGMCORE_pattern_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_ovp nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_gradientcache 32 dict def/AGMCORE_in_pattern false def/knockout_unitsq nd/AGMCORE_CRD_cache where{	pop}{	/AGMCORE_CRD_cache 0 dict def}ifelse/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/add_grad{	AGMCORE_gradientcache 3 1 roll put}bdf/exec_grad{	AGMCORE_gradientcache exch get exec}bdf/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	level2 not{		/xput{			dup load dup length exch maxlength eq{				dup dup load dup				length dup 0 eq {pop 1} if 2 mul dict copy def			}if			load begin				def 			end		}def	}{		/xput{			load 3 1 roll put		}def	}ifelse	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr xpt			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr xpt		}def		/grestoreall {			AGMCORE_&grestoreall			Adobe_AGM_Core			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core begin				/AGMCORE_gstackptr exch def				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def			end			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&usrshfill /shfill load def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/LeaveColorUnchanged eq					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor						currentgray 0 eq					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						Adobe_AGM_Core/AGMCORE_name xddf						false						Adobe_AGM_Core/AGMCORE_in_pattern known {Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not currentpagedevice/OverrideSeparations known and							{							currentpagedevice/OverrideSeparations get								{								/HqnSpots /ProcSet resourcestatus									{									pop pop pop true									}if								}if							}if												{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not							}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace							false							currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall							not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		/AGMCORE_IsSeparationAProcessColor			{			dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or			}def		level3 {			/AGMCORE_IsCurrentColor				{				gsave				false setoverprint				1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor				currentgray 0 eq 				grestore				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}]								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				clonedict				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					currentdict end					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		/level2ScreenFreq{			begin			60			HalftoneType 1 eq{				pop Frequency			}if			HalftoneType 2 eq{				pop GrayFrequency			}if			HalftoneType 5 eq{				pop Default level2ScreenFreq			}if			 end		}def		/currentScreenFreq{			currenthalftone level2ScreenFreq		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get dup /Separation eq					{						pop						dup length array copy						dup dup 1 get						current_spot_alias						{							dup map_alias							{								begin								/sep_colorspace_dict currentdict AGMCORE_gput								pop pop	pop								[ 									/Separation Name 									CSA map_csa									dup /MappedCSA xdf 									/sep_colorspace_proc load								]								dup Name								end							}if						}if						map_reserved_ink_name 1 xpt					}{						/DeviceN eq 						{							dup length array copy							dup dup 1 get [ 								exch {									current_spot_alias{										dup map_alias{											/Name get exch pop										}if									}if									map_reserved_ink_name								} forall 							] 1 xpt						}if					}ifelse				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/currentScreenFreq{			currentscreen pop pop		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/currentpagedevice currentpagedevice def/getrampcolor {/indx exch def0 1 NumComp 1 sub {dupSamples exch getdup type /stringtype eq { indx get } ifexchScaling exch get aload pop3 1 rollmul add} forColorSpaceFamily /Separation eq	{	sep	}	{	ColorSpaceFamily /DeviceN eq		{		devn		}		{		setcolor		}ifelse	}ifelse} bind def/sssetbackground { aload pop setcolor } bind def/RadialShade {40 dict begin/ColorSpaceFamily exch def/background exch def/ext1 exch def/ext0 exch def/BBox exch def/r2 exch def/c2y exch def/c2x exch def/r1 exch def/c1y exch def/c1x exch def/rampdict exch def/setinkoverprint where {pop /setinkoverprint{pop}def}ifgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifc1x c2x eq{c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse}{/slope c2y c1y sub c2x c1x sub div def/theta slope 1 atan defc2x c1x lt c2y c1y ge and { /theta theta 180 sub def} ifc2x c1x lt c2y c1y lt and { /theta theta 180 add def} if}ifelsegsaveclippathc1x c1y translatetheta rotate-90 rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{/max { 2 copy gt { pop } {exch pop} ifelse } bind def/min { 2 copy lt { pop } {exch pop} ifelse } bind deframpdict begin40 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavec1x c1y translatetheta rotate-90 rotate/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def/c1y 0 def/c1x 0 def/c2x 0 defext0 {0 getrampcolorc2y r2 add r1 sub 0.0001 lt{c1x c1y r1 360 0 arcnpathbbox/aymax exch def/axmax exch def/aymin exch def/axmin exch def/bxMin xMin axmin min def/byMin yMin aymin min def/bxMax xMax axmax max def/byMax yMax aymax max defbxMin byMin movetobxMax byMin linetobxMax byMax linetobxMin byMax linetobxMin byMin linetoeofill}{c2y r1 add r2 le{c1x c1y r1 0 360 arcfill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r1 neg def/p1y c1y def/p2x r1 def/p2y c1y defp1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin linetofill}{/AA r2 r1 sub c2y div def/theta AA 1 AA dup mul sub sqrt div 1 atan def/SS1 90 theta add dup sin exch cos div def/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y p1x SS1 div neg def/SS2 90 theta sub dup sin exch cos div def/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y p2x SS2 div neg defr1 r2 gt{/L1maxX p1x yMin p1y sub SS1 div add def/L2maxX p2x yMin p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifc1x c2x sub dup mulc1y c2y sub dup muladd 0.5 exp0 dtransformdup mul exch dup mul add 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if pop/hires exch defhires mul/numpix exch def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} if/xInc c2x c1x sub numsteps div def/yInc c2y c1y sub numsteps div def/rInc r2 r1 sub numsteps div def/cx c1x def/cy c1y def/radius r1 defnewpathxInc 0 eq yInc 0 eq rInc 0 eq and and{0 getrampcolorcx cy radius 0 360 arcstrokeNumSamples 1 sub getrampcolorcx cy radius 72 hires div add 0 360 arc0 setlinewidthstroke}{0numsteps{dupsubsampling { round cvi } ifgetrampcolorcx cy radius 0 360 arc/cx cx xInc add def/cy cy yInc add def/radius radius rInc add defcx cy radius 360 0 arcneofillrampIndxInc add}repeatpop} ifelseext1 {c2y r2 add r1 lt{c2x c2y r2 0 360 arcfill}{c2y r1 add r2 sub 0.0001 le{c2x c2y r2 360 0 arcnpathbbox/aymax exch def/axmax exch def/aymin exch def/axmin exch def/bxMin xMin axmin min def/byMin yMin aymin min def/bxMax xMax axmax max def/byMax yMax aymax max defbxMin byMin movetobxMax byMin linetobxMax byMax linetobxMin byMax linetobxMin byMin linetoeofill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r2 neg def/p1y c2y def/p2x r2 def/p2y c2y defp1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax linetofill}{/AA r2 r1 sub c2y div def/theta AA 1 AA dup mul sub sqrt div 1 atan def/SS1 90 theta add dup sin exch cos div def/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y c2y p1x SS1 div sub def/SS2 90 theta sub dup sin exch cos div def/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y c2y p2x SS2 div sub defr1 r2 lt{/L1maxX p1x yMax p1y sub SS1 div add def/L2maxX p2x yMax p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifgrestoregrestoreendendend} ifelse} bind def/GenStrips {40 dict begin/ColorSpaceFamily exch def/background exch def/ext1 exch def/ext0 exch def/BBox exch def/y2 exch def/x2 exch def/y1 exch def/x1 exch def/rampdict exch def/setinkoverprint where {pop /setinkoverprint{pop}def}ifgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifx1 x2 eq{y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse}{/slope y2 y1 sub x2 x1 sub div def/theta slope 1 atan defx2 x1 lt y2 y1 ge and { /theta theta 180 sub def} ifx2 x1 lt y2 y1 lt and { /theta theta 180 add def} if}ifelsegsaveclippathx1 y1 translatetheta rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{rampdict begin20 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavex1 y1 translatetheta rotate/xStart 0 def/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def/ySpan yMax yMin sub def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defxStart 0 transformxEnd 0 transform3 -1 rollsub dup mul3 1 rollsub dup muladd 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if popmul/numpix exch defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} ifext0 {0 getrampcolorxMin xStart lt{ xMin yMin xMin neg ySpan rectfill } if} if/xInc xEnd xStart sub numsteps div def/x xStart def0numsteps{dupsubsampling { round cvi } ifgetrampcolorx yMin xInc ySpan rectfill/x x xInc add deframpIndxInc add}repeatpopext1 {xMax xEnd gt{ xEnd yMin xMax xEnd sub ySpan rectfill } if} ifgrestoregrestoreendendend} ifelse} bind def}def/page_trailer{	end}def/doc_trailer{}defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA map_csa setcolorspace_opt		set_crd	end}def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc /setcolor ldf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		6 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get 0 get null eq {					dup /Names get names_index get /name xdf					name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq					or or or not {						/AliasedColorants false def						exit					} if				} if			} for			AliasedColorants {				dup begin				/Names new_names def				/AliasedColorants true def				/LookupTables new_LookupTables def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				currentdict /NComponents known not {					/NComponents TintMethod /Subtractive eq {4}{3}ifelse def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			Names {				AvoidAliasedColorants {					/currentspotalias current_spot_alias def					false set_spot_alias				} if				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				AvoidAliasedColorants {					currentspotalias set_spot_alias				} if				/names_index names_index 1 add def			} forall			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx					0 0 0 0 () /findcmykcustomcolor cvx 0 /setcustomcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				/setcolor ldf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSD known {			CSD get_csd /Names known {				CSD get_csd begin				currentdict devncs				AGMCORE_host_sep{					4 dict begin					/devnCompCnt Names length def					/NewLookup HiVal 1 add string def					0 1 HiVal {						/tableIndex xdf						Lookup dup type /stringtype eq {							devnCompCnt tableIndex map_index						}{							exec						} ifelse						setdevicencolor						currentgray						tableIndex exch						HiVal mul cvi 						NewLookup 3 1 roll put					} for					[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt					end				}{					level3					{					[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{					[/Indexed MappedCSA HiVal						[						Lookup dup type /stringtype eq							{/exch cvx CSD get_csd /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx						]cvx					]setcolorspace_opt					}ifelse				} ifelse				end			}{			} ifelse			set_crd		}		{			/MappedCSA CSA map_csa def			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSD known {			begin			CSD get_csd begin			map_indexed_devn			devn			end			end		}{			AGMCORE_gget/Lookup get 4 3 -1 roll map_index			pop setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSD known and {			/indexed_colorspace_dict AGMCORE_gget /CSD get get_csd begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_csa{	Adobe_AGM_Core begin			/AGMCORE_CSA_cache xput	end}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		Adobe_AGM_Core begin		1 dict begin		/name xdf		AGMCORE_CSA_cache		{			0 get name eq {				exit			}{				pop			} ifelse		}forall		end		end	}{		pop	} ifelse}def/map_csa{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get	}if}def/add_csd{	Adobe_AGM_Core begin		/AGMCORE_CSD_cache xput	end}def/get_csd{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get	}if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/add_pattern{	Adobe_AGM_Core begin		/AGMCORE_pattern_cache xput	end}def/get_pattern{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get		dup wrap_paintproc	}if}def/wrap_paintproc{   statusdict /currentfilenameextend known{	  begin		/OldPaintProc /PaintProc load def		/PaintProc		{		  mark exch		  dup /OldPaintProc get stopped		  {closefile restore end} if		  cleartomark		}  def	  end  } {pop} ifelse} def/make_pattern{	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/Intent known{		currentcolorrendering/Intent get	}{		null	}ifelse	Intent ne{		false  		Intent		AGMCORE_CRD_cache {			exch pop 			begin				dup Intent eq{					currentdict setcolorrendering_opt					end 					exch pop true exch						exit				}if			end		} forall		pop		not{			systemdict /findcolorrendering known{				Intent findcolorrendering pop				/ColorRendering findresource 				dup length dict copy				setcolorrendering_opt			}if		}if	}if} def/add_crd{	AGMCORE_CRD_cache 3 1 roll put}def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict/CRD known{			AGMCORE_CRD_cache CRD get dup null ne{				setcolorrendering_opt			}{				pop			}ifelse		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/path_rez{	dup 0 ne{		AGMCORE_deviceDPI exch div 		dup 1 lt{			pop 1		}if		setflat	}{		pop	}ifelse 	}def/set_spot_alias_ary{	/AGMCORE_SpotAliasAry where{		pop pop	}{		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf		true set_spot_alias	}ifelse}def/set_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry{				dup/Name get AGMCORE_name eq{					save exch					/Adobe_AGM_Core currentdict def					/CSD get get_csd					exch restore					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	Adobe_AGM_Core begin	/setcustomcolor	{		dup /customcolor_tint exch AGMCORE_gput		current_spot_alias{			1 index 4 get map_alias{				mark 3 1 roll				setsepcolorspace				counttomark 0 ne{					setsepcolor				}if				pop				pop			}{				AGMCORE_&setcustomcolor			}ifelse		}{			AGMCORE_&setcustomcolor		}ifelse	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defendendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.23 0%%Copyright: Copyright 1997-2003 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.23 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.23 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpacking/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel		2 copy known not			{ 2 copy 3 dict dup /args 7 index 5 add array put put get }			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 2 sub 1 index lt				{ pop count 1 sub }			if			dup /argCount exch def			dup 0 gt				{				exch 1 index 2 add 1 roll				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count 1 sub /restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get /args get exch get		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup begin		mark			{				(*) { pop stop } 128 string /Category			resourceforall			}		stopped		cleartomark		currentdict eq dup			{ end }		if		not		}		{ false }	ifelse	def/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end	userdict /Adobe_CoolType_Data 10 dict dup		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end put	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.%%Version: 1.19 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 25 add dict copy }	{ 25 dict }ifelse putAdobe_CoolType_Utility	begin	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {			((Hex) 57 StartData			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec			} }			{ {			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{	 								[ /Separation Name [/DeviceGray]	 								{ 	 									sep_colorspace_proc AGMCORE_get_ink_data										1 exch sub	 								} bind									] AGMCORE_&setcolorspace									/sep_tint AGMCORE_gget AGMCORE_&setcolor 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	currentcolorspace 0 get dup /DeviceCMYK eq {		pop 4	}	{		/DeviceRGB eq {			pop 3		}{			1		} ifelse	} ifelse} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/srcDataStrs xdf	/dstDataStr xdf	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/samplesNeedDecoding		0 0 1 origDecode length 1 sub {			origDecode exch get add		} for		origDecode length 2 div div		dup 1 eq {			/decodeDivisor 2 origBitsPerComponent exp 1 sub def		} if		2 origBitsPerComponent exp 1 sub ne	def	[		0 1 dsCnt 1 sub [			currentdict /origMultipleDataSources get {				dup currentdict /origDataSource get exch get dup type			}{				currentdict /origDataSource get dup type			} ifelse			dup /filetype eq {				pop currentdict /srcDataStrs get 3 -1 /roll cvx /get cvx /readstring cvx /pop cvx			}{				/stringtype ne {					/exec cvx				} if				currentdict /srcDataStrs get /exch cvx 3 -1 /roll cvx /xpt cvx			} ifelse		] cvx /for cvx		currentdict /srcDataStrs get 0 /get cvx /length cvx 0 /ne cvx [			0 1 Width 1 sub [				Adobe_AGM_Utils /AGMUTIL_ndx /xddf cvx				currentdict /origMultipleDataSources get {					0 1 dsCnt 1 sub [						Adobe_AGM_Utils /AGMUTIL_ndx1 /xddf cvx						currentdict /srcDataStrs get /AGMUTIL_ndx1 /load cvx /get cvx /AGMUTIL_ndx /load cvx /get cvx						samplesNeedDecoding {							currentdict /decodeDivisor known {								currentdict /decodeDivisor get /div cvx							}{								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvxs								BitsPerComponent /decode_image_sample load /exec cvx							} ifelse						} if					] cvx /for cvx				}{					Adobe_AGM_Utils /AGMUTIL_ndx1 0 /ddf cvx					currentdict /srcDataStrs get 0 /get cvx /AGMUTIL_ndx /load cvx							currentdict /origDecode get length 2 idiv dup 3 1 /roll cvx /mul cvx /exch cvx /getinterval cvx 					[						samplesNeedDecoding {							currentdict /decodeDivisor known {								currentdict /decodeDivisor get /div cvx							}{								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvx								BitsPerComponent /decode_image_sample load /exec cvx								Adobe_AGM_Utils /AGMUTIL_ndx1 /AGMUTIL_ndx1 /load cvx 1 /add cvx /ddf cvx							} ifelse						} if					] cvx /forall cvx				} ifelse				currentdict /convProc get /exec cvx				currentdict /origcolorSpaceElemCnt get 1 sub -1 0 [					currentdict /dstDataStr get 3 1 /roll cvx /AGMUTIL_ndx /load cvx currentdict /origcolorSpaceElemCnt get /mul cvx /add cvx /exch cvx					currentdict /convProc get /filter_indexed_devn load ne {						255 /mul cvx /cvi cvx 					} if					/put cvx 				] cvx /for cvx			] cvx /for cvx			currentdict /dstDataStr get		] cvx /if cvx	] cvx bind	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	2 dict begin	dup dup	/dstDataStr exch /Width get colorSpaceElemCnt mul string def	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi string		} repeat		end ] def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						dstDataStr srcDataStrs devn_alt_datasource /exec cvx						] cvx 0 () /SubFileDecode filter def					/MultipleDataSources false def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA map_csa 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							[							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							dstDataStr srcDataStrs devn_alt_datasource /exec cvx							] cvx						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource [								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA map_csa 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								dstDataStr srcDataStrs devn_alt_datasource /exec cvx								] cvx 0 () /SubFileDecode filter def							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get map_csa				}{					/CSD get get_csd /Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin					CSD get_csd begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA map_csa 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		bdict			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		edict		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		dup 4 get map_alias{			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: WM_D_2Line_Lg_355.eps 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?><x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 3.0-29, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>

 <rdf:Description rdf:about='uuid:35545bd0-b11b-11d9-9e9b-003065b1024c'
  xmlns:pdf='http://ns.adobe.com/pdf/1.3/'>
  <pdf:Producer>Adobe PDF library 6.66</pdf:Producer>
 </rdf:Description>

 <rdf:Description rdf:about='uuid:35545bd0-b11b-11d9-9e9b-003065b1024c'
  xmlns:photoshop='http://ns.adobe.com/photoshop/1.0/'>
 </rdf:Description>

 <rdf:Description rdf:about='uuid:35545bd0-b11b-11d9-9e9b-003065b1024c'
  xmlns:tiff='http://ns.adobe.com/tiff/1.0/'>
 </rdf:Description>

 <rdf:Description rdf:about='uuid:35545bd0-b11b-11d9-9e9b-003065b1024c'
  xmlns:xap='http://ns.adobe.com/xap/1.0/'
  xmlns:xapGImg='http://ns.adobe.com/xap/1.0/g/img/'>
  <xap:ModifyDate>2005-04-26T01:45:04Z</xap:ModifyDate>
  <xap:CreateDate>2005-04-10T17:18:18-05:00</xap:CreateDate>
  <xap:CreatorTool>Illustrator</xap:CreatorTool>
  <xap:MetadataDate>2005-04-14T10:46:00-05:00</xap:MetadataDate>
  <xap:Thumbnails>
   <rdf:Alt>
    <rdf:li rdf:parseType='Resource'>
     <xapGImg:format>JPEG</xapGImg:format>
     <xapGImg:width>256</xapGImg:width>
     <xapGImg:height>52</xapGImg:height>
     <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgANAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq8i1HRt&#xA;NP56Wdo0Ra1ubVryeBndkafjK3MqTTqo26ZrpY4+NVfinRzxR/OgdCL+O7N/zKtoZ/Ius+oCfStn&#xA;mjIJUiSMckaqkdGGZWpAMC7HXxBwyvued+b/AC/MuieRz5e/0TWblYxDMsjJykMAm+IkkEs/c/qz&#xA;CyYwBDh5n9jqtVhPBi8PaZ/VbOvy989p5jtJLO+T6p5h0/8Ad6jZMOLclPEyIp34k9R+ydvAnMwZ&#xA;uIUfqdlotZ4oqW048wkfk/QNJ1GDzvNewetLJrGoWhcu4IhiZJUReLDiA+/w5VHFEiZrqXG0uGMx&#xA;lJH8ch8OaT/lz5N0/wAx/lfcJMCuo3M8rRXhd+SzRKUhbY9F5kU8Ccrw4ROB77aNDpY5dMb+onn9&#xA;zKfyg8w3GoeXH0nUOS6toMhsrtH+1xUkRk/IKU/2OX6Wdxo8w5nZmcyx8MvqhsUPpNtD5v8APmo6&#xA;zcL6ujaDTTtNSp4SXSnnNLsaHgTRfoPUZGMRkmSeQY44jPnlM/RD0j39SxDyvp/5cfpXzTY+ZZYI&#xA;kttTnt7CG4uZI+MCOygL8a1Ap1yiEMYlIS+Dg6eGn4skclbSIFnoj/zX0bSLD8tdGm02Z7hbOSKG&#xA;xvvUJZoJlZzunFSG4r27ZPPjiIRrds7RxRjp4mJuuR8lWw0jSpfPukzfl+JY9NtWc+YLyGSVrNx8&#xA;JEXJyVdyK1C16g9q4xjEzHh/FlDFE54nB9I+o70pWt15O1/zR5hg8+3Kpd2l5Jb6baXc728EVstV&#xA;UxkMicmpUmtT1GMTGUzxsYyxZckxnO4NAE0KT/WvLGnaf+U2oWMV2dQtbSK4u7C5V2HH4mkiAZHb&#xA;kEBp1ofDJzxAYqu3Ky6eMdKYg8QFkfoUvI3kTy7q3k3Qbq/ilmIikneL1XVHmn4q0j0IckLGAvxU&#xA;G+2DDp4ygCfNjo9HjnigZfglJvLPlHy/d/mV5n0q4tjJp9ikJtLcyzAIWVSaEPXevc5XjwxOQxI2&#xA;aNPpoS1E4kekVW5RyxT/AJdedYh6sh8m683pKJHZ1tLn9kFmJoPc/s9fs5ZXgz/olso6XN/tU/sP&#xA;4/GyaRwr568zvczVfypoUjQ28VTwvbylJHNPtRRdB2J9qjJV4sr/AIQ3Afmcln+7h/sj+oJ1+YPm&#xA;afy55ba5skVtQuZY7PT0anH1pa8SR/kqpNPbLdRk4I2HI1uoOLHY+o7D3oCP8rNDu7dX8wT3Wsam&#xA;wrNeS3MyAOdz6UcboiKD9kU2yI0sSPVuWodnQkP3hMpd9n7Ei0mzu9A86nyNfXU2p+WtatJJbBLl&#xA;y0kRQMXiDihpxRth7HxyqMeGfhneJcfHE4s3gyPFjmNrYx5FsPy1vfLl7B5ovIY79rqaOMz3TpIk&#xA;QCiMqpemxqRUHKMMcZj6ubh6OGnljIyEcVnq9v0u2gtdNtLW3cyQQQxxQyMQSyIgVWJFKkgZs4AC&#xA;IAehxxAiAOQCKyTN2KuxV2KuxV2KuxV2KuxV2KvKvOsx8vfmxovme/Rl0SS2NpNdqpZYpCJF+Kla&#xA;fbU/KtOmYOU8GUSPJ0urPhaqOSX0VV/NNvPnnTy9feWbvSdHvYdV1XVo/qtnZ2biZy0vwktw5cAq&#xA;1J5UyefNExobkt+s1eOWMxgRKUtgBuoeZfqtlrnkDRfXRry0nTlECC/ppB6YcjwLKaHIZRRgO79j&#xA;HUVGeKF7g/oRH5g+Rr26uovNXlljb+aLCjALQLcouxRwdi3HYV6j4T2pZnwn6o/Uz1ukJPi49skf&#xA;tS78q9X9Tyf5n1XVOFk82q3s92H/AHaRvJFEzKeZqKM1N8jil+7kT5tPZ2W8U5S29cifkFb8hb20&#xA;k8lfVI5ka6t7iRp4Aw5osh+AsvUBqGmOjPpI82XY0wcNXuCkv5hNqvk3zs2uaNEzL5ktZLRo07Xn&#xA;ELG4H83Lgw8fiyvPeOdjr+P2uPreLBm44f5QV8XpHlHQYPLfliz00soNtFyupiaAyt8crkntyJ+j&#xA;MvFDgjTttNhGLGI93P8AS8x8k69+Xya15sm1yaxf6zqs81lLcRrKHheRyGRirfCfbMPHPHxSMvud&#xA;PpM2ATyGZjvM1a/82PNeh65+XMD6c6xp+kfRt4CVVnS39RC8aA/Ypx+VcOfLGUBXentHUwyaccP8&#xA;77mSeY9M1byfqk3mjy3btdabdNy17RE7nvcwgVo381B7/KzJA4zxR5dQ5efHLBI5MYuJ+qP6Qr3P&#xA;mH8o/MOlnVtRfTplKUk+tLGLtNvscT++r4cfoyRnikLNfpZSz6XLHilw/Hn+tjWkWMuifk35g/SB&#xA;aztr83T6Va3LcZFilQLElG35OVJ4/T3ymIrEb6uJigceknxbA3V/YzL8qby0uPIWkrBMkrQQiKdU&#xA;YMUkBJKOB9k0INDmRpT6A5/Z0gcEaPIMY8kaxpU35veafRu4ZBeJGtoVdSJTEq8xGa/Fx4kmnhlG&#xA;GQOU/Fw9JlidVko8+SffnNNYp+XupJdPGry+ktqrkVaUSKwCV/a4hjt2rl2qrgcrtQx8CV/BMfy2&#xA;k01/IuirYPG8cdpEswjIIWfgGmVqdG9QmuTwVwCm3QGPgx4e77eqA/NvRNS1Tyosmmxma90y6iv4&#xA;oFFWf0gysAO5CuTTvTIaqBlDZq7SxSni9POJtW0P80/Jep6ct1LqUFhOF/0izu5FikjcfaUB6c/Y&#xA;rkoamJF3TLD2jhnGzIRPcUr0m4TzB52k85OTa+W9ItGtdPu7j90s7uT6s450/dhSVqeu3vlUTxz4&#xA;+UQ045eLm8XljiKBPXz9yW/kgnl+90C/heO2uL1b6aV0dUeQROFCNRhXiaGmQ0kYkUQLauyRCUCN&#xA;ieIvVcz3cuxV2KuxV2KuxVIrXz15Ou7qO0ttYtZbmZ/SihWRebPUjiB7kbeOVDPAmgXGjrMUjQkL&#xA;T3LXJU554beCSeZxHDCrSSu3RVUVYn5DATQsoJAFlLNM82+WdVuvqum6nb3lxxLmKBw7BVoCx41o&#xA;NxkI5oyNAtOPU45moyBKYXl7Z2Vu1zeTx21um7zTOqIPmzEDJykBzbZTERZNBi11+av5bhjbT6xD&#xA;IGqrKI5ZYztXdlRk/HKDqMZ5n7HDl2jp+RkE18t3Hk68R7ny6bFx0lezWNWFezhAGH05LH4Z3jTd&#xA;glilvj4fg7XfMflTRbmE6xdQWlxOpaFpR8REZH7QB6Ftsck4RO/Nc2fFjI4yASl7/mr+XqMFOtwE&#xA;t04iRh9JCkDB+ax9/wB7Ue0cH84JxpV/5d1e0ebTJba8tZH5zGHg6mTZquB+3sD8W+TiYSG1N+Oe&#xA;OYuNEJOn5i/l1A7iPV7ONz8LlNq8a0qQN6VOVDPiHL7mga7AP4gqyeffy+mCNLrNhJ6bCSPnIhKs&#xA;OjCvQjJHNjPMsjrMB5yir6d558m6vdpp1lqdvd3NwGCW6kkuFUswoR/KDhjmhI0Cyhq8UzwiQJKD&#xA;PnP8tGiKNqemmMbFC0fbtxOQ8TF5fJr/ADWnr6op3Y2+h3dlDc2cEElpOnOB1jUK0b71G3RuuWxh&#xA;AiwBXuciEYSAIApS1bzT5c0i4S31TUYLKaRPURJnCErWlRX3xnljE0SjJqMcDUpAIPR7zyLq1/LN&#xA;pP1C8voQJJZ4Ejd15EgEyAdSR45CHhyOwF+5rxSwzlceEnyTy4tbW5QR3MKToDyCSKHAPStCD45d&#xA;KIPMORKIPMMdh89fl7aPLaw6rY2xiciWIMsQDg8T2UE7ZRHNjGwcUazBHYSiGo/O/wCXUZVo9W05&#xA;Cn2CskQI2ptT2xGXEOVKNXgH8UVZfOfkS9lWMatYXEihmRTJGxAVSWIr0ooJPthOXGeZDL81hl/F&#xA;ErIvPv5fwrwh1qwjSpPFJY1FTuTQeOIzYxyKBrMA5SiqRfmF5IluI7ePW7N5pSFjUSrQkmgFelcP&#xA;5iHeka3CTXEEPqusflta6nMmqTaZHqUJBm9dYvWBKhxUsOXRgcjOWIHer9zHJl04keLh4vOrZIBa&#xA;3NupASa3kVWToyMuxUjsR3GXUCPJytiPJDX15o2jWr3t5JDY2wKpJO/GNasaKCfmcBMYC+TGcoYx&#xA;ZoBV07UrDUrVbuwnS5tnJCTRnkjU60PfDGYkLCYZIzFxNhBX/mry9p+rWukXl6kOpXvH6tbNy5Pz&#xA;You4BA5MKCpyMssQaPNhPUY4yECfUU2yxuUL2+srG2e6vZ47a2j3eaZgiD5sxAwSkALLGcxEWTQY&#xA;7F+aP5fy3AgTW7cSE0q3JEr/AK7KE/HKRqYd7ijtDATXEGTo6OiujBkYBlZTUEHcEEZeDbmAvBPz&#xA;t0Tl510u20a0WO7uLQMkduqxs7pI5BHGlWou3fNZqogToDo8z2ti/fREBuR0Zn+Un5mDX7ZdF1eT&#xA;jrlstEd9jcIo67n+8X9ofT40yNNn4vSebsOzdf4g4JfWPt/azzXQDomoAioNtMCD0p6Zy/L9B9xd&#xA;lm+g+4vOPyVk0/Sfy6vNauo0QRS3Es04UeoYokU8a9TuuwzF0xEYGRdT2UYwwGZ80s8qaHe/mfqN&#xA;z5j8zSyfoO3maHT9KjYqlQASKihoFI5MN2PcUpkccDlPFLk1abCdZI5Mn0A7B6G/5beQ2tvqx0K0&#xA;9OlOQjAk8P7wUft45lfl4VVO0OgwVXAHkfnzyffflxrNn5i8t3EkdhLLwEbMSY3+16LnbnG6qevh&#xA;v45hZsRxkEOj1mlOlmMmM+n8be5nn5jXVnr/AOUU+rpGlZ7e2uYiwDNGTLGWUNTYj4l2zIzSEsXE&#xA;7LXSGXSmfeAftCF/KTy95cv/AMubWXUtOtLgu1wJpp4o2bisrdXYVFAOtdsjp8cTCyAw7NwY5acG&#xA;QB5/exL8oNMa686+YI9Lkmj8vGG5gMyH/dcknG3oTUeoFqykg9DlOnjxSIHJwuzMd5p8N8FEfqes&#xA;2f5d+SLWxisxollMsSBPWmgieVqCnJpCvIsfGuZwwQAqndx0OERrhj8nk/5a+X9Fn/NbzHpt3Y29&#xA;1ZWi3qwW88SSRr6d5GilUYFRRTQZh4IDxCD0dJoMMDqZxIBA4v8AdPW4vInla31qz1eysIbG6sll&#xA;RFtY44Y3Ey8D6iqo5UFafPMzwY8QPc7saPGJiYFEd3m8p8x6Tpyfnvp1sLaL6rM9vI9uEUR19P8A&#xA;lAod1rmBkiBlrpY/Q6XPjj+dArbZ7oiKihEAVFACqBQADoAM2gD0gDzn8+LS1byQ9y0KG5S4hVJi&#xA;o5hSTsG603zD1gHCD1t1PbER4N1vYTf8pLC2tfIOkvHEiSzxGSaRFAZyZGI5EbmgNN8s0oHAC39m&#xA;wAwR82VzyQs31QzenPPG5jCkCTitAzJX+XmuXGuXe5pI5XuWOWH5Y+RrOyhtjpFvctEoVri4jWSW&#xA;Q93diNyTvlQ00AOTiw7PwxAHCD73lfk7y7o1z+cur6dNZQS6datdtHZyRq0QCOFUBCCu3LMPHAHL&#xA;XSy6XS4IHVyiQOEXs9ab8vfKI1Wx1K302C0nsTJxS2iiijlEsZjKzKq/GAGqPfM04Ik3TvPyWLiE&#xA;hEAju/S8n0/QdJm/Pi8025tIZrEvM/1Vo1MW9v6g+CnHYnMKMB4tdLLpIYYnWmJArfb4PTdY/K3y&#xA;dqElrLBYQ6dPazxziWzjSIsIzXgQoCUPuuZeTTRl5O3y9nYpUQOEg9Fn5hfl3pnmjSJligih1hAZ&#xA;LS8ChWLj9iRgKlW6b9OuObAJDbmjW6GOaBoeroWJ/kt52kSOfyjrb+he6bz+qGY8W9OMn1IW5d4q&#xA;VH+T/q5TpstekuF2Vq+eKexjy/V8FCeS4/NTzgLWIunkvRX5SuKr9Yk6be79B/KlTsTkSTmn/RDE&#xA;k6zLQ/uofb+PuevAWtlaUUJb2lsmwACIkaD7gFAzP2A8nebRHcA+aPM41vzI2r/mBAWSytL6K3te&#xA;zJGopGw8OH7uvu2amdyuXm8lqOPLxZxyEq/H2fN9C+UPMMPmHy3YavHStzGPWQfsyr8Mi/Q4ObPF&#xA;PiiC9Rps4y4xLveZ6iIfO35vzaBq8jfoXR42aGwDMgmkQLyrxP2iZCaj9laZhn95lo8g6idajVGE&#xA;/oj072VeaPyj8p6lotxb6ZpttZakI6WdwvKMLIOnPhXkPGoOXZNLEjbm5uo7NxTgRGIEuiJT8vLW&#xA;48v6XY3U7215Z2lvbzT2hCsTFBJDKocivGQTNX6MTpgQOhpl+RBhGJNEADb3V+lj3nFFf86/KYYV&#xA;At2b6VMxH4jK8396Ph97i6of4Xj9360F+bP5b3KXB84eWg0OoW7C4vYYdmJTf14gP2xSrjv161q6&#xA;nDXqDX2loSD4uP6huf1pl5T/ADQt/M3k/U4bspHr1nZTtND9kTKsTfvYx/xIDp8sMc/FAg86Ldpu&#xA;0BmxSB+sRPxYxpDSr/zjzqZi+16xB/1TcxBv+FrlUP7mXv8A1OHiv8jKu/8ASGcfki8Dfl1YCP7a&#xA;SXCzf6/rMR/whXMnS1wOx7JI8AfH72eZkuyec/n1JCvkMq5AeS7hWIHqWHJjT/Yg5iaz6R73VdsE&#xA;eD8Ql+o20ln/AM4+rFOSrGyhf4jv++nR1H/DimQIrB+O9qnHh0O/80fewSDy55ik/LTTtbsLm4u9&#xA;KgkmOqaJ6sohMaTMTJwjZarQUem4+0O+Y/BLgvo60YMh04nEkx3uPTm9m/LfXvK2reXYz5ft47GO&#xA;GgudPQANFIRvyp9rlTZ/2vnXM/TziY+nZ3+gzY54/QK8u78d7K8vc14p+WH/AJOnzZ/28P8AqOjz&#xA;Bwf3svj97z/Z/wDjeT/O/wB0HteZz0Dwb8wrbUrr86bK30y5FnfyJbi3uiOQRuLfFQg1zV5gTl27&#xA;x+h5vWxkdWBE1LZmH+Dvze/6nGP/AKR1/wCaMv8ABy9/2ud+V1X+qfYxP8zvLv5g2PlaS41zzEmp&#xA;WAmjDWqxKhLE/C1Qo6ZTmhMD1G3C7QwZ447nPijb0z8sRX8v9EANCbYbjtufHMvTf3Y/HV2/Z/8A&#xA;cR9zzbzMv5ixeehc2uqXNxp2lSrafpk2sBW2ju+JlDIiLHL6akc2ptT9nMXJKQnd8urqdR44zWJE&#xA;xjtxUNr5+97ZaQzQ20cU073UqKA9xIEVnPdiI1RB9AzYxFDd6CIIFE28a8if+Tz8w/8AR5/yeTNf&#xA;h/vT7y6HR/45P/O+97XmxegfP2radrOo/nhqFro19+jb92Jju6E8QtqpYbeI2zVyiTkIHO3mMkJy&#xA;1hEDwy7/AIM507yN+Zsd/byXvm9pbNJFa4iRWDPGCCygkbVG2XDBkveX2l2MNJqBIXk2ekZnO2fO&#xA;X52ro0nnKV9GDvexw11oxCsavslSR+1xYK/bp3rmq1PDx7fgvK9rcBy+jnXq/H3vWvyjutAn8j2K&#xA;6MgiEQ4X0RIMguaD1DIdqluoP8tPlmbpiODZ3fZkoHCOD4+9L/zs8zPpflYaXaknUNaY20aICW9I&#xA;U9WgH83IJ/ssjq8lRrvau1tRwY+EfVPb9bENJ81NZeQv8KyeT9UkV7aSGeQRtRpZalpASlR8RqNt&#xA;sxRlqHDw/j5ODj1HDg8Lw5cm/wAhPMc9jqd75Uvw0LTE3FrFKCrLMgAlj4nerIA3+xOWaTJR4e9e&#xA;xs5jI4pe8e9P/Pv5SalqWv8A+JPLN+tjqjlXlR2eMeoo4+pHJGGKkgbin05Zm0xJuLlazs2U5+Jj&#xA;NSSHU/MP54+UIVvNW9O/02IgPKyRSoKmg5tEI5Vr4tlRnlhz5OLkz6zALlvH4fo3eq+TfNFt5n8v&#xA;WurwIYfWBWWEmpSRDxZa9xXcHwzNxZOONu60uoGbGJh595k1fTLv87vLS2t1HcfVonguDEwcJKfW&#xA;HpsVrRgTuO2YmSQOUV5Osz5Yy1kKN1+165me7t4f+bX5Zz6ZNN5p8tqYoaMdQtYagx8wVeVAP2GB&#xA;PNe3yrTXajBw7jk872loDA+Lj5dR+PtZB+UOmWusflVPpdwaw3UlzBKRuV503+YqCMs00OLGR5/q&#xA;crszGJ6YxPW2G+WPMmuflXrdzouu2kk2k3D+oGjHUjb14C1FYMtAy18OhGU45yxSouBp889HMwmP&#xA;SfxYemj85Py6Nt6/6VA2r6Rhm9Svhx4dcy/zUO92/wDKmCr4vsLD7mPVfzX1+zdbaWx8l6a5Zppf&#xA;he4Yn4uIGxZgOO1eAqa1NMxzeaXdEODIS1sxtWKP2/j7GR/nVqelWnkK90pp4oru5WAWdpUB2WO4&#xA;jJ4r4KqnLtTKIhwuV2rkjHAY3uaofEKv5JAH8ubEEVBkuAQf+MzY6X6GXZP+Lj4/exHzp5a1b8vt&#xA;dHnDyqKaXK1NQsQP3aciKqVH+6nPT+U/RlOXGccuKPJwdVglpZ+Li+nqPx0+56Z5V87aH5j0M6ta&#xA;zLDHCtb2KVgGt2Aq3qE0HGgqG6EZl48wkLdvp9XDLDiB9/k8g/LDX9Jt/wA1ddvby9hhgvhdrb3E&#xA;jhUkeW7R1AY/D8SgkZhafIBMknm6Ls/NEamZJFG/ve/ZsnpngPmHzFo0v54WOpLewPptu9ujXqOr&#xA;RCke5LgldmahPbNXkkPFvpY/Q8znzwOsErHCK3e9W9xb3MEdxbypNBKoeKaNg6MpFQysKgg5swb5&#xA;PSxkCLHJ5x+fOpaenk5tPe5iW+lmhkjtS6+qyBjVwleXHbrmJrCOEDzdT2xkj4XDe9jZM/yd1fTr&#xA;vyNptnDdxzXlpGy3NuHBljHqvx5JXkBTpk9LIcAHVu7LyxlhiAdwzegIII2PUfPMl2LTuiIzuwVF&#xA;BZmY0AA3JJOJNKS8C8o6/o9v+dGq6jNfwQ6dPJeBLt5FSFwzVX94SFINNt981mOQGW+ln9LzOmzQ&#xA;GrlIkcJvfo98klijiaWR1SJFLPIxAUKBUkk7AAZsiXpSa3fPdh5s0Gy/Oq8126vQdK9WdReIHlUg&#xA;wmNacAzEV2FB+GayEwMtnlZeYhqYR1ZmT6d9/gzzzP8Anh5XtNMWfQLtNQvhLHW1eK4jDRcv3nxs&#xA;ihTTp+o5k5NUAPS7HUdrY4xuB4j3bo780PzBbQLaPSNI/f8AmPUaR20SUZog54hyu/xEmiDuflud&#xA;Rm4dhzbe0Nb4Y4Ib5Jfj+xV/L78ubTQtBnj1RFu9V1ZD+lpJDzqrg1hBPYV+I/tHfwocOACO/Mp0&#xA;WhGOB4t5S5/qeb2s99+U/wCYD28xeTy7qFCT1LQEni4p/uyEmh8fpGYoJxT8v0OpiTos9H6Jfd+s&#xA;JtoutaR5w/OJtRuryFdP0pfT0aGVwvryK3FGjViORLs0gpv9nJRkJ5bPL8V+tvxZY59XxEjhj9Pn&#xA;+Ob2rNi9A8R/OzR7vQvMumedNM+CR5EWdgNhcQisZanX1IxxI/yc1+qhwy4h+C892tiOPJHNH8EJ&#xA;p/yvLSh5m09nn4+X7rT0e7RYy8lveM78lYgciFUAGg9xkvzXqHd1bv5Xj4g39Bjv5FEeePzT8rap&#xA;5dutF0GR9X1PVYzbQW8UMop6opyPNV3A6AVNfDDm1ETGhvbLV9o454zCHqlLbkyv8tvLNx5b8oWW&#xA;m3VPrnxTXKg1CySty4gjb4RQZfp8fDHfm5ug05xYhE81ez/wD9ej+pfor6/z/dej9W9bn/k8firg&#xA;j4V7cN/BnHwOLbg4vgyDL3JWvx4nnThQ8q9Kd64lSl3l/wDw39RP+Hvqf1Dma/o/0vR9Sg5f3Pw8&#xA;qUrkIcNemvg04fD4f3dcPlX6F2u/4f8AqLfp36p9Rr8X130/Sr/z1+HGfD/FXxTm4K9dV5sSsv8A&#xA;lSf1pfq36E9fl8HL0PtUH2ee33Zjx8G+jgw/J3twX8Gdxel6Selx9LiPT4U48abUptSmZQqtnZCq&#xA;2S/UP8N/Wh+kfqf1rgKfWPS9T06mn2/i48q5XPgv1Vfm1T8O/VV+dIqw/R/1Yfo/0fq1TT0OPCtd&#xA;/sbdeuThw16eTOHDXpqvJvUPqP1C5/SHp/UfSf6161PT9LiefOu3Hj1xlVb8kz4eE8XLq8I8p/4N&#xA;/wAVXP8Ahf8AS31ar/W/U+rfUPqlfi9f1v8AdNOnP4v9lmrjXF6Xm9N4XiHw+OuvLhrzvp73rsf/&#xA;ACr3nB6f6J58h9V4/Vq8q7enTvy8Mzh4X9H7HeDwNvo+xkEnp+m3qU9Oh58qceNN617ZeardySxj&#xA;/kGH/ak/6dMo/c/0fscT/B/6H2Mltvq/1eL6tw+rcF9H06cOFPh48duNOlMvFVtycuNVtySjWP8A&#xA;BX1z/cz+jfrnAU+ueh6vCp4/3nxca1plU/Dv1cN+dNGXwb9fDfnSton+FuU36C+o8qL9Y+o+jWm/&#xA;Dn6X00r75LHwfw18GWLw9+Dh+FfoTXLG5Suvqv1Wb63w+q8G+serT0/ToefPl8PHj1rgNVvyYyqj&#xA;fJji/wDKsuQ4/oXlXan1Stco/c/0fscX/B/6H2Mhvfqf1Sb676f1Pg31j1uPpenT4ufL4eNOtcvl&#xA;Vb8nKnVG+THf+QYf9qT/AKdMo/c/0fscX/B/6H2Ia+/5VJwb1/0D6nE8OX1Dn/sfU+H79sT4VbcP&#xA;2MJ/levh/wCxYn5J/wAB/wDKwpvW/S3+KOLcP039XpzoP7r0f2/T+z24/Z7ZRi8Pj635uFpPA8c3&#xA;x+J/Sr9D17M93iU69/hStt+n/qFat9U+v+j9qg5+n6velK8crycH8VfFozeFtx8PldfpS20/5Vj+&#xA;k4Pqn6F/SfIfVfS+qevy/Z9Pj8dfCmQj4XTh+xqj+X4hXBxfC2UZe5iB1j9CfUj+mvq31Hktfrnp&#xA;+lzr8H958Na9MhPhr1VXm15eCvXVebG7v/lUPF/rP6B+yOdfqnKnbp8Xyyo+D/R+xxJflevh/wCx&#xA;R/lf/lX/ADf/AAz+jfWofU+pej6vGv7XD46fPJY/D/hpt0/gf5Ph+FMjy5yn/9k=</xapGImg:image>
    </rdf:li>
   </rdf:Alt>
  </xap:Thumbnails>
 </rdf:Description>

 <rdf:Description rdf:about='uuid:35545bd0-b11b-11d9-9e9b-003065b1024c'
  xmlns:xapMM='http://ns.adobe.com/xap/1.0/mm/'>
  <xapMM:DocumentID>uuid:91526cbf-a931-11d9-8b9c-0011246fed42</xapMM:DocumentID>
 </rdf:Description>

 <rdf:Description rdf:about='uuid:35545bd0-b11b-11d9-9e9b-003065b1024c'
  xmlns:dc='http://purl.org/dc/elements/1.1/'>
  <dc:format>application/postscript</dc:format>
  <dc:title>
   <rdf:Alt>
    <rdf:li xml:lang='x-default'>Acad_2Line_WordMarks_Lg.ai</rdf:li>
   </rdf:Alt>
  </dc:title>
 </rdf:Description>

</rdf:RDF>
</x:xmpmeta>
xpacket end='w'?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -89.0914 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 89.0914 li446.287 89.0914 li446.287 0 liclp[1 0 0 1 0 0 ] concat94.2867 0.434571 mo93.5318 2.18409 li93.5318 2.18409 95.6934 2.18409 95.6934 3.28272 cv95.6934 4.37989 95.6597 17.4151 95.6597 17.4185 cv95.6597 24.1094 92.2964 26.3409 87.2881 26.3409 cv79.8414 26.3409 79.5674 20.7466 79.5674 16.5611 cv79.5464 3.86524 li79.5464 1.94385 82.0713 2.18409 82.0713 2.18409 cv82.8946 0.434571 li82.8946 0.434571 79.3609 0.640137 77.9537 0.640137 cv76.5469 0.640137 72.5596 0.434571 72.5596 0.434571 cv71.7701 2.18409 li71.7701 2.18409 74.6861 1.94385 74.6861 3.28272 cv74.6534 10.6246 li74.6534 20.1988 74.6534 22.0162 76.0943 24.418 cv77.7789 27.2247 82.6553 28.9903 87.5274 28.9903 cv89.9834 28.9903 93.8834 28.1109 96.1055 25.5503 cv98.1661 23.1768 98.6446 19.2222 98.6446 16.5269 cv98.8502 3.79737 li98.8502 1.77247 101.184 2.14893 101.184 2.14893 cv101.905 0.399415 li101.905 0.399415 99.7076 0.640137 98.0606 0.640137 cv96.4141 0.640137 94.2867 0.434571 94.2867 0.434571 cvfalse sop/0 <</Name (PANTONE 355 U)/0 [/DeviceCMYK] add_csa/CSA /0 /TintMethod /Subtractive/TintProc null/MappedCSA null/NComponents 4 /Components [ 0.94 0 1 0 ] >>add_csd1 /0 get_csdsepcs1 sepf130.576 28.4058 mo130.484 26.004 130.339 21.1778 130.339 17.9634 cv130.339 14.7486 130.616 3.41309 130.616 3.41309 cv130.616 2.1128 133.27 2.18262 133.27 2.18262 cv134.032 0.432129 li134.032 0.432129 131.777 0.640137 130.391 0.640137 cv129.004 0.640137 127.236 0.466309 127.236 0.466309 cv127.37 4.72706 li127.37 4.73047 127.27 17.544 127.25 21.1568 cv124.976 18.8306 116.359 9.52393 116.359 9.52393 cv116.382 9.55079 108.379 0.447754 108.379 0.447754 cv108.379 0.447754 107.139 0.572266 106.236 0.572266 cv105.334 0.572266 104.272 0.430665 104.272 0.430665 cv103.528 2.20069 li103.528 2.20069 105.723 2.02344 105.723 3.63477 cv105.723 5.66797 105.688 17.9043 105.688 17.9043 cv105.688 22.7701 105.567 24.2457 105.567 25.2276 cv105.567 26.8897 103.296 26.6851 103.296 26.6851 cv102.516 28.3975 li106.262 28.1944 li108.89 28.3804 li108.72 17.3033 li108.72 17.3033 108.832 9.48194 108.832 7.41456 cv110.173 8.79297 113.591 12.6055 117.614 17.0513 cv119.786 19.4478 122.172 21.794 128.138 28.4229 cv130.576 28.4058 li1 /0 get_csdsepcs1 sepf141.613 0.617676 mo139.291 0.617676 136.949 0.414063 136.949 0.414063 cv136.221 2.15967 li136.221 2.15967 139.425 1.85254 139.425 3.49903 cv139.425 25.5503 li139.425 26.9395 137.154 26.6851 137.154 26.6851 cv136.374 28.4141 li136.374 28.4141 138.809 28.1944 141.402 28.1944 cv143.996 28.1944 145.917 28.3975 145.917 28.3975 cv146.645 26.6685 li146.645 26.6685 143.764 26.9063 143.764 25.5503 cv143.764 23.7706 143.764 4.99073 143.764 3.51563 cv143.764 1.92188 145.549 2.15967 145.549 2.15967 cv146.312 0.396485 li146.312 0.396485 143.935 0.617676 141.613 0.617676 cv1 /0 get_csdsepcs1 sepf154.255 0.414063 mo154.255 0.414063 152.815 0.600586 151.358 0.600586 cv149.9 0.600586 148.631 0.396485 148.631 0.396485 cv147.885 2.14307 li147.885 2.14307 149.849 1.82081 150.589 3.25391 cv151.279 4.59327 153.851 9.50147 156.087 14.4898 cv159.388 21.7754 162.221 28.4561 162.221 28.4561 cv165.22 28.4561 li171.933 13.2413 li171.933 13.2413 175.041 6.51856 175.829 4.84327 cv177.352 1.6045 178.834 2.16114 178.834 2.16114 cv179.648 0.403321 li179.648 0.403321 178.085 0.618165 176.966 0.618165 cv175.846 0.618165 174.178 0.403321 174.178 0.403321 cv174.178 0.403321 173.754 2.00977 173.001 3.67237 cv172.248 5.33497 168.441 13.5167 168.441 13.5167 cv168.441 13.5167 164.654 22.2779 164.281 23.336 cv163.793 21.544 163.381 20.2925 162.079 17.2608 cv154.255 0.414063 li1 /0 get_csdsepcs1 sepf210.71 2.65137 mo213.609 2.65137 216.306 3.25293 216.306 6.27149 cv216.306 12.1334 209.49 12.0577 208.767 12.1094 cv208.761 11.4385 208.769 2.8042 208.769 2.8042 cv208.769 2.8042 209.057 2.65137 210.71 2.65137 cvcp208.786 24.6861 mo208.786 22.3462 208.778 13.5577 208.768 12.4151 cv208.893 12.5679 214.038 18.355 219.321 24.1797 cv222.794 28.0142 225.547 28.917 230.372 28.917 cv236.917 28.917 242.38 24.2486 242.38 18.8394 cv242.38 15.0909 239.845 12.7554 235.098 12.3379 cv230.352 11.9214 228.369 10.3257 228.369 7.52051 cv228.369 4.71583 230.412 2.90333 233.572 2.90333 cv236.442 2.90333 238.332 3.86817 238.424 4.56006 cv238.426 4.57276 238.772 6.70166 238.772 6.70166 cv240.578 6.95801 li240.962 1.92383 li240.962 1.92383 239.261 0 235.142 0 cv228.969 0 224.569 4.27393 224.763 9.1543 cv224.872 11.814 226.132 15.1929 232.281 15.5826 cv238.335 15.9654 238.495 18.5201 238.442 20.8086 cv238.356 24.3409 234.856 26.3809 232.355 26.754 cv227.544 27.4722 223.7 24.0308 213.23 13.1421 cv216.581 12.1998 220.825 9.77832 220.825 5.43311 cv220.825 1.6211 216.261 0.396485 213.261 0.396485 cv209.437 0.396485 209.265 0.597657 207.261 0.597657 cv205.261 0.597657 202.499 0.396485 202.499 0.396485 cv201.77 2.12549 li201.77 2.12549 204.498 1.90528 204.498 3.48243 cv204.498 4.34083 204.498 4.69874 204.498 9.56885 cv204.481 25.5669 li204.481 25.7774 204.583 26.6685 202.21 26.6685 cv201.431 28.4141 li201.431 28.4141 204.345 28.1944 206.058 28.1944 cv207.769 28.1944 208.922 28.3975 208.922 28.3975 cv208.922 28.3975 208.786 27.0245 208.786 24.6861 cv1 /0 get_csdsepcs1 sepf330.613 26.3858 mo328.528 26.3858 326.487 25.814 324.716 24.7359 cv321.106 22.5459 319.498 19.3482 319.498 14.3658 cv319.498 12.2134 319.884 10.2051 320.612 8.55567 cv322.093 5.23829 325.78 3.09424 329.998 3.09424 cv332.014 3.09424 333.975 3.56739 335.666 4.45997 cv339.186 6.27832 340.966 9.56055 340.966 14.2159 cv340.966 21.4947 336.804 26.3858 330.613 26.3858 cvcp331.554 0.422852 mo328.779 0.422852 325.987 1.06641 323.483 2.2837 cv318.393 4.75684 315.705 9.32911 315.705 15.5098 cv315.705 23.7627 320.916 29.0953 328.986 29.0953 cv338.126 29.0953 344.761 22.3135 344.761 12.9688 cv344.761 5.23047 339.701 0.422852 331.554 0.422852 cv1 /0 get_csdsepcs1 sepf245.238 53.2901 mo247.288 59.6006 li253.919 59.6006 li248.554 63.4981 li250.601 69.8067 li245.238 65.9082 li239.871 69.8067 li241.918 63.4981 li236.553 59.6006 li243.184 59.6006 li245.238 53.2901 li1 /0 get_csdsepcs1 sepf251.308 0.809571 mo248.986 0.809571 247.113 0.606934 247.113 0.606934 cv246.384 2.35254 li246.384 2.35254 249.12 2.04542 249.12 3.69141 cv249.12 25.7432 li249.12 27.1334 246.848 26.879 246.848 26.879 cv246.069 28.6075 li246.069 28.6075 248.502 28.3873 251.096 28.3873 cv253.689 28.3873 255.611 28.5909 255.611 28.5909 cv256.34 26.8609 li256.34 26.8609 253.458 27.0982 253.458 25.7432 cv253.458 23.9634 253.458 5.18262 253.458 3.70801 cv253.458 2.11573 255.697 2.35254 255.697 2.35254 cv256.458 0.590332 li256.458 0.590332 253.63 0.809571 251.308 0.809571 cv1 /0 get_csdsepcs1 sepf303.549 0.616211 mo302.549 0.616211 301.78 0.419922 301.78 0.419922 cv301.78 0.419922 301.746 0.780762 301.287 1.56641 cv300.829 2.35352 293.878 12.6465 292.97 14.4068 cv292.126 13.0279 290.958 11.2134 289.407 8.64551 cv285.85 2.76075 285.414 0.479981 280.66 0.479981 cv269.994 0.617676 li259.231 0.414063 li257.689 4.39649 li258.74 5.19434 li258.74 5.19434 259.451 2.90577 261.096 2.90577 cv261.096 2.90577 268.18 2.77442 268.18 3.02393 cv268.165 25.5455 li268.165 26.9351 265.893 26.6807 265.893 26.6807 cv265.113 28.4097 li265.113 28.4097 267.548 28.1895 270.141 28.1895 cv272.735 28.1895 274.656 28.3926 274.656 28.3926 cv275.385 26.6641 li275.385 26.6641 272.503 26.9014 272.503 25.5455 cv272.503 23.7657 272.503 4.48145 272.503 3.00733 cv272.503 2.8877 275.927 2.82129 278.357 2.82129 cv280.66 2.82129 280.868 2.99268 285.377 9.60743 cv288.059 13.5411 290.18 15.7613 290.18 17.6885 cv290.18 18.5899 290.15 24.6661 290.15 25.5274 cv290.15 26.6211 287.787 26.7095 287.787 26.7095 cv287.043 28.4136 li287.043 28.4136 291.744 28.1944 291.745 28.1944 cv291.746 28.1973 296.584 28.4136 296.584 28.4136 cv297.353 26.7095 li297.353 26.7095 294.494 27.0123 294.494 25.5821 cv294.494 24.1534 294.472 18.9864 294.472 18.4043 cv294.472 15.335 302.303 5.35303 303.795 3.19776 cv304.728 1.85108 306.164 1.05811 306.937 0.75293 cv306.916 0.75293 307.088 0.387696 307.088 0.387696 cv307.088 0.387696 304.55 0.616211 303.549 0.616211 cv1 /0 get_csdsepcs1 sepf346.753 26.7247 mo345.974 28.4151 li345.974 28.4151 348.705 28.2071 351.357 28.2071 cv354.01 28.2071 355.565 28.3975 355.565 28.3975 cv356.346 26.6851 li356.346 26.6851 353.448 27.0245 353.448 25.5333 cv353.448 24.2774 353.428 22.8458 353.428 20.6709 cv353.428 20.0406 li353.428 20.0406 353.455 16.0577 353.464 14.8174 cv354.419 14.8174 362.045 14.8174 362.045 14.8174 cv363.296 12.1719 li363.296 12.1719 354.336 12.1719 353.36 12.1719 cv353.366 11.23 353.383 4.95801 353.383 4.95801 cv353.383 3.48536 353.607 2.84376 353.607 2.84376 cv357.804 2.80616 li361.599 2.80616 362.194 4.14698 362.194 5.56348 cv362.214 5.54395 363.878 4.63282 363.878 4.63282 cv363.82 3.73438 li363.82 2.51514 363.953 0.992676 363.953 0.992676 cv363.953 0.992676 363.279 0.363282 360.862 0.363282 cv360.862 0.363282 354.501 0.600586 351.321 0.600586 cv348.14 0.600586 347.041 0.411133 347.041 0.411133 cv346.281 2.11963 li346.281 2.11963 349.215 1.82667 349.218 3.2168 cv349.223 5.08204 349.222 22.3282 349.222 24.7085 cv349.222 27.0894 346.753 26.7247 346.753 26.7247 cv1 /0 get_csdsepcs1 sepf46.296 85.0269 mo46.146 81.1285 45.9097 73.2867 45.9097 68.0626 cv45.9097 62.8423 46.3604 44.4288 46.3604 44.4288 cv46.3604 42.316 49.9092 42.4297 49.9092 42.4297 cv51.148 39.586 li51.148 39.586 48.2476 39.9234 45.9947 39.9234 cv43.7422 39.9234 40.8697 39.6416 40.8697 39.6416 cv41.087 46.563 li41.0879 46.5689 40.9249 67.3819 40.8926 73.2535 cv37.1988 69.4747 23.1998 54.3555 23.1998 54.3555 cv23.2388 54.3995 10.2378 39.6109 10.2378 39.6109 cv10.2378 39.6109 8.22266 39.813 6.75586 39.813 cv5.29004 39.813 1.20899 39.5831 1.20899 39.5831 cv1.20899 39.5831 -0.041504 42.46 0.000976563 42.46 cv1.3252 42.46 5.92188 42.2291 5.92188 44.7867 cv5.92188 48.0914 5.86475 67.9708 5.86475 67.9708 cv5.86475 75.8726 5.66944 78.2691 5.66944 79.8648 cv5.66944 82.564 1.9795 82.2339 1.9795 82.2339 cv0.713379 85.0132 li0.713379 85.0132 4.09522 84.6851 6.79786 84.6851 cv9.50049 84.6851 10.9258 84.8453 10.9258 84.8453 cv10.7906 66.9932 li10.7906 66.9932 10.9727 54.2876 10.9727 50.9292 cv13.1514 53.167 18.7037 59.3604 25.2383 66.584 cv28.7671 70.4766 32.6426 74.2886 42.336 85.0542 cv46.296 85.0269 li1 /0 get_csdsepcs1 sepf115.142 58.1739 mo115.134 57.0874 115.147 43.0591 115.147 43.0591 cv115.147 43.0591 115.615 42.8111 118.299 42.8111 cv123.009 42.8111 127.39 43.7872 127.39 48.6924 cv127.39 58.2149 117.766 58.1739 115.142 58.1739 cvcp146.47 83.8628 mo138.031 75.5386 124.432 61.2984 122.467 59.7134 cv122.584 59.712 123.821 59.4122 124.362 59.2017 cv129.856 57.0616 134.729 54.0484 134.729 47.3301 cv134.729 41.1387 127.317 39.15 122.443 39.15 cv116.229 39.15 115.952 39.4761 112.694 39.4761 cv109.448 39.4761 104.96 39.15 104.96 39.15 cv103.775 41.9576 li103.775 41.9576 108.208 41.5987 108.208 44.1602 cv108.208 45.5557 108.792 50.8624 108.792 58.7735 cv108.181 80.0367 li108.181 80.3785 108.346 81.8257 104.491 81.8257 cv103.225 84.6617 li103.225 84.6617 107.96 84.3062 110.742 84.3062 cv113.522 84.3062 115.395 84.6343 115.395 84.6343 cv115.395 84.6343 115.175 82.4039 115.175 78.605 cv115.175 74.8062 115.159 60.5284 115.144 58.6705 cv115.347 58.9224 123.706 68.3204 132.285 77.7847 cv136.569 82.5093 140.312 87.5953 142.969 89.0816 cv152.864 89.0914 li149.931 87.1558 148.822 86.1812 146.47 83.8628 cv1 /0 get_csdsepcs1 sepf77.0586 81.0171 mo73.7022 81.0171 70.4234 80.0992 67.5757 78.3628 cv67.5752 78.3628 li61.775 74.8433 59.1876 69.6944 59.1876 61.6695 cv59.1876 58.2027 59.8077 54.9649 60.9805 52.3042 cv63.358 46.9834 69.2759 43.545 76.0562 43.545 cv79.3062 43.545 82.461 44.3047 85.1822 45.7427 cv90.8287 48.6607 93.6905 53.938 93.6905 61.4297 cv93.6905 73.146 87.0064 81.0171 77.0586 81.0171 cvcp78.5914 38.7642 mo74.0386 38.7642 69.4629 39.8189 65.3589 41.8135 cv56.9991 45.8775 52.5796 53.3887 52.5796 63.5313 cv52.5796 77.0953 61.1485 85.8589 74.4102 85.8589 cv89.4141 85.8589 100.304 74.732 100.304 59.3995 cv100.304 46.671 91.9839 38.7642 78.5914 38.7642 cv1 /0 get_csdsepcs1 sepf158.045 39.7364 mo140.561 39.4058 li138.056 45.8775 li139.762 47.169 li139.762 47.169 140.918 43.4527 143.589 43.4527 cv143.589 43.4527 155.098 43.2393 155.098 43.6465 cv155.309 59.0035 li155.075 80.232 li155.075 82.4898 152.635 82.0757 152.635 82.0757 cv151.369 84.8843 li151.369 84.8843 154.073 84.5269 158.285 84.5269 cv162.499 84.5269 165.619 84.857 165.619 84.857 cv166.804 82.0484 li166.804 82.0484 162.124 82.4351 162.124 80.232 cv162.124 78.607 161.851 68.2911 161.851 58.8921 cv161.851 51.5542 162.124 44.669 162.124 43.6177 cv162.124 43.4253 167.904 43.315 171.849 43.315 cv175.132 43.315 174.979 46.8082 174.979 46.8082 cv176.84 46.7847 li177.727 39.5723 li158.045 39.7364 li1 /0 get_csdsepcs1 sepf226.079 80.3726 mo226.079 78.7144 225.474 67.9415 225.474 58.6192 cv225.474 51.7115 226.079 45.6001 226.079 44.5816 cv226.079 41.9922 229.712 42.378 229.712 42.378 cv230.952 39.5147 li230.952 39.5147 226.356 39.8721 222.584 39.8721 cv218.812 39.8721 215.77 39.542 215.77 39.542 cv214.587 42.378 li214.587 42.378 219.03 41.879 219.03 44.5528 cv219.03 58.8482 li219.03 58.8482 210.876 59.0157 205.541 59.0157 cv200.204 59.0157 192.592 58.8482 192.592 58.8482 cv192.592 51.6949 192.592 45.5884 192.592 44.5396 cv192.592 41.9507 196.226 42.3365 196.226 42.3365 cv197.465 39.4737 li197.465 39.4737 192.87 39.8311 189.097 39.8311 cv185.325 39.8311 182.284 39.5005 182.284 39.5005 cv181.1 42.3365 li181.1 42.3365 185.543 41.8379 185.543 44.5113 cv186.089 58.7808 li185.543 80.3316 li185.543 82.5914 181.854 82.1773 181.854 82.1773 cv180.588 84.9859 li180.588 84.9859 184.542 84.6285 188.755 84.6285 cv192.967 84.6285 196.088 84.9585 196.088 84.9585 cv197.272 82.15 li197.272 82.15 192.592 82.5367 192.592 80.3316 cv192.592 78.9273 192.592 71.5264 192.592 63.4678 cv192.592 63.4678 196.496 63.3126 205.314 63.3126 cv214.133 63.3126 219.03 63.4678 219.03 63.4678 cv219.03 80.3726 li219.03 82.6324 215.342 82.2203 215.342 82.2203 cv214.075 85.0269 li214.075 85.0269 218.03 84.6695 222.242 84.6695 cv226.455 84.6695 229.575 84.9996 229.575 84.9996 cv230.758 82.191 li230.758 82.191 226.079 82.5777 226.079 80.3726 cv1 /0 get_csdsepcs1 sepf383.853 63.71 mo380.41 63.71 377.53 63.5411 377.53 63.5411 cv377.562 63.4698 377.584 63.4258 377.584 63.4258 cv377.584 63.4258 383.738 49.1949 384.342 47.4771 cv384.96 49.3433 386.413 52.5332 388.412 57.4854 cv390.797 63.5411 li390.797 63.5411 387.295 63.71 383.853 63.71 cvcp424.369 59.7071 mo416.408 59.0093 413.081 56.3345 413.081 51.6275 cv413.081 51.4 413.096 51.1802 413.111 50.962 cv413.423 46.6416 416.762 43.8838 421.808 43.8838 cv426.622 43.8838 429.792 45.5035 429.947 46.6626 cv429.951 46.6841 430.531 50.2549 430.531 50.2549 cv433.558 50.6856 li434.204 42.2422 li434.204 42.2422 433.033 40.9283 430.393 39.9761 cv428.898 39.439 426.939 39.0152 424.442 39.0152 cv418.124 39.0152 412.924 41.691 409.896 45.6319 cv408.147 48.127 407.124 50.9898 407.124 53.9986 cv407.124 60.2847 411.374 64.2051 419.336 64.9063 cv427.297 65.6026 430.625 68.2784 430.625 72.9859 cv430.625 75.0484 429.965 76.7906 428.777 78.0972 cv427.258 79.771 424.874 80.73 421.895 80.73 cv417.084 80.73 413.915 79.1089 413.758 77.9507 cv413.753 77.9292 413.175 74.357 413.175 74.357 cv410.148 73.9273 li409.519 82.1363 li408.37 81.8897 407.285 81.4224 406.792 80.5484 cv403.768 75.189 401.339 70.7549 395.161 57.064 cv389.816 45.2212 387.688 39.1583 387.688 39.1583 cv382.818 39.1583 li371.913 63.8721 li371.913 63.8721 366.864 74.7945 365.584 77.5171 cv364.93 78.9078 364.302 80.3003 363.953 81.0855 cv363.7 81.5054 363.559 81.7164 363.24 81.73 cv362.92 81.7437 362.65 81.396 361.851 80.2632 cv358.701 75.7671 352.273 66.5723 350.328 63.6485 cv350.149 63.3799 349.082 62.0562 348.994 61.9151 cv349.146 61.7188 350.052 60.5562 350.217 60.3414 cv354.091 55.3165 360.668 46.4463 362.738 43.7159 cv364.766 41.0396 367.59 39.7159 367.59 39.7159 cv367.59 39.7159 364.802 39.8384 363.177 39.8384 cv361.552 39.8384 359.359 39.6177 359.359 39.6177 cv359.359 39.6177 359.305 40.2032 358.557 41.4815 cv358.037 42.376 350.949 51.316 347.681 55.6763 cv347.44 55.9991 346.526 57.2032 346.379 57.5704 cv346.187 57.2969 345.147 55.71 344.907 55.3614 cv341.436 50.2881 334.592 39.6358 334.592 39.6358 cv334.592 39.6358 330.792 39.9234 329.429 39.9234 cv324.886 39.6055 li323.761 42.376 li327.823 42.376 328.823 43.1802 334.398 51.3604 cv337.2 55.4698 338.935 58.4449 340.704 61.0391 cv340.921 61.3589 341.92 62.7979 342.108 63.0567 cv341.932 63.2969 340.691 64.7686 340.482 65.044 cv336.253 70.5704 326.774 81.9781 324.413 84.4292 cv322.184 86.7437 319.528 88.8003 319.528 88.8003 cv328.098 88.7144 li328.098 88.7144 328.607 88.4839 329.355 87.2046 cv329.833 86.3843 340.381 73.0738 343.788 68.6807 cv344.373 67.9268 344.829 67.294 344.907 67.1807 cv345.165 67.5782 345.413 68.1143 345.811 68.7081 cv348.456 72.6382 353.821 80.3668 356.806 85.1656 cv356.806 85.1656 359.939 84.9117 362.901 84.8668 cv364.718 84.8394 373.545 85.2222 373.545 85.2222 cv374.706 82.4488 li374.706 82.4488 368.739 82.8042 370.177 79.4195 cv370.876 77.7769 373.447 72.3316 375.347 68.2383 cv375.347 68.2383 377.372 68.126 383.609 68.126 cv389.847 68.126 392.979 68.2383 392.979 68.2383 cv400.835 85.1617 li400.835 85.1617 402.969 84.7789 405.336 84.7789 cv407.704 84.7789 412.182 85.189 412.182 85.189 cv412.55 84.3282 li412.792 84.4322 413.04 84.5362 413.313 84.6343 cv414.805 85.1734 416.766 85.5972 419.263 85.5972 cv425.583 85.5972 430.782 82.9214 433.81 78.982 cv435.558 76.4859 436.582 73.6226 436.582 70.6133 cv436.582 64.3282 432.331 60.4078 424.369 59.7071 cv1 /0 get_csdsepcs1 sepf270.208 39.8873 mo252.722 39.5562 li250.218 46.0269 li251.924 47.3194 li251.924 47.3194 253.082 43.6041 255.752 43.6041 cv255.752 43.6041 267.261 43.3897 267.261 43.7964 cv267.472 59.1548 li267.239 80.3824 li267.239 82.6402 264.796 82.2281 264.796 82.2281 cv263.53 85.0347 li263.53 85.0347 266.236 84.6753 270.447 84.6753 cv274.661 84.6753 277.783 85.0093 277.783 85.0093 cv278.966 82.2007 li278.966 82.2007 274.287 82.5855 274.287 80.3824 cv274.287 78.7593 274.013 68.4424 274.013 59.0435 cv274.013 51.7042 274.287 44.8194 274.287 43.7691 cv274.287 43.5767 280.068 43.4664 284.012 43.4664 cv287.395 43.4664 287.142 46.9585 287.142 46.9585 cv289.003 46.9351 li289.891 39.7237 li270.208 39.8873 li1 /0 get_csdsepcs1 sepf199.402 26.8482 mo199.402 25.7032 199.411 23.6617 199.411 23.6617 cv197.115 21.8931 li197.115 21.8931 196.844 25.502 196.844 25.5059 cv195.682 25.6509 193.817 25.7002 192.241 25.7002 cv190.758 25.7002 187.914 25.5333 187.509 25.5225 cv187.368 24.5103 187.295 22.8355 187.295 20.6592 cv187.295 20.0308 li187.295 20.0308 187.321 16.2613 187.33 15.021 cv187.782 15.021 189.841 14.9361 191.957 14.9361 cv194.316 14.9361 195.937 15.021 195.937 15.021 cv197.277 12.1661 li197.277 12.1661 195.019 12.1846 192.144 12.1846 cv189.847 12.1846 187.659 12.1661 187.226 12.1661 cv187.231 11.2247 187.248 4.95362 187.248 4.95362 cv187.248 3.48194 187.472 2.83985 187.472 2.83985 cv191.666 2.80372 li195.461 2.80372 196.056 4.14356 196.056 5.55762 cv196.075 5.53907 197.74 4.6294 197.74 4.6294 cv197.679 3.72999 li197.679 2.51172 197.813 0.991211 197.813 0.991211 cv197.813 0.991211 197.14 0.362305 194.723 0.362305 cv194.723 0.362305 188.366 0.598145 185.188 0.598145 cv183.425 0.598145 181.511 0.427247 181.511 0.427247 cv180.756 2.1167 li180.756 2.1167 183.082 1.82422 183.086 3.21387 cv183.089 4.03663 183.23 7.94922 183.23 12.1592 cv183.23 17.4957 183.09 23.3428 183.09 24.6724 cv183.09 26.7193 180.885 26.7154 180.885 26.7154 cv180.101 28.3995 li180.101 28.3995 180.404 28.3951 180.895 28.3951 cv181.896 28.3951 183.443 28.1929 185.224 28.1929 cv188.278 28.1929 194.458 28.3882 197.491 28.4644 cv197.921 28.4756 198.293 28.4839 198.606 28.4888 cv198.829 28.4927 199.533 28.4888 199.533 28.4888 cv199.533 28.4888 199.402 27.9927 199.402 26.8482 cv1 /0 get_csdsepcs1 sepf320.656 82.4927 mo320.656 80.6382 320.67 77.3321 320.67 77.3321 cv316.952 74.4673 li316.952 74.4673 316.512 80.3126 316.512 80.3189 cv314.629 80.5538 313.196 80.6338 310.644 80.6338 cv308.242 80.6338 303.636 80.3633 302.981 80.3458 cv302.75 78.7066 302.633 75.9937 302.633 72.4693 cv302.633 71.4512 li302.633 71.4512 302.674 65.3462 302.69 63.3374 cv303.42 63.3374 306.756 63.1998 310.184 63.1998 cv314.005 63.1998 317.938 63.3374 317.938 63.3374 cv320.108 58.7134 li320.108 58.7134 315.142 58.7432 310.488 58.7432 cv306.766 58.7432 303.221 58.7134 302.521 58.7134 cv302.529 57.1885 302.557 47.0318 302.557 47.0318 cv302.557 44.6485 302.921 43.6084 302.921 43.6084 cv309.712 43.5499 li315.859 43.5499 316.824 45.7198 316.824 48.0103 cv316.854 47.98 319.55 46.5069 319.55 46.5069 cv319.451 45.0503 li319.451 43.0772 319.668 40.6143 319.668 40.6143 cv319.668 40.6143 318.578 39.5958 314.664 39.5958 cv314.664 39.5958 304.369 39.9776 299.22 39.9776 cv296.367 39.9776 292.333 39.7007 292.333 39.7007 cv291.109 42.4371 li291.109 42.4371 295.81 41.9634 295.816 44.2144 cv295.821 45.5469 296.048 51.8838 296.05 58.7022 cv296.05 67.3453 295.823 76.8155 295.823 78.9688 cv295.823 82.2842 292.251 82.2779 292.251 82.2779 cv290.981 85.0054 li290.981 85.0054 296.395 84.671 299.279 84.671 cv304.224 84.671 312.649 84.9874 317.56 85.1109 cv318.258 85.129 318.859 85.1421 319.367 85.15 cv319.727 85.1563 320.868 85.15 320.868 85.15 cv320.868 85.15 320.656 84.3467 320.656 82.4927 cv1 /0 get_csdsepcs1 sepf440.863 42.313 mo440.863 42.9068 li439.168 42.9068 li439.168 47.3365 li438.48 47.3365 li438.48 42.9068 li436.785 42.9068 li436.785 42.313 li440.863 42.313 li1 /0 get_csdsepcs1 sepf441.466 42.313 mo442.441 42.313 li443.884 46.5601 li445.32 42.313 li446.287 42.313 li446.287 47.3365 li445.638 47.3365 li445.638 44.3716 li445.638 44.2691 445.642 44.0992 445.65 43.8619 cv445.658 43.625 445.662 43.3707 445.662 43.0997 cv444.216 47.3365 li443.542 47.3365 li442.091 43.0997 li442.091 43.2535 li442.091 43.3765 442.095 43.564 442.103 43.816 cv442.111 44.0679 442.115 44.253 442.115 44.3716 cv442.115 47.3365 li441.466 47.3365 li441.466 42.313 li1 /0 get_csdsepcs1 sepf%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5Adobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 9.0%%AI8_CreatorVersion: 11.0.0%%For: (ABN Mac User) (UNT)%%Title: (WM_D_2Line_Lg_355.eps)%%CreationDate: 4/25/05 8:45 PM%AI9_DataStream%Gb"-6H#k"JE?P5eqE)?>-:79lfWMhY5D:?=!I2#,V$W-g[_o@)6#e:^<rb7s+\/U3oY3NSkjF4Y^rWfT1^Uh?=']*%<aM&Zou.`&%G9>^koB,E^%e'DccZV>;U'\Hi_Cj)QqVmG5n`JH,^L%\cnD8IBG>U[\:tT,#S+2>S1&L1nZ.$<d+)bN$rUAqGGHY>&s8DKDc+E`-%s/c+WX,l.dGOsti2c0C`O7/ddcZ\23g$`9tf^6G!pUf$ahn8sIoo8ors,4*;(NqaTZi=l>jSN$I?b_'e]p+qOAcD4l^]):J0>Dc7%Dqk,WWh>+FiqDIU?:-:VMRgu@^UUiMq#-!B00d*r05oStpYF"'+'u^3H`fe:k104`^AHC)_RFfk:Z&n)ObOd[ec:t`IJ)abp!p\K%[kBu4@#P][\F%'0*npV"*IVPh0AaFSq=r5#05k12HMn:qm<eaTI8-?KHMue)e.9H6]%K&0n(umC/F@oWjo1U]q:.,OG:nR)Dgr,U%NrT#qs4!>0fl"MPIQ-^(r*PfiDtnJ5Y:j_W9>oX`lg%CM=sMWprr(HPs6tc_qTZX]ru2?``,K(uHMuYmL-mWhOe:R5SR2?qji<i$%4:&Q"$9iq6l&H\SX7$Vh4ZsLYAVM,LQb5F^J6jl;rbKL(TCB2C\XfYMI/2k1?X`d-3:D6FDlo6_BBoL'2A2qU2m7/7]6X5226AYn%a,@0C-/e7c=\8`Z:alL3gC%M(=GN_XjAa8SA\jJ:$=Ei&k4P?q[eo6SYMQqjnF$0lGsK,lo8:q2s8Ko;DuLj:;2"dDYmgU(a.(]L%J,Ara#8fD"Z1)9'r9g'+2a?'MqWubW9>mdZfPlE!]R9a7f,nt*hgE@F!"q'1=24ZXHi<N]YMV,siX:5.h<VPbH2#(P[4gn508q?"%#NUS'bSN!""4Jm@\?h=[c-C<q@lKNJ3EChKko17/d?h'?IeE]b+5X[/R45bb$f`>d^\Ob/Me%%"Io/uoEqd?4Ir6h0)qOmjBmfdR%2rB(srS?4pDf0N#ndbZX&jH@_^HK:.n.LI7Uq$:DYQ+(ZnE1=l/8+`t%Y)NT^IuE#a.ktl_nXLU\'EsAcLJAF=84U:'dK$%&as2I%;DDX[(pC*Lc;Ll?.9NI_%mF8+Q7<&2i@"P_V2e%sFZeZIa!6%S4CX_Z/,],+.Rng^l3b;@]&IA4`S=d;&&47A`@(>*kGBp%2jV<E%iGU9$IF=_XGM"/<NFf=ap`'+4,Jh]8TC=er@?9n:f#6Ue2.M^:2te3j+r'p-n)VmWpL>Z=(]ME0='#[Vq8&Bg)"T0H.,f)nP'bKV%kI,Hdq!H^SSKf`&5?J9iLVL)@SjDd%J&a@"J$B^]:M6%bKqH?`iGZBHhXUO(Df.R%n2HZMro%de7E,r]=+3BJ;/lS?Y5"c5`pMe`%a&5$;3\K3/DEYFugVrXCRWZ?SK`5?sm%%T4p(!_W?LtYY5Q$M;(r*>*4=9tWrl-_G]BK^BCgB+bEr6-]DT-&''u`(I3F`EVK!#KP%;]^.#*KN7rQcBP>Xtuf#j0iGHI66'+ch$o/__(&:ak4gYc==aL>gX)BDd2W,bk-Ulf!_l+S/UfOFt;E.r55EO%d?T(Z`KqWjoJ\^%,Df4*dEo=:HhG'W00a0p9L&<=WM5LsC\aInQ[c[2qt?A+VCt8D8GgRp.Ihi`b<J#YIEq]W/3j"pJ(+Dfcf)\6m4\K5?^sk"Bn,sA%nriIr?iHJZ&(>Ti48d@pb4g5&J"_AC++:X[)1Qe:^P'`%g$6Y5b7+.(o'/'L[i+=DIi0jNP+=<FkEWd7-g*7L`[?^rnlP`,s'nc*%M_VBJJ\Hb\;i-Ul5%Lf&n"`^3H`V(VTEa^Ef:L19aV$et?%(uNgC)n"DL9G1fjE$[r<_rT6WZM-"5WZ@p`B=$XYK^3A[B:?m\qi:%%4uPOHMl*3j54g4(s/C]ADkr9[(jQ9_'`nLQej+b9s)CKBFC[jn2kGL^6`#MafWNZKYP(j"5^iRk@@Oedh`;E_p^FY;XRY&iB-t'%CZZ8Z+/f3E:>\oc4?keId)mkVdl=(i3:&j#LuQl?VMXX"]&B-[n&dOe+)jnnX;Mi41Q3sm2+*kQT$@Qi0CPe[#OFOrh%aE-edcP"%N@9i8O1X0,1];RX-QKP-p@V&@O_8rh_Pab8!8YOUcbGDe;4otI4Sj^Y1Ae2ULuVSR[GYRk4Pt!T&`98L'9AoK&C'@:Y.D9\Coou0%6f)=X<VX81OLE_pn^P+'E^0dp*NL<"V0Q@l\Fs#olnfdmLnWJX4ZpY=c>Cp*mI;qJ`_++HMW`L#3i<GUUm46MWF@+'X4XA\#4n:+%-0i)$GJea7>XnULD<;SPr!H*cBpO%(o=V\m!Oum+`b:?.hWiQLQIJ"WEuo=mf/I1B[d35>B'hDRa77&m#<^=i)2su:8):c9\`2:T%.[r#n+aj#J.pY8D$,t[Mee0k&eeWNY[8?*>dhZg+[?0M]9:7roV>*[tK:^k*m^#6jhmJEeOF/\U*Bpm'"`g?c=psO]a7`Ju-h7'Z%Im\q_/WoTt;n8]d-]F6:$bbLsCQ\-^;Kq,#Jt,,?LIYC+X1F>bV2c,Y'HX)9l^2AocNSBX2P,e/4J"m)U=(ul-08W!PAO?ChJgbn%>"#6ug3]>cRPF(4[i7tuBL?^/%n(nmPY\k3)#nT03l2oHa#fC$.OO3@i9,A#+DqEf#?[#`_n:Xq$SE%!TVq)_<D)\T*+$-iR0,C(%'2BtA-<-!VX.._"eqrk8^1)A82cE%\$d`i6jiYu-7f.V1I/((OA>8oqGmi/ggB]`q_%[[>,V(],p!C1UVj+LP;bZZQSuEoTKT7*V%U)oRTit&7HcgTZ@oe!Jc-2/5=V]2$;NBG]bo7#@ra\Uk6_i^2?B&p&)-E,0U%>:b$9(>Zt71n/*'Dj'4A8VYDq-#s9LR335<D;tr%;R\.U0RbhabSK0EYlpip*U:.t<5G3>n:a\OMu/T-P*5h)W)<!nN!n?<iqGh_Zu4s](!A-pBU/?NZSY=%mdpEUer&GmNuV*r9-,#n%23jq5U',bn'??Ed^2)e07Qt/C\.<YBH.<6rXRh&=#-D>@)kXC;?(&&>/k)O86it'';WT3k+K6a=dAGbW>\<<DL]]^7]LnP4U-(em%I9RF;(D=t-DU`Y#GfBX4g(gc+^!T,OTt67);\+pG27nSXMXUKArj'?[bM]5##N(O=\rKQibY^i5V%fF![l.cPUP:(@)UcqJp6;0n%$jaF.\Y"]@g_O-:3,_D6Nbl+totFNWQeHq`MP=a"c!74-E$W$HejuYUlfQMO)CKA8M-iL-3`7GWjAiMKPlY[H$;D7qMKeH;Xl4:r%*099pNL.qW;F2?2RBO<^=QU@DPYbuY;Fbd-0Ug""a<J*8>][HiH4#5rKIZ$?>[klRIQ7c0+f_)d#+SkfqbHSA?Ju;I(Nb7A8&iUR%=$l/]NFkuJO>=5Ub)L]s([@HS<Q]aQ;,c6WQ]6mf3i*Ffo2d5_-fZVBb4sW/53+WY\ZX+6UFMD)]LMfbf<jGt4$?B=<0:f90h1cG%dPp+JNY;+N@G=cA!,V3'[Pjk;m9DmM(<;t9?=e0t0;Zb'%Mq0d:Ro(mK5GdngX+DRoAd.:ot^0+B12MZgIu:G#^0Y$gnH#b"&0"g%g*.c0qO(16_A!.Q[qA6-E:'4n99H_$X.3jE[64do)RM`.CtI,SQ-?a]QFQS#1)mZgknN"8(7#K9*DBB^7Ab:gGS,ZC<pqP_bcDDU%r$dp6.GN6X)XiX?Qq%/-Da@L..h-U/'66BlW>;1=FO]##nBN3jpKf\7bO#"<WA@CEZ1Nl(*EMQ>n@(*+0ip''2$'SOVE^dP:%jL5%BCh&)\)6+=%Y$OR]>`U6mra]SbP1IChYi#?X.SXGY?l_Rp`8fqdJ_\3Hj?M*]YuJ#l'M$:rqag-O7:[a^45nI]3i5LrO_;AZm36\%P4t2jobK`=]0!\*q#.\6hn4;[o@)Mt5ec5]nB:PJqU0T%"3R4=^K'ntFWXuIgq<I#qj62gqrZF0oc)f?pRHU(c50gC]R9ajeNp\;%n"!7'onnKEX-M^H[IT;)mXE'GDh%NLk0<Y0Xl9i=52V,-0Msd4hgY0FXbLau_lhnpTYS/i42(Xl]D&eje.VEEm16C=hL3ub@thRC%qp"P9?G?I->d`4qhnOI6%?/G2+5_Hjh'W!Sm<@bbZMWqAQers2<K^DhXIalh]QeG:_D,qPGh[YM%NdpirT%qho$ni^IePMQ6I!,L%"8F1dbpJ[`n.4DMs$$C/Jn5F-+%Xl>C4B6dnl<8Y=5h;/\LW#<Y3*p.bKJ)XjmhmA"Kl"lbB+VQ(&1FGBeR`m%&DtTF?1F<LXZ6%%:3ems;`obt5Ilt@RF?Pr3aNk'a5c]/g`O]o+4Dqc_pKR^d2pOE37[!YE&nsLLVs*f%f)1rnIQ30i"#Hg%eI%t.IOQ-mLT3n^&U;j%qm[/`^NY%:2gZZOjg(E!YoLp#P`eZhZ%V+p/%1fH`&h>g;a0>2h?3`#;bf@8O?JcICbjAPFI>ngQk!i&9$/TZQpUAc-(@R04qTI.%.3@LmmUM)6VANg!5.YF&M=VG.C3Bs)E!Z>;64PH_&:tEFfO+alH@P0TroalAmu,LUq<3J*hKeFHTA>dEF=29S5hB:]H#h"q(J(C-%cFDP6fh6[t7shIe>AUai7N8G<c<?.?&6J#BSBTA#bha%t9et*!j,HD\g!%nR'03s8b_I&?Ckb."EJB4m;"ooq;#`5o].^l^]Eas?%INAOi!;*>VMm!rD_tR)N,ln;$0p_1a;"ek.W3-uLNPq0mYM[+-q.=jHB361l*Rs6dB`\2-$B$F;Y-`31jYalXZ?bi`?AH.q#o:a5%fBL*fr(NHLp2bBERa-EUq!/:VCVjH)H2SP[&=28#-R(ZFFrJcm8Ic<%LXV`l,<.j.l%tF`*?[I4GF7qLm:#:4oS4jA,X_p[&/$06%77`B!*$IUgZs@O1/.l;WdY,OFaV,;c!tct-;b3kX7+<[u`Bp".Li.L4?&n-8,oT7Y4^TsPQZAYX3q>-/NRMZMY>VRZ?)bHqE.rI0%oZ(lTm`]82^8BS2o!S9LD1b(Ok?0;\`!2>jYIJSKbq#EsJE'H#CZF.+Gob1;;uLrge9*fr:$9:VY")=Al)@'sq(o-=:]'r@<ZrVE%aI=Sp3g)<sc9s*;PCSML,n$%f>,#EH@V&?k<M6GQjAM@mN$rDLkk[\X4e3nb-P7m?Q):HOdl/`PZpE,%JhH[X<dK3B2+L8&Fl[p9%bTBBt(Nb&Y,3*=7pk(!iZm+L*Uu$Uo'\fiMnFKDn)5rDkW/.H?/^(mY,I7g'6?XQt0i"N.##ZUAM0,OaU+2#O9FBkr.@$7\8TlB0%nj)Id.[Zl<_Nd[86p3>"TPC4,M<ZE;S;,DRMUYC#4AY$EGTc[C'i7jq;$fZKPSI%p78XpKF`\geP]bD!q732*MOH![VPp&kI``S/%+oLEgIoK?L;.WamPgr@t<Rt8DB,.P6oiBXK<Hi$AQ1\5+?q#iN/bUm'+q$W6af6sDg2,;P<MOClX_P6f?oH8QlBL$MCK:VJP;moW%Z]V,V3"^G).XgS2e5G,)$?%;92N;q-H)F9$Q>5lsi`fF?H*-n*mQ6EN03^d8V]gBHeB78`876^pAI]JJ=Cbi[#/qQH?$S3#3&7>'%0u\5B8Jb0,2S*;-`A4M.4397G`Tf32&7-F<ib0j;Xc'V;%[5OUFAYH2bkSalB!K[heZ]i?9j8!3Cc/F4-<^[kY;r^$!j%"#Y6#WV%ILVNV^C^k!e/<8UN)L0GK)^Z*IYI`VqhI&s:PASX;.h`O%#1=<VR>!_J7#L*o!X*^0_$\G4O(l%h.,NV_p#H<lPl4/WhJT"(QT_4%52(ZU*c]2eO&.$SQ,F&GU>=LM&VE[*](;kUcqJN^jfQJCQsDNb_<%nZrW3;6X7jh:e_DDSW3g6fep!0048o$;S%$.ZpSXWYob3'9%<?(0YfL:.nkk#j<dG?E84bm=M2iCGW@2J;Ich&3#d=0J:cX@XW(X07nMrJ3VJ8qiE!@pJ,M&051TC85??H'G^e+6hnF&fSQ@=J&1%XT0BPr;!]R)K4Agn$<r$HQ2M'D#C9`@en]_&`7**4`_LT-N,W'p5[=e]hfIWO_B/s40C/V;)K7dB.QR9D+A&"C):US5S=-[L'/cr%!3%pXaZ'=c\,o[V!%DnQ;?DrG"=0iEWAst#3<ABT!lf)I-1A/?Zmc$8.R:$E'+h8Z&?dT\0b"[M#=L-DED&RX$4sfO&A8_g^FLE/%#)JrTU)8D?-6SHT7#_:FbnEq".p.>;:SXD0X9KfN$-6o`EdIelHNNbb"h8K$*'5:d!Q]<`10oE8++S1"J:(]))B85Mn3G_Qd.e$V%IZHP.&W$H5%)r_"^]II(^`4OPM%%U;%nu!hbi?!6J[/a8Tf?F2!>nK37T1uf#WN>!P[&e5@t5f7$!:++(6sDM'jt/L?sP.ql73Di%%BqYoX=XF19>Kg"Ye1(B^(XoJ(!*3U,ZG#]0`[8.^aff^bejS-o*"9*"Tkk.VWqj0-dqugTnRS6gqP%d[=i%@cm"Ys&Dg*%gK=q+%Im&HY4?MBpO!(k11#1k>/9E/_p[>S^]?Y6Nh7:;pphO$k>qFu$fC\8smc%>f:%oBIlnrq:T22ta0Y?M]ri.Io9Bd]+dq?;lg+&nD%I>[m.V*.OK;4k;(Vs,Yqe!B\a4[jeQd[m>6W)$XOe+=@IBeCVr"tipVH@Tp0;!Q3I'_16J<RR>]M-?N$BhdbYX\Y4hVK8K_Vb1.A%3Do*@-*?F%W-,kN`KJ`>%H#4jn!-i>Q]LPJdG!._kj\J/lYt0m4F^)riH3CgH-]JJX6H_.Fl2?/R@gI-ZM.U>ejY8eU$V\[`KDSS%:6/8@2m9i(`J=>$Fk:`E>5n;h7k4*.[33?L4B0U3>@&r<2;M?lhJ:RMp8j"V+3b;h9_P^fQ*\N3O6U3G/CnMMYGUKg:9/Us4dU:p%`N/76XOAY*:![CA<q0pN0'fk_V^GMm08aa`grl,K6lEUW[dXNT-*J73]l3=%`H]-E`R#?n1h9i:G88q:MX-Z<^'\31kuGQ6M:gF$%="1;mL-R%I]b&1d9DH5m]1Pp`gf\>@NM)TAr;bYRMX)uD\"0_:6sn1ZKc[QVp!niLYA\T>Qg].5pr-%,nJ8-FTDeQb7fE+O9E*88%k:fL%HIDF*-L"i4R\%DBh<RY]F-rbM4_]3PPB<uU9qQ$\-D/Vb+l;2[pUli7\q:$oO?6MrJ.Y7&[=Am0'%jdm8!9F(Dngf#!=96c%^cH6&7IsbE#WYbcQ-j55rOV-F8(ZtLQ)5"?'d,L^e3%@X%._k]3sl0ThV`6HV]cT)p$VeE52/[.VX,S<r-MYi>&DnICi%cSNhbiI%)QX?OAqRK3?t!38/*JjIMf+dKMaY(P=/jfc?3e$$ofCV2`a`Hoc>KCZ]k(E3g5i;$QRgQ9nhh#.l]pd9jP&5O:p4BB:A)2_lY<HS%e4o%AK@H?c5JCIbj1)Oa4P[;`f%@2b*c1d;Hink>e,J<qoc(O7e!U[AZ^^O[mDVk*g[KF*Deqp[F?pbm4jb,@6ppHiSS8f^^8`>%%e9.gmF^J4I)Z?i(daJB?9.WiDY]MVeldCpW,3qTtKbKWpfWPQf.XG%S'k=QoYTg3M-lRs#1W`.]O(A8UNj^<U5eJ<358,?I';;i^%4qK,+/<TC1+b"q]!I4`fKhM!bR#*aUG<l/c.F2ZA+YcdR+h8t,_;+$<T&*Pe1RMr#hf.X\*/&Yani8>@6^WcS+$iYB3>"U&7%5a4%'P&];<[-]^-0E)2"W>OHr1;;a(=93sZa?<HIHublBE,"NiH?XN&KDM$Q]dY_%=9VlO.7Nq/_,Z6=@nkm21;C)0bb6j;5<.s6>ieX%'rOZ1%pc]87TbmIU/Mje[u?mLD.?IN\eRPU/r4B_F[98i*TYl(oUNXMW4G^Ll"c)AfCYTIL57>.F8?g785:^aZKZ6uL@=]<ZIPHB%lntcCq>'>_;t@U;l2*'mpDW#Z1]BVUUHo_Q3t8QhXWX-n_:Z9/m@@r'Pgj(+mA-j9W5Y@YFN1fR@?*@;B((LD2Q``Oc\*`A)j*C%%:T>2,cDK*m9$ON7QDJ1tC=X\.qdO2H;B&Q@1**rFSN\[B<,5F=2j)'n667h6,a`>(<m/tN1%>Ou+t1J>6/.Dj:r:5J9o3'rPu%q@%9]VSb.A:6Lf*CI1nHjV[:)BHW%9dBdU;I2:(8fO^Fbh#\_)b7(&&e(_,iK+_?sEeXLe8;Ne6iIiiR./b64)aO%Ha@/_hgp_lo"KP%<rIDD%<dRc1b;1D#M0-8%7+GC"#G))@[EO0S-!/'e/2C.)!Nl'9S6k4:duYN1mUh;&8I'K\2&o7WUXO<A#9hq)Jd@69*dXWcl'mV%BUk%dTP4t+#,2:;EA*^IC1*J7Vnk5j\tak]'$K!9ICWs(Vrb1M78dkK)i*o.?8NYFUTnZ%,2Bg^,e[.kWe*f4oW#8^FThP?Y@G7L%F8DNW?+IQ[WqR4GetdC\np)A2r/'!gl-o!sA3\bSTM-:OPe1e2kH-.C8"!D4P\j(Yg6T%QVN<rPWWn`b8S,9.p/]_kY0njOA6YJ?%\5LR%SUmW*=IP@@bq.,bWg4F*[7k%I;1f7E>cQ2*bq<=c]d3-ehi%<l-n;U(a/&Z/XR%D@NB_VI?/2!lJQV3J4n_B_K.j^PTAWYS%hEP>X(I,d/B%rkgg(8QOlqt+N:c"*?&+lh=lsSk]o!3O/OS2sd2GG0ckW.KDSEU<V$b)6)l&Ht#ZO(.HNsroh=Y(-ZqiEE1Km^A=%H$?fGFuMduLaG>sLJpfCICQ<sK;[1jK#Kr1O=Aj[/JfI]Ro\W<$?M8Z?IDK1*an*IcIiR:QX&/"]1P4u)rnDGhnHaOrQXa@!rD/g%#(;O(q]+kp3R[@64I[D[iUioQIuK1&((EGZWQ3]X5>R!ZQT=.&Wqo@gfUFiaLNn7XnbaBdq)QCbF,9#NM%rgKSc43<>$^qDkP:M2%F.DFV37#?k$9uRVrlrH.IR7Sm4kE%O]I1,T>q$_bGl:&]r/XYb5C97+c$H48No'^S^&*c*jqG\la4NcY91JAflqfn-kJsqJ54/44%jjd-<:UV>CLX5MC5K[l_1[S@nNlV,=O8Y\(*h1A_%h$N$Mk5pPmY]g:SimiP)l(Y4cjpK5*fL$\NRhDs([R+8E&g0sIg4Z6Er<K8%EW)/Br$PM>UN6:I_$YZ[)pIIPrur2,MSnb.VO9,T=_Cd)S4`t/H,nN!F`s3cWS)<AD<@:!YZX$'VO486&rbkdY,_.am5L_nJ!Fcf%3GRIg$"8Qnn&[;-,'sf(FP*J>qo<$kDXgDo<L1;M`D;e94Da+ncE_-L3DF2T+bNS^RWW_d7j-7kn"=:`A_rUS8:>/IUd&4KiPJQ$%>2!'NjE&Qu[7T/[$Q4cM\+WA<h3[J:9BMt:I)<"1g,edD7kaEmO]+8%h.Er;'lh!#pY-qGPYRr3?dT)F9]dWG%_5X<h`X'`:1S@%%A9CLTH-0ZG.cRDMcFO7d730?]QQ:9'fm-X=G\=<Z)9e[[W`Qr]q(E8$>T_q7G0LjT(Y`PUF%ZDeSe<!6&WcI:3"ngZ(pA`WY&gDt%4E9#ZgFgRbZngM34qKl.kUj<8%<kAfVA`F6!MqZ@F<D4](SRE4".?*R?1F$?."qe`*pt-cA#s>c.8"TS'=j5VkQM.Y6ji#>#mM?#%f-E_?7UYD*V&Drb%ZP?;`f>^^Mf]BG@p2eA$Ai(c&@*cE'%2S,)2JQ[O\+cX(*t[JCSJ2S92nNbjJ4.O6;f-:2ec6fUFRkK1/\o9%d5F9CR`27(R8fr(9"d]/djRseF\^bU^T(^/K2's>QQ7\;>^gZ)AX`$IF*@H1fe[9elM7d0lVfb&a!4pU_'h3[S`NMkHdnig?+mSs%P>ij?V(#PHPcB*(UP5Ymp9W*=Zd8?Os)dt@cPt6'2kWBR5_%X@rk&:1Gm!n51IqK<)LJ+.XuHQoI!2-rpNhq1o.s^Fh5;??rDe/*%Is.I`lotC$IJU.C_Z'n@ic?+(k;^o9EMT5e8FI&cI,afZNqANokj(4Vc\Ysl-[L(+SXP<N1nV-Ro5#.*O_?k2GW__;++mmK:A"*>%5Q@\r^&7a`\HP3iPOe=W:]C\QhTtVEr`h)H:[gC6Rna3;3*N@(OjP81d14+YO2C*U^^seY5PILi]9p1i0&hu\57],GoI!i7-WuC`%=9.BNS/G))kg$7PB21W)+AmIA/?*siEZOEW!Cu\%!HDa]G:km-5YheBP13f6`UNQi!'WSs]tKRK,JXNjaC,.6S0stB$61qLDY:*A%W[A5!@BPBMBKgk/9^m@&PgYp>iC%s;W;?,d"mW6bgiH*;[MhSle?mlN?)pk=ASS2>%1:Xmd&G5E-gNN6X13E-l6NCPQ)Ib_VdVG'%9=:iX,\0%J$!E7t9R6/^&g+$.9cGoRc_]:ZUeJs7H*h=ufNk*j1a>%'gC!AAi_D6JCF+1(F-hc%Vs4c7Y+Ib'[u?/`]34W'm8_-7%-,nE!\71blfZp5Uo$t'UC"X>?)l%OcZu:%%NbMq_kl!'XqN9[s7QrEP-o]rFZ,8/@6h_UY>`O9,;tV;@H]VT7C`1fCo`[L[Q8,&W%<1Q8hF7R1`>ZZ$.6[nP#*8JL\p2]MZMNYp69-SR-UsX-BG>c,W,cU[;&6C3dLRR(J:\:$RF.-j4pF&G[f6$IV83IUa\Yaei'!KAT%:&]SUr^"2-W]B"D0Uu6$_$=BeXuhFC2fmV$h&jG\*PO:O-a,46m#PE9%p\?0>A4>EYV!@+Z%@b4oEVJ)_c?Pc<THsk9iunj%e-E6%(Gu@i&%2X(@-[uU!E6B14O,#;kj=_WDST5H_"9mm!8nW>rB74-hsiNdYKu)i9[E%rQVQ$$qYYn@oPej[oB3^-lT2e\*mjjh5LuS0%<-g+OP1N-p-<^*'b1F%Njqsu,0sGX+e$M/iWLh#7GmMmi(oHg7-D1jt#(a:a%cO;p.^;*hBquMY>+EIZS\misG6lZrL-!WHc'b^f%8r/ir46?u(kh_K(;?789VJor*pa;1&3lcoAa*e(j%)-lkFhQEV=H@]_hQkfMMtt,S)YC]hT;933[&(J;[#_AT__gH4R,R7rG'FEK%s!.hWpj1_LOi&b'pQoo\"UX)`H;I$S%N^G<l9R2m.%0KW)'T[kBeo?DR>Ik2J#(;5W(]9RVC15d&9+KuX@j_rEjj1;LW_A7M'VG4%>+5Bj1QAU\.;!*dnML1f1Q,aTR,I0o1JDuaW0pPERTU^jZT`9h3/L2#ilJY4B9l'5Ziat7j+0!b4)q.G(niN%>uA_<P*/"jWXkrk%j"-Z)o"6D#pUbr$.o-O]\SVOga':N:\ToJ35ulB#@(n.ib#V4dX<K<u4uGJgBPq%/AdG8+X+Nr&OG_8_XCNp5XMp#A6bK8!Ru+,&%R6"(N27Q(X2H;_<JQ^O,(0dc9PZ42uP&RA5W+&aEl]gG,Op-hi@K^tr'5%jiVN$#_-b6*MX&urg32bZ=3BZ,=g<<G@>&FnT[YU:A%H1%Jr'1]R7>h,0F`L#&X>Pp`D\n]W<X[Q%AhXS#mI9N]!k73d9T>qi6+6>'F3<,XA"ZeeU\*IHtr8[J6]qi\eqfHK;4oDn[fUF\E%!VaS=N:J$m4H-reUG`K^&XWZll8"mXEc4N5m[[-G8U:$cfdhOC0U`62I?HFQ[tM"K*$,'9B*ceR[b(.73C>LM6fZL`+IG47YN^L1%qeQ$MY_h#SImso+>Fln'3aKD_Jk[2#qI#aQQ*;]k9eC1=@3!T%m)6I;d:(E5VbTZs8n(^4S"eP7`MP1EFg2;elZ_ifdb*'hVDpKa%Z0gY^h0do%T0s<=jIq(7'eg^*Vcqd5cp)YdHi0"U_h!;R>?r?G[sd&(HJ%m\rH3nokt-BR`_h6G6%@XEr9:c,isC4RlW@T[O7sS(%pY.[[DrXO+HCj$D*Tsmkb"n&f;]isJr4_^^^@&YJW?0Xbj.+QlWFtjoOdN#dDE6M88iJo_QgUQMFONU*koT+^2a,ZWm\-e*PPW]j%n$.353&H,bi,Y_Sc.u\TGIj)f\jWe='HVLLhLbn:VhZ=[GAdK?10F$eWp%4N8DPj^=cM9$:Wbn1^8FaNkBG/GF9b,3PZe#SU41/,%:M3t/5AfieoJeeo`MW0?r\^GEZ!/f(]"Up8%Q%AU[S5!^C8AHne+3_^Z04;%2I)gfDM5V?dlebV%nO(#0!OOBf]S(dq.J%8^K/\B%`s-$<]5-Z;#Bi7G/DGU4i$W+3H+<C&GH9KE3bmre\rNiW0O>FkfrqQa]%3QIlbFiL'@S-:C)o.='kF_4af=+%;uO39pKC.R)mNom%fa?;-C(H4e581Uk8K+\&:XpP!kmauiKc(k=r3-LX3PeDFhK[ck57BVOA`<WoFFG*4?RFHs\f>mkNnm0KgZ35kghghRjmY#7r[uB2%m'_K$2Qtl<Fka+&HdsP8cU=172MjV[4bTaJR1"hgB_YLJ+%2TIlr-^_:Po(pM_d:Fl]g_2(6Lm\[190A81d/E&A5"i+>s,u&"5PK%O4nr\X_2A/@K4`%\8P0]c][gYOA@W8b(5f_.i7n7*_(ndg2Me_X]aH#j;ONR)',rmM0PT6.AKt)mrrA`NJo4L]?]sgm)eu:4EKHT%joOXhQ24@<2s6CXLL]"=VjcL?k3VX*S&^rS?1(9RpTe@P08%Z#F+r`+$6.RJ`p-HcC7a_5l;n_&W(4%h\si$uM5E?\ffN6\g.]4,%+E!!k;jHcP6K2Y,a5=8gUJFjt2@qLL(`-5e[J<SAEmnEagG6=APAi,%S^:BS,+?,HW`Q?)WRnjjLETcr"ft8Ab1&qaFO;U[CQNBt%eUpZql[8B7dt!`D8Q8@J@U!#`9;ufVqs)h3OY/6>V+&&Tg/s$A8Ebt:X\&@fUJt=s>:1qJG[@Y]3>U2?ldjD"1Fd3Q;0[?ZKJPWd%+.aq?!QbqNXh4p[Xjra9;SS?pdt"=lENLijONH)3[@anbA?(CKA`"rf2-Y`/+6ol=ls.+q?#\fUV%I(FoC"`i73c,FZ8Qefpko$L%MiNlMg6:IeAOU"U3W3V`mH+FMC1u2'`D+i)-XZsR%DW=A7p+>]Wu>Vndb(Q<<M^:(l640UdQEAUfUd6n2>aiEhl[j,CU3s%1T$a3%bXL$&luK+73?!%FcGr([j;(fP%`.A^m!5Mf7HhPF1u(+fNQP4g.Q'g;T`h&%[F&hnae5XhS_*A<d^IH3%Hl,UGi:MbI>4Z-gG"LP%'#T(Hl!mF846a1nVjUQPN$I<7U@atQ3OI")cY8h8Z"nY\di>+)oUMd=ZHTQnasNdfVNS:;<iV[99j<@:Hd+$a(g4:frS4$2o%jeB%pSIG-7%-8IbSlFP7XX[.XhiZ"\h2<D=<-A/p=@sOW*O6*:1oa'Ci(2r\!f7XM/+p._fBs<N_k^_mn)^jqH^M2T=4PoeF0F)!1iks%C)[Jn\_qZAq!*=#Vs8^!=#!NEmjm4!#bB.emsdcjChbS)6I&%B/1#&+(D`4C_%01%Yr"I"'0.C\9'H2i[9h*7]gl,lPLV\Dc\#_.%n!_eVcdA;4ktJ8bbqe,>8j>AbpTF.`fePH]qMB'TO)s=gRr2JSgPniH\PAdTaL-!KRP^adiQ?;gR;;'4F]u@t:!KGK_kCl1daal!%Q>U!YZ"mNfG$S*WH!31O/`"%a\9L_\r4LP.b9(K7<n4M"dc%7<I).[_"T#LprTa?re,sOZ"4N>K^!IdY>U=kNYHS8p=BjHS2D$?+%L'csZhlqI5"AC=5b-j+Bg6T%QVKb:2-4POFc(oC:UOKSN/Fip;b<uB#_<K4cU1T_RA>#5(Z*d7mWdrQ[._lPNohc2d)8jsnLV<K8%:TWnHYEPCQF=4CV[g8mY^#AEQJTO]eU8L&W%o-_t:1q?'J2WCr%npYdLGRX6`Vm^KX7&`%5AkLXR.c<KNAKIa2>_<0C><+_8(lJ'%CJSQM^[[E&B/X`f[lNk+opAI6J,/f_LY%$j45@JrouE\"j"8bb,<KVkrC"9]qr^N62r,Fns%'VdkoheZO3tY=L\`hj<;2t*k0`g?%h0XI(5LX+an*)"P9]LD")[gru8$oFs?k":&,P3Uq"i/a)I/!?XpM\o;Gk:V>04&bQgj_'WniQchnMaghr:&\<qmV+<qu?E\rTi:C%Tu?\Ujo+#\_Q)R%+j2NPgIH"NTd;D]rq4TZq`j'"rrM&MG(023]79k<oBmQLs6HlI:TNYZn#4*=\>qKr4">244GS-!WPW$6,3KMT%5Yk29oM;khZaRt\Up0_0I.4JViE#D0gju\^AAS/Rlj--8U/.u^EOZCq0YhnYGc_EJiD%Nm#uF'=,"8Vm5%-0o%frUuIAf"5bC-Q'%XFirc<--sPg=g+J"f;g[K%a8*Tkis`a+lCC?i!SL4LCB&e[E&7ChoNXqP:j<G!VbjI62,4kHVQ,4mJ-nHO.E^3Hr`MeU9[?g9'5r%XO9I'YM4TOX0IhC`g4uBcDs.YB"T=?^5;p_Zp*!n2mg(="5W4seeZjA0AEOgl4`2/cj-,qToW^XLQS8GkX2Il6ZXbAE8c(YDF:l/%UqXLL:ELK0PD=K+>MRJM?F73OV`rT;CQ$pmh!1HU0$VPcnV3NY2-``oL6dck4a/;?74LpnWsCu*oV#<1BQ6HI]$gtg/ZoOh[TAr&%$,eM0j(e&[3-Kcg)/=^de/C8&\"X!AT#^!%A^jnHHP4`TPn?$s"eRl@(tXqbWXZR(eCpfPrp=gLN"S+NYfTVZH$jo7mc3bS?N/n@%nBLBU(jpAnmus+b5(-(RTap.1<0_nfoYJUUAr48HQ3`@.MYA7!TKldRSt7P'^cu`+7]c-gX/OV)?<5t`H`Gq$G#$(eHErd0KrR$b%U`R<TUYKm45$k&Om,Cdtd%5(B0q;V"E&LNe1MT89QPj30`p+,WS\I]"'Sg^;;*2$!3?+l?0YJS>dc:bR5g(0]55kV01#BEuS=Hl,%"JcF4MI7m?l)a<T\X3b4*-!iiq$ZIBWa'gp#<`8k8'<+_<fWX_+RMV%F'.8<MqN`]6Y&nVjW_qb-I+k@TkDPqmk.k$r!EV(M`J_c%K@WOt[c8s@"H^';L_So'r!_jg\4E7tXDTgVn#\F(5gaPH\A*h31tC])J74pi>T$Kn$qUC[SO0i1-Mr*"3,q?LT)]%fD1WsXX/1A0%bTQ'"g?O+\_?uJb_&Nl#eGHs]'das1iPL9+f(\"I.835JlGs0/cddH5*sLmC6;n=A+7&e6$S"g]`Pr9eHs#5!W)d>cN:7(ZVS'M-%OBH"Ln.q<R@aaPU>;6j>9+'qa%4SCH]+q:f=gC*%ZC^a?&1Y&`hhZuJ#E.Z:CAsH](l<qOoM7bdL"p(d\D1N"5RZZikBbl?9gP%0%+GKJ-pH?btR#DZj'9ln:]'i/#_K[g94/1&MF\B'_(n`RSnVGg!.X"tPG?@dPKNV8$Tugkkh]ZV9$3'c$"&e.D^0^sW-L8Sp+bqLM%h03X/@?kHK(X_BN^@-o7_IVKGj=4;o>G346!(qpeFn?FVHY\/#3Nb;,3snZ_hT'jQ%CDP%SAHhG]HZ(@1+oNe4k'qN.*j:Mkk8ht%47eELF)_T$baCt+@3ET-O1iFF)_S5\6&[TU^SSeZG[&#h'V!PAetibDQ!u8fJ[>Og-ie7CdB;nS!TKoV7q$pG.<=_^o!@F@TV)sm%UG1Ws0uLR3(=kP;eE))Y0dZBH'kT(gKmI13P)j3tT4%M*cs\8_"0!R7FE0Mt&\V`_;X&`FO9\F)2t-b<G.7M@JLuGj/MKV.0I!&V%CB$jlT2p!5T7Ml)F-DqLL>*f]cb11:,`uEI-2=;ERK:Uk38[&&^f"hi*7,5C%<.Q5I)&%n5[1?,5jY)![5sas']GaJ5Z;mtLilT5%Iit^YhBQC(m\-e/Y:>[d`9UqQQ>Q_t5oJi=N3,Pq"@,*Ro=G*b#G>Sr"B:4h/0hG$Z*&=I?eAE7C/o)A5gid:iggbg>0,,7QJic4%.Bd091dN0'>1dt0/!p8X8I<E!7-P3:_>4826)5Tg7mq5#_Z_QN\s%4m@2)B.7DG_/ejjjZU91^4!asrc7X<L;Mcqi`(>4@I9)rdu%4Oi*<F_Y\ji/cYQ94EZMP*9nV2CG$eOHAeSKEhZ"0ioVl;M`'rdQ)p$>r@'7)&TBU5"Jeo[8qs\Y9\o\7iq$Ng3U371X\rc);&0-%0h>h;&Q!CC3=m2I?`sgN9jEDQoF?;lMO?q<8@O.cd\goIqCJsUI1sJ-/R@,]R]jku2)m>$f;,LO%D6Pe+E_p!FM,h[KH"6fJNjLi%K95.2^hZplP<80=g]I3O(:C3hPu_O3Q5tE]iSj#Ble:%gQ0ECH2C"'WUa,GZ>61rZ"*,/F>mmE[!sB6'_F:IK40]k)_HaGQkXMRN%Zp?<\/Isd''Ze'@(%R@.%D@]DdP?)iB]k8g)-5\k/.M#K(<iplJH:;jW7]#DC_82]4bc0u)^;pJnJC/YHU&@XY$SgIRVS=1nO#-K%>%(\tok"%Y2aebTgY(%:U'G.pkf<g!1WeXBR?62AO96@LN)(_Hi5dYdac0+$g_?dGo3:P0Em(a`]gHLi#WP'6#V8ufg?eZNq-KO>%:Y/W3J=JErKY^Oj-%H7fPp6;7A6YWCdZ@_^)n&_-b0#6>T?:=\nRNj8%P!UhNXU8>Q)iXVnffG^5=Se%ChR9JnjWYs4(]A37.C^#%.\t<WS*H.d1hLe&MAK^.Y$5r;*.Dp[VhgKlLr3-AnU*o6Xs'%B9-DXkI^D$&!W:"uR;no6E_iUE31L\McQq`0iAhi<4I0Ekn5ra>%Fc('f?=?k)P]&GU>,/fl+_GuE/1Tb1\RO7#(JLZRZ*KEp]`XRW!rsM`l;'fH?"L9/cbpBLpSO68*W%N9SWS1cN+u7Ge^:&$/PC_"%2@cf^k/+^6Ws^4'Ab.[I<i;ZY9N=lo[<-=3:.kC3gHHrm1&]hq^t$Ku^<3Yp!dlM$H8X:S%*%7a?2Z0nSDUMWC]!boTa)+D4^U\6%PC#S>e>aJUGs<JpTRW#N_iq5Sn?;J?UegiihM-XY<r$odZ9/g)]cD'RD[!+:B5(IM"uM"i1d#lZ5(aq-(?(7GQ^5*a;^2d0NVmZC%hmMddo7KrJmH4^F((qK&-qdq=0_4CUH5PZ<#@1DHRiS0M!T0shR_E+W<@k?(n&L2"<Snr<V57]Z$:_?7l$3huAs%s3TdYmU&[Z>8%M*r'@b"QAZqAtB1'D0\dJIeX9BgKO)qJ@afX_T`"$/5'5[+["oVVuBfgU,\'5-/Z8<I&i7N-0"ne^X-=e?RLWE7?1$2*F0popJs.%hlIgF%(p](8jgor;o_G:;(LAf3VBEq'_(78@XNi#b&">]YQ.!,i`-bNab.5`di=^1RZZB`F>,f+LpRSHT.+u,ke4W!j][4D<:@!@%!MaL!pE$j],,;FcQYGjM3Yq\AhETLJo];_&^V#!d%JnB"O0f#1gpMO(b=pXoUjB14nQOe?h$pHS+"FEA)Cl?Tg^U(%k]O4LMM9m2%nBRM(n>7C#'ElP*Farl`^H].RDUo3b<e"2G@h1iJrd\%&#P89!@m;I/lFJlsebMNpGJ#`iLhg9uUagj6H?[*l)oM.^o_A+FDg#K9%GlQnfga)<*ONABoq@'!N+T+?cFJqPcDqcZ7p:?PopeS"kQ7`-99\r\XQPgGdLS&Mc^3\i?r9!,0DI1)hH2$9%)2&Jb0181$s.j)=%Vf1fQe3R;l^ABb9LKXWMlN:erS<4L&<L-89_f]=5C`h`=ht'[d'507731;tCCiafm\u0Lig-?^ioO%5[XfB+/^9algp(a94<aK-?%csAaA8H8N]8g%WI^=A5a*4dD&l<A+RX'KhO]o1(ig$,Fmc!#4,SSoV:0]9AL\6ZPL+,/\0_lSL)+tnrP:-60>auAn6W,IWQi>;bA%hE/PN7QQQJ)nH[ZEK3*(EUgUu[T)P9eB[X!H0A5bO1BbpXDaTK0%F%QKltFhlDi>K(l*=UXo`psD;UB)ZED78JMWPRd@RS1^H&t,%q#.[*cVK#cqG02`fpSI-o56d@S-Jho9ot/N]gs8#Jqt&_%KknP'04#3(rcKbKFWAmJjE*#TP$$i<H8<!.X=\3qpgAV9K3-aHOG'>%=^Ks4"Z7^&]aVi^*8m"kKLH.N"X55<i0<B.A"_.CJ/O`Z!)5"J1<sTX`!UJ81Jn<!>o5L:/.6buo%j?X5*b=KLrV7g!i"9Z[,i_'%oq9-2HdSu"U'(R2FT.Fu`4Xjkfl9@Vq!\+S+&6`\I<bAOmE>6RhYdjJ5B5m''oMnQm_9tKIf"oV:C`0YX&gB]J,SfQ9.]qgh;:T9%rt#+hGm8h1-PS^95EM0l0ao=N"6E/W-c8Z2+X)sM"p`-XP_+CSQI'*JUkO!^0NoHlc,i!&JLq-c1d)1H+GdlC1o9Os]C>*r7Z<#F%.&4ca[[pkJYUsD<7%86G<dGb):,7nn8I-.gkX@>h!W![cOl=R,#W`#Nj#Zb(jRMhGf_@!bo@p82Ie(tD^]"Uqfqaa,_L#4k-pA;>%TIWLj0hS)LHc#N5/jb+)5se9l,mFS6Bc1O07,@2H=QYR>!!W\`!MjI=`DQjW4eYJ[TQ?e4cprApohcd>0Z8WpkS7NXh(e^+"i<#K%PS/0B9hKrCJ^d0mj/WjWT%QSYMi7LL\qn==LSX=kMcVYZZ-6<9#2Ls[H?hh=2Dm<Iq'keke'gX0('Yr-ZXL'mOe)_!omnTgECF9p%rY!SACCNWOBF,*<'/YPsF!QEkhEo0aM`BFI@H@1'cUXYGe5,:k[t;Xsels%)=d@bjcpMJ7:_WN4G(@5q0EUA\-7N.OMTaYP"='(g%OV*07c90C&,!(%9#G!1E1js*>50!@#;oa^#69HLsBQt]6d0BCm=GkrMOjF5c%6Zfj9dBLK&scrJA57^4"ia%WY?rM'/`]WZhF@Hd%@i5VL=b[]%N>*\*%n9jNquceVTgmI[=M<,_=:j.XA##S('3"rZVR&6R&X4=X!pBAj@V+13(E#[47rqg^aWRbC`e1d9gU.GM`WjW'%ZI1akX<#\-/+[uE!K;:XNkmV!DD/Ot6j>]Z&hsq76=?II1%X>]<$;<A"(jA*Z%N,,Q^J\NYHqBc0Y8`D"IN'>D>*]pK4><u=41G<%3Y@ZT.bM.:H/<HCm!7t$a7fAS@K3h$lkF;3k!mg]>6&N_1\M9%DfK"?=r7b*&@c_)np2OJ#NXWVp-I'!3!s]5-Ik?9lh)38mm9^c%Hc8+kNi=GdI\7FBcsk$'"t-Sk5q;_1WCr1Fk1#'_ANbkW1l]K@2J8XPaBf!>dM["?E[eU9E/L&E:=Km<C,T<*\@o:AJ7Q><+E:t-%;a=\A_F]-T0L>r9/55K*C6K%W\f*+hW&Zk6jsRHJn/i6.aB+KX!h,#T7R`ElZ9W2J6?/bFd?)7]XQKo/@n-V5/nd]\8iNDHT[B'p%9NJ?4Q#%FAOO/q4U;gFN^BmN]5ce14([ZpM!*$td\2/cdIk-,Z7mA42@UbjM-9qi2,$R()W"G/KfGBkGOni)?#gf#LN(aGada2aF%Y%QlR-sK7Nn5VM8McRr)T^4jP,d=>!mdA+bjdWA3fA_U6T"5=fV*ZC8j#Z5rZ%OP\b[)g(?B>d%981Y7,pd7:6UJ/,J831A5rB1J%qnJp;$.b[>+]p$%X0,aG@/Sj$am;d(9rQV$%\1Hh3*I=J=p-%od%sWBI#ZL"VLGo)=CqqkE.Gu!*Jcg^((ps8DdNkh'TC7D,$B*i%(DZE>j%^?t*sn#h>:Bqh<a[omj(,W1,&PtrAYP^$a@+[1+aYZ#KF=n.YO/r)R<M9^HmNa1((#NoRI>n?Y33\,1#)og6QqS&0KVae%;+cI)4!FF3hbGudh&IE("QYoN_\M.?4bppKSXlUB">9kRLW1Cd6tVu+6a"d]Nc?qG3Uf)(H=$tb(IO&t4B3>\*mGriic*/Vlo#*$%M=$0)?OJj<Udj>N[7okiMWeV'6]6l8/3;3,0Ui'$V!oC<V;i$f?Dkr@B$[gs<s-YBlOae6LG$sg7b7Rg288:3Y47KhD[t.f?u?JP%p(VAjk;rt%MVKXd_phN<?99N[)nEqo5\?B'S7CrU@_blB==op#itfl-6,t<nhW<L1#%QMBCj_jcj<Ir,ll!-0TeAoRA:r+)6tX8;%H>3n_VlCVQa&2kq7?5?lp6=8D]cepnpApJE0D0l<]3Z2sSX@d(eje])SrouO:b_cXNEsBgp$9'W`2N4d#ubB`j/4:+6$/,HJX=__%)S=clXt(dh3p</=6eYICPD'1ZD@**WP]`;Q'<nH<GTAg`/V'O#`"5"^JJAnYV9F;>9R/0.@M7Bh19YQQU<XmH"4i*eAceJ9BlU+C%4=aL%R)l+U(-a=tQ)`Imnm:<\cmE.Z`4QOAjb'o^A1+Vb)8Ml4X$rmbLuMqZfuZj<L0<Z:4L.8s5=+rYBV@k@nq%Q]0e*e&Y!D0k%IK[GkMQ]@%N?L(U98T-o?G_iY*S?(3Rgko&mZ;'++p4nN).IhS8$W65lF=W/+sJK@,$j]UOp4e0ABDMYkD72!&lfu^16F<R9<3?p%.2[h0fUugAQ(eB86$uLgR#m.><*E/=m7%M:!LdTX$-^gIc3H'JJmim=2^!EpIXuaI[dikl(?Frgnl%KN&/A;t.*ip2LA&K=WQ5Io%7(#;1JBg$ZFjQg3Q:45c5ZQk\Cka!M'u2;12-bjdWh/$c'ferc_dUG_j@:%_1>jYQ%Q"SEZ9f_-Fa8hKaJq!G_$sn:2>K!O/;aU;%%B^_gQ4$C<4!JLJeM?#9(A@o_$S.0)Or[#F"gnhmKa2u7kRB>'-,*h0VI[i*YdcY(#6oj8!?b^`5Ze/qSYSVT*3;Q'dNNGBBYb7G%#`F:cUX"$"Mo]MIDA*%XD<'^b@<"4O>JER.N.GKeefek2mq_\:*U\EY88CU(\)^#+"e^^_N;/9qU85<7f19uG7XU1qeS+.RY\8ns%U+:,^0feLF'nn<-;ajd;;bK_UFG4lF.I,7pJ=%@!`)cpSFN%VFCJ6u9o)`:HC6Vt.i%&K9ZZSogNIm8p_Ld4aH=_l:n5AJX>@K.l%Kr)s&@r\Xl[@kE>(^$7=r&Tc?YX>2FJ?`eA@Jb,$Yu#5(AWrk+=I^2aWTZ#O>7bZ)D5,shD9Q7YCm(k"99_##iB!2tm=c!^P@=I"%^fe#U-DGH"c=0q?nqaWo1j7a7/=MPCj(F.RV38oSZtSW^H&8kAB!*oI/BfA.)^ruu+Yl#/E&JT17NKc@O4;%oE#*tg,%?,0.98f&%LU2]0;$NOb\,iPn;o;b^qI,c224RApoeR9'L9kD=(Fn>$/=Mi6#n*8W"bKi1i%3S->V&O<7<!&U!95Vj(YcG]SAf>r@*K<se#XnS%%VO87NiAL-phCa*f/O/LAX;_?%VKeENi?9=ZamcRiG?MUKt>PKcK:O":C!-/kc@#j"Wb`pV97>8P_FZH`7[29Kt"oeV?P,b<r<SC%1M0"5,L5<BLh!JGj(n`N0"<4Q6CYV)<#a-FR:El7SAj<eipm^pZY,'B!G=3IRAfWbB6.7N.lJX+KhRRo#S'0g._<L?b?BW(-j@U$%fS\/EXBf4L=ic\VXXKCWG(HbT1GLMd[?*37&m<U5?/,Ka0r]_0a97BJ94Se,bu:uA3MG`;)F&(9;R]VND@gpKpS7;lJr%F-#ls_g%`HrtOQ;1')"3UghBsf8'qB9R1WGD'62p[6M:,#Vb#Sd@YG)_lW;_h1YY;4S_j0T-,(9m')M&acILc</o-CYCi!S-eWj.7bogGl`I%m/jB>g>ZXiL%QlEC5oSYcUBu#(>WP3>GA>mF\0o^<+F\ZNB0=hVh,<qGntR%GY_SAL"2"`E#&g\`g6n_7'N(\.4tb[=Ml*o:36p"%aQ.b0ciNHUiYm1r'.UUi$$W"D&#Lq!,90@(K5`D(H<6,LE#V1q_q`Kuonu)]%Du/@q.D\Ef?lsm%^"81s.P=_&X#I3<.O>4K2g:_%(<RPsood:EBWN]R!/)uIrdG3KO)7Se-<P8EPUXTkVrMEJ;>fu.S3p/l-"?gqYlSV:MG*p+g^6ICU?[9+TI%/aI2nT_eA[n.proh7%>/I@f+b=k1+$HX[`&Nmf/B4X3ek6^fDDCn<F5U*_!C,'(W<mX-gAFf%eq3nSGFt$0GPHkUCsM_JpZ&3gTiTqY3o_?<-XHqC;uQ7P%LmB70$nfLuC))d**&)#]Fa#D+D.8Sm0JJV>0TK4DU[K@M%9nIq@F-"A(:.jg,P(O;H5J*aOf)'DYN*(r?gH4c?A)[+L?#RjSQug,%`EdPP7%O%>*V;<K1@S;6G43Ar]^CRG3L`/(";;9$C_!"o7U-US:/6=ib:9S3=hZDb:0TQ]Ctu#DMa2H;!E#aK;<VD)BH#rX*%XBG%m$9='I6SK?Lt2So/IT^eSFs^d\0DKmfTI:7@lWYM6h?h'icbdc&5TYbjEgHiL*"'3[kk<^(CujP/BGpaQ$VjRmr,_]-'#dm,M8a$%chU2(UlmOl<ls*U*=kt$AmUUO>djd+H!:gN;i+9e)3JWfcn[g5b8[r4`9<V4\0r7h*0:3#;@ju<L1sf.Rq0fGLETG"6jOVpYQC[f%AT:)"pTcJg_TXDHOG4BZo4Y"U[DHJa-Z#NS&O%ts=Z5.1m8[pP)8JP)i%7+9K;>Ab'(WSL:nK?sWuG(dd,'O=2]I&t9`UO!D*KD[%6mAMWp)gJOba3ip':2.[>Mc0CX3mmISN%R&fhdM'@",?lZu"b#6\isV<m(OF.&9m';r+lZg11]Q$tmfEZA!.:!1l3'$NlqCV$`t=%?'0D"Vs6SfZButUY+F/&(9EntK.(,YpVehaSJ1Hd5bjb0_IhXok-EOD_TeU!j@6qN<@2CaDHr:JM23,55"0ArX[9jTP=[G>7)d54%Ed?fQ."RS8lHj.eS0D"[>t9o\[4"c:0Uo1J9Hprn5:3U%?%@L5gY1eVb<#<^E4fc#_ds;Q[5mleY_&_8Bu8^U0J]W+%u?]H&O[JA%E%VK537>tuI>q)?g>YYeZk3so2/eBeK$9X!&!3+sbK$"'#+qWq-mu5'TiJ`JLC[M=JIr#:oNZ7lc#K0kh=V\:Ukrk#K_f1LCmih%%cHUEBH=;2D%RJWVQ6fe2,GIdXR#(l39Xu]2dM5oN.E4=WK=C3jVX:d4QMHrfD1OgQ8UJM=I419J0GrWuL\@a@Ro&79m1R7hO9'cf%`A=]P2[=AjEXo(8+>/K6+aP"tU7a0\RFW\<4k9f,K*V[4<@^a9jOpRTpnVD>'iQC9TQ=8/Q7O\2oHI_*0:.qif/CR_Rr5)Q$jiI1%8rqA)(>`;@it/OI(3O0llkZ3'dVa3OC^I]Ca&[U.#L>L5rQ2_DbAlb0EPahG$mP)"9@aSs1Q7>e<qf7,Fo3AFO9BZM;ujk)(Xj+G%fgmL2Q6/L[&V!=[-qR.<7q%^FJc)*gBEj3Z1QJ`];,!3[7urCBSM)WY-EDt:J`<2NqD$^1[/V>X+;9Wa#HhfCN]*UGD-bF"cN5:r%fI_[%Vq'4P(m1u.-3mGp:p,k=eEJSTWjMn\.2'\K'b-kVa`r!"\Ja'R8`5Q!NIOGlOX%PV!XER]Z+p<B$Mf6HUtMGh7`1,s?.KQ0%LCOtdUcN:'NO9?%#ANr!Ure'd4[6jmFb-6&(0Q0)g+](2MR**`9TMQ71?WqZNCqWZW@Z1AFn=,/OZMKLFgXNmaB?T9_[Y]UG*h3b%?@7]slFsrrp5Rn+dCMA[E"R!Wn^\.\FPr<<7VM!")(%6Okuj/I2!#:7jG>(*_mj)O1Z\;g#V"ZI]VgH'=tu9e>*h`%9h6jN`/iQW%P)[7V>m@7V1'1Km"QUVsS/8L_,qD.ae7pTT=kk7];0R1nk>jt4@kK8E,OkgjUES!`*`&3=MRGgH*u8Ts&Ap2uE[.#@&g.u*L.+fZ%a&^&ulSSSAO]u'5X]+6c$CjT)f+*a]a[sl^FE9X@Jtb\,baF7<npXI@riE8<81go:3opZK':qs1XVOuA;<HP8J>$(Sa1#aBi+chP%F_l*k-'3Nj"O]c*p`6=&MFeY=NgI?SKJn<<6?l0cVZanJNIX?T5QlP[$rPM=3\*7$IY_fNel7AXSp)<q"%:/[\A@hb8BE&1Ar)d+%elle>NPbrGA7YaQoWmD\J>CSMpORu<@<P#YIdrf]\+WF<;@UcT4,1Qa&b@\*Q!-!Zh$mEMh?Et6:UDK_>6C@36LNZ_859iqB@M7T%kpqW)hos7X1F(62Dr&d@N>@]4bfn_4+%I*LP;+bFb@6JY,KhVPes?h7\X%+j:t[jMHjG9p?:#bcfoX25da(@o#0<7G)ek"oeJojp%X\G29p5Su$nj\h^\3g_Z7"jKmJJAUees6b?KA.\T>e"9?[EkL$6LMn!mXetJ/V[(;.",6Y6:ZY;i/dVA'Vh#b.+A`N'0KpL+%HeL%<MH(9`],J!1<\N)!6#<cNN6`ei3G&=XS/WskR4Zs'Z1cVg$+15)@jo`78:Fb.hKTTWYjriTX/6u70-%]4!4NeGZFfZU3rs#@!Tco%pU#K/b$<jR:cl+_caGE4-[UDU\%'0Y?7"[@FO2XW(r>QtC%DYpg"<,(N3_]KD$`#$-8pkW`K1Tk6B:EbE.0Su?/0Z:?eEB+EA&nX%j-uQi6E6-H[IE_('?il9-Z+H@YT95HVXTU_PeG.__=:qSbT\dc75qsEfe&RRMdDYebH?,%'#h3oc8k$,oD"@[VD(lBd6C>0>&8B^%BAsY'49meKp>dI_N7--eM)'b;0u?%'3/ELPbub95!+@#@c$%o%e*kS8#JWN^3rV5uFII:,(ts^00&$m((uFU!Rs5a__W:\UUc/s*%QA`_91:\2Si9!Rbmp#HbX+%cXH/<4RS3JrP)Bq4pE7$1HR8Fr7\mDqk6HIFIc>L(?ZgR#BQDQ%(,\tInBf@?_;='VfO&.[5Vc;%D%G[SXBfqG+3>:j43qKuSZCQ6"=]mUY,n_:'[i`=P[BSBJ10d*/F_`jqN86PQ(Wui8"B&B\)r(AU`%%kUWq@`A$;.mlQYt>_KeXJXt%CRfq">+_u_B2[W(NpH'lXr'c_g<TA7)m>TV\_]felg;Z6]h(d2Kp=bQ^e.:)'?C8NK8Nl;o?:'3f.2fjhB%:7^XUtD%s(qiB]_hF%_9F"1[=pE+eNOd!oklN\F-tXKT]3iK"9s^YBV?4j0389N4D<oN=ZoYt4GN2>NS,#$B+f*fkfsoX.'1L!_MZ988J&NZ$r!g9\2!!e%R`W5@9#qsm>3\/l$3`K8AM9(Q6)(L/),NEq""PPe4M$1LQLX!h\1;$7!dQtn)2cV:\6IV:TT>#Q%!u!3^'[&]CF&.O0-o,@p,LF"%'?N'!93O38G0ZQ;:R\)[dEcPH-c\1JG##oA'%0AfOhbj`#RiM'[V2)RC@n!.%E@I&T$f/=8JS3h1'l.aC8Pkp(h-[e1XrtHmpEna%+H="WalG&;J-+?0o=[oW5N:>>c@37clM-<-Im[nFZb7V@(&W12_OZNZ-^Db=$4Ulj.4><C8:Ndce.#=OED;!1-a>dt];j$Y<48Uj%+N%E!$ZX[;DN;eb/Xk'2Md=3.p_ltCZ`*s5]MFP/4CVP-SXho`X]gN/F,s=F.bU.Re14Dp*Er`<\ONm`^.QVD<,2XD/L+E"#=ThY%Op$An6bRf@Tk>mF5\NARrHcs\Xe8n"m];6%'d>K!&NiNE@Zo7Rg;^)f7O9tl0QNAJR)]$EUY<s\N/G!28$54HD=Bg;@eKK]o'T=j%#5Q6bb02_=^c7aPWFEu"LBcX2BD](o!p<$gF(DbWi66"Sc0QbeSAU[fgtK]`D2d;hm`fmY29]^2A8Cbe'7JZ3)E3oi=F1gP,C*\Q%X<r*^+.l.S9;@`4V3Vb:1q76,KX)=bFDjK)Q`Sq6>N!e0Zdm]!h"pB:nS-/c,e&\UGs4<(;=b[0<jHOE"a?q67cc=F@W&TPJFZ/X%&D5V6Fp3%u_`)tW,-b8aAJ5,OS2?4iGKP;mUikfrS=)<gk#0ZE(_5)C5t5):\Zl6W&-Et:QfFfV]^Uc1&1g?MN^1Y!'3mg*f=4_a%;YsV0+m0KfF:H*Qq!8/75uTp+YTtHqNCdjoZEZA*bmC:5*<U:)lH8+2'dI-SRV-F:dNiK0H+(-`1XHl;?*GZWJ<V3D.j4FEJMl6/%TQNL_6IdH^COlIm9hV^DLE^^2:,9H.fn],JcG#VXHU?3tQtTQ44hJJ*=9Du*c.]*]SqWoWX=H@K%\$r\Om=PT+<dacT\s)2k&JDR%eS#`9oGCfJCIj$1"ehH7fsVZl])p3HAo/AQbNUl&pj*+pgkH*A3juB_mf<+?X^hDmYJKL;-?6DFM/<fJ_/A4@N\g!&^sYBLcs1Xf%iFWBX6BfMDBrchR)&,!$BZIET9piXGH?s7t:p%,+qZc]>g/b+`OM4f!Au-G9^oF`j3*I#6\fB<+m&%e%X7A5-Y3%n6Aeu2V>S_SB%24S9sRD=15A(dO60HDK`^`I7rY[TS`T#`?WqfRN,7jVkdh&+7OZn1MhAQuV^,ran*ja(;N.5&c;6V1#\HI)c+Z1[BWe'f1AUUW@B%jK!M_:p1pF.@mXkW&gC"=tn=L*aEE]YOnK_b/iXA&*+'/JOi,nbGHaG287E<HQHXZ\oi/n#1"sKRRKk0;[;["=9i^`%l`?Jo^-lJ%Zk\m'=n5G.R5ljD/g:OI#^+o?7uK;B7S_gk6HAcRb&--(&*kR9XZQVk0>M7NR$C@,Tn&RCFbR2*P_2p<4,ZQbX*5#D$)7!EqY(Ib%V\-="G]%cUC.3"Sjn7+cP376N:1."'&A[[!+-_#-aFM\.8UM4%nVff1.T^$5lH:+>[iB0@9_+K$R+:)kC[A-*/,NX1i%P3q\;jUj%Zl@UD"`uP.3/P[8=,j,#ZeBq]!QT'!o7jT5rS>M/+P.3(=Zo71ajq'Am)&)ldu>25Zcuo=@MhhtFED'30NLlQf<l4VJGk95?lcMT%dPbPPI3<AH7gtm0hIGAt@AedZZk;VSrJ5$,pu4j>3atad/4P#R.&Uq4@]R/=EG[3G,Hj(&=[roT@*<:3!MpaVrCb7*)M:nu+lu-q%oSuqI;9IDiHRdWu)b%]$WjsZoB.A:,oRbA3i'rnb^.-NO2!U'G#E)e`H;r7>cASuF(*!8jJ;qdHg6G>r2uGFf=m.it!,UF#OiuJ_%B;@6+6#7ECd.>umXLstV;`J*dEUbUMUC3*CA&'5jI9E>JkFETDV@UG-3O7^<+3Vsr\NED<"0b?[*B<d:Y#[sX-;3Icc9B<T'JEu5%E`]^cRP^?W]CBnQgWJgc_?$_n-&-X[Q)[j\7->Taru34`"OGJT;Jim^S,>>J9D?(cRoE,PTl)$'lZRUgdg&M!do`mo#[oB'B,JIV%%DJrN"HnCChgup%)EU9^?O0WmW/^iYWu=u.$c-g@E>Vg]L8[aPk$S>?Hl]&8iW^Eir)nEN8-pUc0X8HsiClT$9c',jKjaH=m)r"?%BTKPaYf#rB/?=>:($)=ZL0>.)>-+tsa-J@M@0B2-6sI3Y;X=/?.SgsK16uba?DSYeYV$LjkIHQF"*thtc>D&]Ob9qo$VE@0KdpQ6%RMN<Zcb9Q'XW>5EQY?k]]2f7kWa/-YP6Vj@P$\n2C0b]CUBbtD-=Hu"lr5KD[Zl0qWbMsD#Bn=o#?Sp4-r$<Uc!AiMig-GrltMbQ%&\>9.ZT7YOS-DTq>0$.0APe)5IaP/00uCNlDi:b3l$I@aAa!D`PsOWu-a8IuZjq^?K-3U--2ag$>U-J1B0CM-;+PJ&R1E_p_Q+=\%WN#R#!>-WW;nO:$K[,Tqp*0G>3PB-PF^NMHTfSpnm)$tn*k2`rNH)M+3VMG5'/=ZuAY3^9`D\=njEdUEY2]-$%F(u8C!9OU-+W"=%LIC[p1M/!A7OrGX?Q]pr8I`/,/(]K!l%p6@BOVc5V!:^_C6""#s'BZGA@4&?"P]6KF"tFcH6NG4>Z5Kh6spl\dCT]*N;,Mr3,8kN%>^]V"6_EBYe\j@=>(+;.KZlljL.S77J"bhibStuU.<#fO`aj4=V'YZ:20ne`KJUVU2!nfS>4)M5P%5*%`sSW>RD?sA)+tGH3Qcf-%BJC>Z-$!>_eO=bti&kQb\6/@+'cSu8:fR<FH?Dk``%0]&`J>oS?NUdW'I9k2HS@UdVAq-J<odnsLVY7X`ebR]3RAF`orUshVV;ms%1iqZW(DM[9pi%8G<\!cq+X:$Y^o=]?!Xp$UPqB9!Ar?j\FL,FD4a$h0'bQY$V^Pi9;^MGP#.dp%aX%BB!aSb]#K8%\oB8oALYRt)%_[?h'8LDX?O4gK32C7s)LMG*(L&TiC>Og_)`6uq2?_t]L;?lF3%L<Y1[Ll=hrh>5Q&a5s\ntH$q0'MOf8.mWA:+HU?OWN[NcJ-2C%6BOj8GiKV$<%c1:o"qVWL),RL@]=$?a5Qi\75c%V5S+cb+=A='3#W;Oi`VL#cuT>'A<Uh"7SuUVXa]r/-]VA\V_1WB2HOt_=<MQc%7<S0/B/C00!2XpTPG%`.%@^E5[FADe'.RCA@mM?]Sj4$`kaRf#k]!66j)ou&7<Y.d8^=:!(m%-46%eD>/;+gF`T@#_\Y^!DF+[PW%;(YdWe?OiEX2V(nMM)!EI(3(DZ4s<aY@eOu<+Kg(,2pE#f\+7m&1D8hHUa,GA%G56UI^d+8M]g97ZfBa\?,Ug;'aq!QHd:h-k_\R%d:+T#8=1;o'X!Hn,c&n3T1^"iU'-`R;1qg)BF38_MupgB7905P;/c]ip5B&],_M&7!ZS2(<_3p!JnP>1-u]/39!;kA3*7GnoSeBW%F\W%68=1TQ"0m/AJRJ%%mMQ00-+Ks1$H)u8^?QS)dX[gY;(uVXO\rn:@;(s40T)*,NgAoH7D]1l.B?Ad1Q%Eu*luhe$3Z\f]7a$,%F<V!9A/%i`lSg&`!"#`j<^[$?6'I[[ZViLS;)(^50iPTJ*uMt5P]h80@Q)d3h_PT>Q_[-D$):$;.lhC(!\h0jP`AV:ifu#O7Y1Qd%H=BBU'F:KjfLA>],=%E2cR9@'q%bKU+CO<RPu/Z++sIu$5bK[G`[EMja%<_LN_uTM`OLrn'[N]Boo&sm+>?+L)$PU<i4NP61pVEi%P;8$KEc0;/UHl%C(H+`;4%7iB-kHiXXI.!U#\06Q2+GE\V,Es?$:I7TYW\aPAGgFm?kc1\07$*Mnlutta!_R3V]+2U,4EjNH#tp%%m>;k(WB]QN9T%s:%^n3HNe0?:Q8?f>4]j2EhQH`ZNZU=B>LGap39#D?)H>#+lE/f;WFFPH$@]d`&=p(<fo.`44<m68^##p^iBr0^%]PR/=%?B7qQ`iO[VFm/VWF3k15U:a.7!_U<^cJ]<B87g.7Zc\=/I#sI?id:9&Z_n-QAp$.\uW4>V$1&=!dq<UCBSqW1<WfMa+an^%lYW3Vb4_T,CL%CoX6gM2OVA;3MU?+B^bF9m"kZhg$e6"a/aR67=c;i_EZL5fk$/@\?.iJBO'Sjs-nWdQ(>tYs=:[+Q?Igk\G7>3.%f@r@6apt2>[B>;Ieb4ej_I-%K-&IgIX;o&39aD0AjC(@g3S)rhR!]%G:$o*bg'bJqHXNEB%IhUD>S4St=^;)W_n+sXGG6VB]%bcH%)Oaa^,:5ba/6B;W400F<1/5j[e8_3X-j#kc6(ND]XE>bc.iU>WWNW]7f#ceLh^lPXZ29m<-."TP>:t=O]!AHM?*10$H*oeEbKRcJ%k,2tW:\Rd6@NLoj[r=(_dO8aDG_u4#S,qsIf;fhYp/C?op8mXp8l$%:'RW&qLDODl)pX:`%W(rgP@^f(_<mKunnP!+RjHY])VNZj%YF6]7eCBge4WT)%Wd6grWWso@[/q()EMYaNc0C8?4:!VIME#At:AH<RTI'cc6o"`oHAirB!KukG_&>CK9AA+!@7>812q-9/BIU?(%Q#+i3Ut8Z)7kG*h*ZN%;A3t5C+Du#G`uEAtDV]!U_hGP!XIfGEBkS6[#2I!#36/=F7QRPqEge?WX_oah=*8-)EM\r>4;-Y.(Ma)U%!D#SV/XT3!7oisY9&8(h!fNdS`f#.4^]5\$3<o%lG2VFcj4aa9c#7"4*64,@[G:A.M9JrEV?=PqKb_5e0.H5:*_6*293CNjCdQ<;%ZJ'c4eREhUDkp:US_!l_b7e,H"5CE_NtDdXaFZ/V92djd6%O.l+Ok6[/N\$@>NTcS?Y@`bo&jcr\jbPXpHZ2s!sa$%J__TY2(.>J%"k`GB!*f[JKhcKH6_X?Z"Rb8b+PU-AVCh\!$>Rg(PG4tX$p^`I/KJr9Lt#Ec<t?Cqf4DmZ:Uq0]A/ki^d*@rZ#rPG=9romYKN>Z%%Kg*3(-DuKs(2CX>j1I>ZYFb;:a[f9_QJBo53]ZA`_1U=8e[/t(7@gGK=]#/DRo8dTFZi./E@OZaRT.V^(>fu5EWqd#4cO#i4[YsE%'hrX9?Id=q`5=KlZ;/Q^oR_;,JhjteF<Y'[%Yc31XQP?s.#$9WRT"=+>/C+da!pfR<O,n"a,X>?<o%]3oas&sG>/HYq;b0!!]>IL%!ua(bkeJS`XUq2IbLGX`Yg3h=9C+SEe."'<o[jO'96S0u@`KHg;\S=LoI+dh4teNK!bI`erM,.4o*ZC/0lC.XisNf-AF(h#<cMdL%3?4riT@a0\,uGNHDDE->]Qr.Y2YSXs.kmL])c96<'#AX&H*97*[[#SL],%&B-cSSjPD[5Ej$pRue:TsT<HY?P-p)'YCuFg>m+OJF%4ckVFqKrCG?WKkc*J^'AI6Fr=p)FfLpDi;9J?E_8[)?(IN'Io36-i*d^qOYI\'DEncjaFA]H'$<%35%7;@Kd>rn&gKU^*(D:ihD#%?QE(#^]Lld97i;4jMI-)n9M9L!@TBh'j/M1%<d/&b_U#1<AbSs=-K]3bu^CaZu[G$6XgkTWTXCrP_NGP9$$#Tr"@eWm2uWDX<;'Q%l^4H]q@'mJs%Wr)rrho<G$G>&]G7Fo"!h*oi_VIN$0T.\aT>5S'3C:Zpq3tF2pQr]<PKXO,gtVH0s*nk97^DNW1mXs+9=e%-/8NE%h"U-b$dXA!NT[C<-l\!+Nj_Vd`jZ=phi9MXAI"MnY.*`2%h"ITQ'r$\3KqSuiX(;S3lP]*)C&i$`=<M&B0?GMkb,#X4s-0g<7Tmu%WrFFqroo8sIp+<#M&$'X'JX9R!>.%M/Eb9=A33?:[Y#%Y-ef-&U%]]$hJ7GAiYk+IIURQLbs9fHN6(+,KZ!in1i:r@""1@W2q%kT%-AgnKfcHY3!?aY*VVSKD+mMXmXP.pT\]l+qhLLtE4.+=a&7U8E$kLtj8PIhH%s5gd;q6W8!ueB^*mu#DAZIflAP/0b$:lP(/kcf.%>><%B9b2>&U![I`3TEte$e*!q<_O%bgZ?u]9RHoKZd&,=dT@8b5rMZ[_YHk1TT%jXo"\(IQ.K<V.UUbTIM@<rBpO[crU2&/2jk_G%lm9Z7h!4h@XMtJGRjPDa]go*33j*4F&E)"3d$8I&#1GuN$H+P"<D^g6TZSf?iYQ'$d"<EgOb%43F<\us>Z(`86>l%>X,]E9?)+3t%2)9o:c2(8&A^U>ceUog3opMB)TZPr%Bmm4e[gn=^]PCbW!/F_@QX+FL3#^H5fr/_8d$$*D..D[(72Y6i%iVl0p.7"gnC]U<7+MVP%N-*>BTO:3bY#a$SB'jKso/r2+[F!,.78.mPYuX-PLSXh<,rYXQ'gi)OW)q_!p#_Z5\QU[rd%)-83)58f3OTi+og:mW6MC"J70ui_%Z,iV:AAY:`.BBd")&m0fB?9g=bS#!G?8X5a!EIU6AB8%ZFf60mV'@Qk"D_0VT)0(!a&#+>=\Pj+_J6B*D3cG_-FuEll*WGO(AjGM%\R#r=p*OKnN2APRL/iDMQA&J&3NMFTd2bgn>YXhuT]sm72(0L-+_+>\[8XmmWbmM^;?Np.KMHk3bPE]gcQ%PR5d<UQ:n67Pl#6am%J:L)0FDC5?LX-HdTh+H#fn$g`^EuTSl">"+JmiD@0M+a^"*&-soq2<O_45NNX9Q+fF3\J4+`#U^d8GWT=P!PV+eX6nnMkkK14P[D%jrFira[A#qV\Si8odD`B*Q+rp&OYp#"#)dbP*@i.Q)HdOFc-F=ecb'4/$O5\!agdn+e`k'fr.2XAAmtL"f,,:>(M8gB<<8fgT?)d%LhOc+*G@]AM:Xeo@Ya1`-k`L%^lYs.:(B#eSLZBP5R`$kh4J3`S5rg[XSC@(?l^&D''dXeG'N%JM0CQ>!i9-:7G"is/L]oUdHkMS%K(r-NK#DLVa9K/\Jinemp2EAkfefMsVNDtLOHSX=,gLqJ<R3Ea.Prt$8.E"QLbU5n)e1eANd$&`N%pf0a'$WY$OQ5[k_+69TTcen%3ZDJ+AAb(Xi#`u5(P\EH+(5i2j,"R1TsSYMMYXgZo:3fG48P(%]0Rm&.JPIhDM-@XetB2.a'"%@6Vc6nD=GD$jA&[CQi!8]!a]_t%-8Y"V<`ulg?W@OVPG*/HYth.0Ib-Kg"jkW\4o0Q@(L2'WEkQ7I8DWYe='=#]]@!^Y@';t>o^"t/!X#ps-l&[U)Z&7T4d^hE)7\O9%a+eHtal<Hgp?tEgFT"tLl7]kEVqC*skgsl-)`o900'k=A!HI]]L*iR=FipcJs+Lo##P,O+Se5!d90+af;0^>1gUgZl(#F;h$u>/G%W$S8jCBfQTH6-G^*28`"oX?UsO?pRlM4=ie8'dF.gY4fp"@]K=gVq.NlNO6.[J$>/HdEHr51fGB2/%a<`bGUE+&=EAHi,kjJXGX8%W1$KM8`\A7T_CIHqGZjRUhXuVc;eLQ:/-e?cP*a;c'3j1<3dIW<8Bm&mL$2id&LAblV>7I.r``*FNV"XfT=D23DK4(i849'-V'M?%@ZbL6/9PhK1cHM5H17"*g8a!9`;A8n"\G!Xb#(:fA[!sG,/pL^A],(kOBeDTT'Z]iet_hEf1r)Dp$n'e[P^jo?%@99X&D6k_1T&@%NRJd7TEBVR<jX.igqT!F<%5mO5mh@:YT!5;TlDq*CE#CW6gM>P&W40bH_Dk<`--c0eA-_/dkt_Vr!9!p4erItVV@8iZ:4u<[n+W9%P)Bh&;3h6_6jS@?plSfiEZFeX)+[u7n`Lo1UeEmg5qiNd&_EdWTU@\@XSK0_`4(bCkJj88JYt%d2;Lo:#2.LrH<jZ9'/M4B9F'q;%d/^=0O`56Xp:O1)i*tu%g&eR=NFa&iC2>f;pthSgB<)faZ"shW_<;,3j(C>X.J71$0<;2i8L)jY[0NC9!36*`>PNCUFh.eL6I>d6%!@g$r\VXM#k!gE21>KpT9+e>VgbbS+=8G$;9eadKaLMs.;iS'H`6He#q/i?F"*\3jXpI`:M:]To\RVd'8lq>,\XAoA1"9?:B;\$X%n!69Rjh$6$K`2#)bsGW[5nDNa_+jTqr-,K+Jgr5*2"h8NDM^]Knq6-PiT!X,)Lth_lC`3Z8Qoh,dkFiGn$!3M?*64\VuC7!@FOP!%*Qd\SB%KGYM+,NdCJul%2=Magkc'M6814,pd&iulR:e(^!?PdC0bA=DgdIiY^[;Yef'N$P!UaNjAEk5[2L(=/neoNs]Wo<Ndp-D9%HRYnELX=D%3:Ps$62m(n?fYh"+,ZV7gT9(9"bPpaTNCJ6@LJ!f\c90FEH>?c(;gL9XM#YpdT:n['Iu:VG#%.-"unaYEcpGr;,79T%Sfq0,Yap^4jj8`a:N/el*0"V@?+-R^!>#%7B+;aP&qGT>DL1geY^0tMY*j<\=bU#(SNu2PkGP5oF]XS@Q$<qsL":Y>?0$\!I!ETR%Zg8)DqA,jc=7EfcY*'/r5]i'rJSFPR9G0DDfPHj]A:d/;l].OY=f*6cYo;h-B.^/;O@NE7q]9E#hEII/TlIs%X0TZf8e.#2ZrEeq%<d1VGQtGr_+k,$p(K1K%:UaJ5&F\t.(XFpLBXhqdXRTa=K?dlZ&h,aopC*@+Y)(?1F(Ut[Xi\i<]7GHE;0@`BCW&Gtj$0]%e[.Hj%S3JCaaA:0TdB=q]&]V:),YBE7Kj\j(>a\>o,;U#pTGN_Df99S#qPVHp;8)03k]VI0IW`-';;_3bf#<Ed)@,7Df-P:m;\NWuF+<g=%b\S-$"FRl_9B=R0l40ooS,i_<e!\$%V'JVNZje'_M/,snjN`;Q=(8\WXQaE,^r%\WfUW''/(*<A#&lF;3m^8A6<GFaK(8AdMaC3.%mIF6+c?>&u=j1Y,mLM)7!\tm?[LY[f'f$:QCJqAX@G&8uK'=Rga\9l$1"q0_U$5*sftmqW]1Oo]X4<+"<1M6C`V*>E!?osP%<W?I%$p4b!eAWQ3]&_T!g&Ro$[[n^/qbHKjZ408kDeCi61"Z[Drg1ANrjkleq9Na^V>`"rL6/1n/G!a6N)ESLDLm.oVUh[or2Y-W3_<J!%&3CuSP@r1,H7RoQc^1+I!@@k2q[h#"Y(?Xdb41'Rc=pBB<Qh(8F1"BfTXbsP(cX&0\cG<]^$5BG&rr6BA22*H9$9&AfS1;\3V.6R%GI:+>dDYdQVq2;J2T^<2kb]gY%9F"cQ3DG"+NpEH?R[!O$83VXq&3QI3:]qeQjleaHO/\2m8E@N+>2qr0@Z1+$;4NEOsEVJiB.5=%6BGb(V&]^_>]3]<5u'9b(tr&^RYq8.V2Fh>\]u(+Mj=f@!fo(c29LpcDBp42X4?s<o/F'1)`D!X$<XU;dgcdjWIiM;p]qS7%HZ2O%$7V"(8#\aB&6$m`TN\+VFVVE"JIJn='fdtUDYEbqFp^;TYd(Ll4@NdN/^2=n&87VZAr<MF\lO(sSdWg-GG-$#8.m?S-hb-K^f`RR%!AK>%PN<3U%.mDf+9c6lS7Uue3YjbJf1)%*HgJ<EdPB&@=:_JUPPM>4-/2nemG_m^bJ"o.Fic4o^n=8qCDMk/]uQ!E.Hm?]0%Sba%eSOa*.36AY9c6W-Pm*Ni8Ggbk'4MC"j9PgoomA`Qe88r]E<4,)7L99G3jhk?h-3#D*5PL]G5NmOEtLstij9rH;6^77nn:$"j&%:f%ds,T`A3KgkBqhqeAOm8:CS2>p2VY('S,4FjE-J92RZbZIeC/mLT&6GP-8cJ\fCS2gTA<Y8AoBNk5Z.[Ab>LM$,?YHY=L=`npc7PI%Y%MpIlMYV#^Znp%N6#L#j$T:tY>44T]7HHqAu!poE['["&`ot`86MUbLVp4*E3,:(;qOUkWKjbmVh[fg_ne&q7#dG]=E=K=H1$;?%PdCc4`k<9<I7*%!4`<_Ne^lC_L\-,6CM&FVpG-pu'PoYW,oV;S`\dhfr.(PC;!0#PjUo`ZlSOPGB.8mYp!.Bj^(mjeaWnpTcN&!,%')kXl@0&D(-S0/?*;+<>+rjLUAO1!kPFj.]B)R$i(\0XOI=VlO0hk-4=;M0O-4CX&JfH6L?k[W(-A2`-Vh6P#Q1s8*?:Z!1?c=)i%>E,r81J/3,bXjV.VeY(3Gc%RA#*8J"buB74;@cqU8[6mN5Ouhc$hg+tHI.kXqoe1=-#jeNQt5l*dT"E(RMR8`JmlAsA$A=H&fbaM%l6ZX*A5&'H)ZAuh`:Bd+WfHdJdlUq`EeFe=2>mL@]kt)][rE_l$hth3QW-OPKbE6nS^d8IU7I]Gm_gS*1QtK^2+:eW>E!i!'hQMW%s8(F)]iG74S9&C:-=p@]fp9T(:2^+O)ea>s?JRd'.8r4a\rrXZic^UqXqiYQAS(m<\YkE@mkCG:F@+4qa/m\i"nm?&&+)Ig"7k-`%%0s"=`uSH!9CWAF`Ta3F+jqWCf0Hp&p0]_6s/HanVk=()I*gbD^R@sZfPUEnLO^Gk-CiKA%R(>q30"D\CN55%FHRn&'`pGa5,hVQ%IrKgVlq"4m1fp?)r%P]o5&8_n<)Nl*SN'm+[s)5T(F(f!m;KG@RSrJ^b#1qrRpNuA=!5%l&U:_eLLm)_]5m\7_'LZPCWkqe9*Hb#%+\oSF#_4MP6d;\Ah3Ue9Y9/ps1g'HLn.qlXqVL$;:LQtmf5TskX"_tJ_-9>:;?9F?Ju?qJXUt99>K1!8Wj:o$M(jG?bK#JZ_U6\s%CToBYhSrSYjuNR"rO^_Y<%p7@*C''h7+_WH#&$(&:>s9O9Z]QTg/:K]W>D^Ffsi%X'!9+!5dms)8_p(jRI%]GpL2kD3c59,a-JLW%53tp..?-K/h(^<*)n'\[O:ADh#/<9;F#47]&[U-M<(^Lg1@ek7\f7d%@en,2A&KhEo1$DAc685hrW4i([mcP^SZ-h1(8`(M(DmoZ%6>V>VEk2g>r7cV&<^L1cUF@p\Uh(uNBBTrLAL_#e$tYMGPq"=7@qOlU^;$u??]#HpGt$K?!hLB,o4X=lc,Sg)`=`a,#MN)o5hd8U%&Lu3o27nkU,4Zr>AFY-%Kk8I;<o5[]8-2X;a`'2iJa,H1(i>Zk6S>B4Z`C/`->DoN.<ukN"M5@TRnO4f"F=e,33ZP65YY%WJA1JW%;aI6`/HCEOWS:ZhF!4q(WQd4tHhXWO['-cYAaa]d+B1nKEqV*69)Zm^9\h5sg$Uu\n`H^n>7Fsc4H6iXZ^\D_:U)s?3_Q-_)Ith'%/b95TJ88$",pq6%dO!?!bi4>iZ,Sirln95?'IVOY/-dT?8C1[3!D91!kFGl$H;Hm;[<'!54TO,9^(lm#BkBKKYIEI;_:Ei7bhtcf%U_lg>?6b\%T@\ImLHl"pd;.liQ-J`5[R8<H86kD$5t;h>Pt*KY]%4=B!?k)S*/t<)nhf(C&,bAR*F]qSO@ZP!/4hY6p=0BOl?f=Y%J/8l91F/QtDZ`oO;!:ab^=kZ&+]F3#<\'G1Mf3oG2GRa*8\5D?H60+%[[0uRk0HDgl`oCa+a>DBD&YI41pasdb0G:'8"%!lcSX>Q%`ZMWl!=J^&["<-oJFWrN$BU<'2dR2h1Ee5Waqru+O/@/C&X;G233mIKm`n4j%nd.hO'j<=i%.E"98WHl_n69?bo=lJ?`"!<T`hr<%\H$ZiDm[V3aD7'/QGdPj;3CWrN'ojK^6`Blk=i]o(+8(Dc&!WUD8H,_Xg-8NlrKfjOMLrOh:4jN!g^7PnRc>9i7FfQ##p,A+gPKJ%-[ct%Vo`1t-H+_G-ZMf`@H13lC7Hsf@,Z4^M9`()O*u&D9'3q[kG@9heXAUTR<n,R(BoeQ9n6_ZKTQ`X]temF+,>Gq?^Vr#XAL1Z%+H,/'`Y4Yi8g)>s"e0Fn6K'iD#c*\=%ul&JT*Ueh*\*[f[tsk.$\)O.G-LDWf5qIA#lL:XeIVqo]]$cY0B;#B_/4[5:g-s=>..CR%Wd+/0Hj?H&Tc\YH?lL[e/Q"m%!Y$Z2F2PQt2Eqc,ogBR^q<oA.Uq#si9-o^9DVq+#g;8YZfe%haQ6-k"9Og?6VBms29#cC5]M7n7%>[4oL$1uM+5T4Ao^!WAmd7S,?E,/d:K-\4kZQ>JP]jt#,`nGs6p.tcAEA2:*.+s@od=ZL+?;,;KmC"!CAA\tm,l_ZrQ5?FfB1?s8%@*f*SL4'_Qk&M<;7ZD:gJL^3&<-Nn2FAXQbBHRC63;@W=3`^$"BL>BC\I[3to?jikg'?5M0nb^<jL)<([MWo7JYcqNN>NkCqa*(,%<?uZsf+?CePcQ&@<"/3G>-JteZ\"Z]MU7S!VYnds^G5Ftb</s0QZ&QH1='rKceit*lg5)_$fpR1M'W>5@#>*1=JGq:Q-*R#3e\(V%R@mUW!,D,/H/D@$\%gY@Kg"X32];##m+9;CV<MO8aRZ[p9*H3M@`]-eGQf22/'HK&>>/?g;c:mk1R-qt_hFo)qV@Pg<"C=2h[6_3%(dhjRN^5**2+BZQ#@=!&5=XK:C@uTdRpQ0&>Lb=g%5X(b,>#JinFql`7/oNJ(=pLmO45+H.4t("<cSed!o@^)Hs#5kXGP\2iB%I9%_Sl[bl&3u1d[bHh56>P:`/W=6G#MKM%TT^?X9X%@[ZLS--QUNlP%Xur9a)b%.nOr.JF"X1c>40&OX%W[N=Vf]3Ie>VC[WI\\Ip*`%<n,EZQ%UBs$H!0aK=Us3jOQ,7d*s!s?IY_<#-7Ra1U_cJNC'/p,-)YQ/)U1Jr-mLQ\/C*H`C!QPP(!tBmD.VG`f79UA\Ci?&/&AF%\Gr&=`qng)(^*C<Z+0qU5I2l]>N0LteeoWIKmQ3RWVYn&T4E(q49#4E';C>hc#"Mr-Jo1ZVbO\iClBsUR98LT*Ujso-/^!A1\snn%6g?JUhQb>h=i0qj_c#.hGn^d-9kS_(4K^Q`K?qEkO7<$pq?p@QMABofgL&ZbY>_$H5dZ4"2onn^0X3GGc.M4YPr:8+k-<7Wf8#Xu%?rL6c]H6H,J1#I9UMooidRq1kZ+$nY4)!l-Q-*Es]gtDhnp;G%YEu!0OX(,?EJ@c?.u,a$a;Fi1.H%ro[![V)ZP<':poW)4D/"Ih%:6mo]hhO1=%f@nX\NY-''6MQcl8bJnA^3_#ZHMpiZ0c]NmWW?7mcoA4a6d)P+26RbOei5h2r:(@&m3*Pa!47OeOShS@K<Wh#!OS3%V[<i:D<Z6f^D_nfdoE,>Gn]IP26Cm.2.=>0R#GF0$GqbI_\6,Z/*H.oN:NX\#FiuC@L@uC5YTFU.+>;A6_\Ct4SFslRDNM2K?$Wr%:u,:Y`O<.UF9kAfHf`\R[jfdp&TJu27H;N-6K=W(KN0<33'h2VpM6Op('?@/[&SJ(DoP#TkrFa3M*BFp^lk;sTnh'lN*2o^L**34%CZ:&2%&pim%iS4^X#C3u0Asr$2bP9=JXuu=aM`lO)\"rbn96UHO(;3m3jQDTfgsFOI%jM'2Y!VbL$q@j;'b0qHisVOY;r=U\)qO1%i<+<*&T55i.Fk.A(k1fYDM>!nPZ#N7I%S#aQK>Xa)]<S$d7uYCE/s];)aQfrNTX%?;l_P_]e`PP8a^9Q/hV%2J/t+nUr<^c%sW6l%d[>-,g)3^pB5HJV(C?!bP9G4EbK+)D"aAVBKEiF.251lXKYR_cro;eR`8H`)3]=D%.@u-<jE;\j9@T[m@7n0EC.88U%4*As_S4/u%06\Ni@M;3^KkSZliL9f\"^b6u]L;"$$CCtej[sH(okY^f-SA)5Q]q4G"RP4NZ3!O#D@9dFc[iJM84TOW6(?tpWu&#U$:1H56`jis%i3!oNbM2U/AN:]WC5_8T`O/CIciWcWd;jZdQ7m'#?)5cRUGET!?jb$ZLS1aEXqOL$9:.IB_'3fc)O\A!o/"),%@Q'5q2lPbi'1jD%DPX,L13-ha!m.MKDdo$R9?bRq4k(s/oMu47lPhrto@ZGgc`%K=K#m:!C+Pn3q)f6XRq4=COAmJlj,0*:]o9669YLi9n[]>t5r^78%I4=+>`KD!?"u+tPB>9\o5Y0uhL(0W)f6e5LE/[CXJtV[n<6FYS.:i]YEZ(/\=cu0iLU5JbXN]4eDJUa9DE(ED;!m1F-1Ss6E5VLA%2NPVl=W2`?Lul/f8_lgFBp#kA;8@Q]aNNF6/lMcmV+FN`5RsF21T.YAI)AG^2bk"B7EkGEY<.SBQfY3SBSR$i8jI#?,Pl/OLAN*"%3S;/m59).K,^.Du5TYc'Pq%,a.[RS)-uP\c6Dn9Jf61nHTEOG%8BhaZ5sno.JL74?\bZ,f,rNGH"[;u%]B-a.!(j#nL$uXa@mesf%"DrBPb\#-BHSZe>Q6'#>(PSkd!AI]_Am=63E$6"L8.Bt('CMD2`?]B'Edd9@pDW&ELD77_i=H\S82"5<oD?nWgtX(,6MA;hT1mDr%oOE^dB_-,/G((JAn4OJ,Z+U.'Ka\@^IBo17#!PF0U"lF'<lm!<>PC"n/<JX=2FMQ*Z5kc/F/C`e!gbK;#`QKN3&=oOc32C,VP;nb%7(A?d.eo$al^\#o,!G(/+F)^SL(*^ABpi1!iJBlLAR?G+]/\O;>P:ElRe"U.12r#2&X:Q7,J(m="`nede!)59D"oS5=*d]S*nl&k%'2dSVb9@%/1lQ^TdV_bm+t]Y:h*g')r+lXFM1')MZ7#]d=;7E3I5=q.'d/gW,h.^rAiE[l?*GhILi9h,0eg)n45[kfN='X%M1R<U%Lo\:RWcT_H%V+f7rg*H!TTK%jM10b.48u/Y?:mXt3M+r'!^pt#MbU?47VaU!91"7`2F,"]iJGQ)M==u2f4/#<fl:9AIe?O@=(I5)%VY>hSal"h9f`SSC??\YXEA+Wi=!/p([WPs;"L4363.J,Lp;if=2SAaNq2qVC<+X#0(AZP^N$$3fCWf*[rOr:[<r`I=dE0uOF'B4k%)t0!H0G^Nr!oXa!'`?tAM/D]kj,@Q!S8cYlG#@8TKUrSPs.9SADpLgaG;6p'BhltumOS`YLiD@VcX>357j8u(2.f0Y<:`aE#SjR;%"nQ6SfUE31`4393cke!LgF)K;Sc\1<\V>A#8K]:[`eBgP4(H-SdNmu/:[Tn'M9,cD*hPW3-/.L).:-e[`m*l_nLY!k((&s=4cY`"%/WjpJ!3<F%F[<\1JZj&I,:Hc46!G\Nl:\(Pjim,7rS,<S[MmYM@Mj(\,*<WB6o+AK,fB\]A[0F37ih^nTK$Tu(+We%^lE4'7/CYF%XG;iDGLfSR<#'"Vc<<B*Opb+,e^6Vs"\DG4hD`%WW0$dGM0'JAL8QCk`#t?q"q*+._QMUFNP14+"XMOo3C>RP?EjeElAJa8:>nJS%F;7nTpXHGCI//p1gVUcSCM:kNq*t:1ceSB&C_[@qZK?#s1A3M78db3G(7IA17PSngCUYLk/'D\%C8D>th[t)>9N_5U\18u`H^K)i%`3fuaJ.\@2R7Yq01`HN[VGe/@&4fGrM1Xt*TiCRGa^67^D_3N`dfCq\&-dh=Z0j/0Y-R^)B68rY!*$ju&1`j(nm3?jf-\P,O=AKo%[@8tuqN[g%#$p>1E$qY>':@)QPN't^8/WfW4$H^W=HOrhqZ+"mTtr<9/%M!9CI7M'?JqA<-n/))i2&VgT\;0Z>Ft#[J27PU`q*_W%K`OP(^Usg,A5RZ-i08bQ6,L2k!S'Q/'7A^&E[Z*$\@0E*!kODZ6f+98jg#Gl#[tO27np7L<6K@fUe=eI&qj'hT_Pf<UWrW[g>-T]%@fnn_p)/W"$cQglJj_uCMt3jA^Vso@F!P%r!]KCRikCK'l8d*5DQIS?"I5-#(Oi3:Yb($R8A9tG'uu)dZ9QknHCk+jJYSTco;l>"%<@`QO*<Wq6"?;=dZPf*.ra*8o@tf^sko0;n8h@tRB:6&*$*7"d^Ks$,1f'=H&NcRq_r].E#a,ZI?ibC?.HEs7Nfk3=knf$QMInUX%R)`0o*B+cU4!m*#553,.Tc]>:he"%d(ad;J%-u4Vagi$p@LCc/@B&O+APmuW]m3YEL_907(AFNt"L3&s=nhSo;U*#f@eGQgM$8X$%k0s56&trNXXV#sc\m$oB]H"RB-,ZRG'g3s^;g@X/2[P`5O=ck-)QOY</U=Q/XX9WDb8dF3(mtk%LUN<=PQ@gZc[gFh0OMF:2.cXk%bV)pMm:+CHgq60WZc"L1,3Y\h@%MVFmUuFtA6Q#NOSh/W[3/ZMW68.<61kOn*)Rd>7,-Ouma:fE/+uG;Tq';d1[i%Vqd^%Gb%pTa%KN^6,H)6Qk17$"/+a,t1g"jH%f9_cHFFKg2_T:FhcXG^j!B;/6#ScCk':hV)C^f#fpD$E@NJM*9]`[6QD7SF7^aE"Z&:G[=FWSt;%].97qLVn)VL4G[*ejNW3h3b&,?lB#SW_0MZ',(e=miYOGZ:@R-R)V_coZSRPSoCG0.t$!i6nuHHDImn%[7(nMF]co/-XFp`1SWQD%2@T-eZt4a<.+K>Ve/".32c;]SpF+mn]FsA+'Oc&,$],F@p`9IGiL)[%/Wh8ag'THo&/&VYRcjI*a`Yrm`\MVgcA/W_%Cs^#Y,cbc%$d^rk-CCPIa5erKE2AY,oU@"&*D$9%SYj)nj[P"<&P/aFNdkE,!of!0/"YN"$KPTba$5lr:-H0NY2u#^7>&cfVhftCNCRmAD-V:I%+>Bq`*cGSPaps's5;^+]'(>^<O2#$T\$tcUZZLDA\*5A'lS%.%k(tR;+WKVc`.7Zak93Rd!<!V12%F&h"*fanrLN2$"9lbGOVYm0%hVgX-a"HI"H]l+s96u)I\Y'J2Rm#"l%$4(Y,04ZuZKUH:o>;/i$L.KCn25EaGL"umKuN-=AUuX-5.j&k8;5\GfoHaF&0\3Aqe&qc%(Tt8+;WJJ3)"mNs](bWo"3W]q4[G(dME?XY5i3!6Ak$?R5.&RL[9m9AEpY2h*=N_/$=:9SCO!2/j>Fm6#O3g:e@Cb(!u#X+e_F*9%!?#*0*4Zl$iZj,u+$0gXiW-M<bf-^ANKIfj.2&9g1r8"5^4_@?O:BF-(a@8DU=,<r*BPVURKH(JklEHsgPk*06pYQk?"^WsGLp_X%>^fm,6"oK-KM:_RN$HH.YhP-`p*d[Or7F-e0cYc^*5*pp%$/VK@mRYi_IJMs$jFW.FpNV:$JF(AXEp:*NkPH6drdL*#2:g6'B4%;%"WRQ9<>*\15(uXs'^jQ=iAD'M1=932U+7?,`qg<>k]Ed/^ZK0d>cqIS`]K!E.N'dF#U+.3_9GODo+O`rH\0/LEipBdAm<3-2(AqH%X8&["R2^qhGl2LJ4HYDEQu\[@[X3=N9QCnpK%@pq3_>^ak?utok!#Y)/"E5('2VWJdfdj2JXY*P+hhs9Z\sGul[g$Qk7;1"&?qpL%r_%ZAS-QYAL"-/`'P@YToFBG+Od8\CQ)GHWc>t9a%a:tN9:;\QC;a/tbOHl)o>2e+GeU`&YtSQMT'@&]8"lf.+!Wt+\YoksG!p$`%$UT1O/5]6W;o.)h/MXu>E:fR]'IH/9+o-s#X3!*Bd48#DR<jMng>7J%jem!<'='aNB(opD[tp)a2h_,'/6T@u.#uYuTF7%V!;R+m%pJ]$L^kI.o[B"5F0,+NRbJ&UrBgG?D0g4%BV4KG]VLmZac'*Df%aHQD1VYBM0eV7=_6[?KEI1oORDC&A;A\.]2<c<EbcN-M.t#3E%Yd4h$SYd5n&qD:V>`'I9=ZBj[7<XFg8DgXaX.sUNQSMZ\[ufrF3ZMhbMYE1X@dV]+A[pKcpM&;ljJ$59mK]cJOA:Qke,\3.ZSb^5%qs!s_P/S%W0#GDWijRt_-Cg0FKmh3s,&OW?e2PZNAq'9<=tC.1db0smaa>^(oCR)Ub!7G>8L;bcL6<2r;g\',>E'M!4#<<j/coH,%rtU01])@i5;k.0TnG>2/X[+G8B.IDA]Y5mr$eJ(u1eMj#+`]K'>\EZ>9$qZc*eLDGCVMP36.h]!-SN^m4=CJj1;hL:c$a$4Ys>)H%c8P--+r`l4OU;e6Bi@c'K$9,V;Nu%?=^AfbUB'NMjr*5WVs,HHCN3H7=Urbb+[9;dmq?<HXRQe[>R95=AL</dJsaK32LGeHm[K:,%qio4-[0-nmJ#^m5Z68d:-q=5G^SnVdi]D`nEmNr35FD9men\c)TE58kH[`B>*/FsS_a6FGj,jK\#CY`.-LqY2ahH](STL,;89ck'%6"UIe7dkokB(IdOD+Ou*GX2bS;nH[aACq>'HO+gqB2d6R]l4H>:Q@!7Mr-`P,Y<f8i'Sp]aPHs3AY&2gX/g11]eGF$BNu3LeX2Uq%)!@ail5R&^+n!/,!Z_bPduPV\3O_<t+VUG;E1GEiCQ9JC)5/t33[>S:9MF:Rn-][Q:Jsk@9'2Z9C,td1i+K1Dd9^J-;*/M-6la9b%^]`o[6-igBF$b&f_E>-#+pjV?(g,N%1dZgNf\(k?h+YOeW>o#"pNl?b^%0_$r+GXe'GM0<dJ7iIZ==l0gSlMd0;T#'r^UOASQ)B#%au#QK-*fF7R.R73WB*`BN!.99QCI'OSN`[koZm*SK3M3kM&nePA"!t5GS)^cYab;o6DomCh3gms`l[-0&.K<7d@%m)o.(]Jr&oIi%RkLhr4g_nJ/r+,"HpR&UpC7<Rl=)ZQpHZD!28+8<q^ZNR):,9o^j:7Nf(g<6hd1Q1a^=g7dE7'W<YQ*Z(:%p(kYX%t(I(hbo60UA%Eem[C4,$b.F$g`(0C!;4DOigS>5,h/Lnf=?7jQ!l!;5,$+s&kgW3l1Z>%fi#BJ_V(aPa@Z=5tGP7Yjjl,JnpP=?3N,f0k;"H*<b4%j.6`;PXc`h^=%a;Np@2$4p]\Loc>A6lA9G@]HNetDA.)>q),6SD)Eg/iHQrXY##FoFl#FCYKg[p,F=DQpaN#d%hHuWeDM09U/k1^%o]CF!k<7b_'ULE'M3>K%/K_ZX043s2kU52*JSiZHULEKr%"9B,9PaWE'4QO*&V]PWQr"aIc8Wt1D9Xk.`"QK`.q=l/_9e9HLekcH%mCh!7FXpPu@3`LoLY5g4U)Hg#*#OVuFg<AJHutmX)d%\[![dc?a@L*mB;J^%$E_5r743t]!SW6gW%B=qr+a\#p!LteFo(StIcFF5%no4#)hKTpF/OkbG%<4uC,qX[ph67J9<nm6BZL2M/i5R9V1Z,TCJ+JQMgf'OZo[t8FWa&:YJ1i^&9jS0=Sa+]nhWa;V>'#)hjPjds%cq6o:I8NVnBI&K>o-ZB_8D.Pe%/L>EXaS1=1#[.gQ,(+ta0T.'1B<,PAn1@ml<IoR6RF"Y2(i_h]M,L00WKpJ>C(=eBDGUVCWKQ?%n'U67>s#C^]Q<:rK$;*Zo/>i>8jM4eh(&^#"f#24$?PoGR#>h'E>d#fFg2/s4Ve`QV(5OYK'jc,k0HqdL92+\0^856&n7$Dii)+e%LEp`31Cg5#[ZdS%c"9!0i5TE3HD\>QgiD!(-tY6n6_lTe/Ci7R2fu0+cDL79&Xlub.n!q!8iZ,;!E!k,[;%he%UqC;oa6="9jlU>%mhYf/qep.0PA<>A2Cq#r]C"^aE'FcfbHf`ZPoCR+NX212MfiOU]8Gj<eA9"NBgO];De]bICb^h.C$!191Et%:.%Gg(q7UFId7oe;%`2a5(C-Cgs,Oa="bVEgigS*[s>+Kn`)h>h<Tsr^Bq1YX24L*lg=^ouPo5FglfQSL0/\st(mcbYD:+en1rCCiiZ#ZK:mHW[B(mG?6%_j/-61FsXG,KNmeb_4&i=,2cP>q-9<ADCd`S<qCBs&j/9&mQ'Y`4R?a4,Zq*H/0hg@uli&6,a$';NeTJYlYMN(FK<u;*80l,tTob%jZfJkkVW*A5j/&b/:A']F?_mGist(4$lgV?0U]"&iL^A\fnt&.3DZu,FSTqC7p_4U5/[0K\Y6=>lA6J<DNuRl,TBa6Wo+A/Y*Ue,%!VChC2*uA;#EIm0ZX0efJLVPUepu8,%Z[DHVb47B2okk2dKXDl1#X+9a[/#3Y:hEb4Y&Ve=]u9r2)Ku&[$F`g.NAgs=I,Q*`Xc4F%9hqJ!!\jbup.^FIrppWH'3SK3>5b>"5,8`r\jMZWWm[l1I^3MeRi+$Z`jR"d4Oa2khHI)>YJa@A99akFnmp\LUT^`N+0PPQLJiKj%#PX&3=CY?E(@sH4gD/^qMu%%3nZtYbol>M*PVuqL:AaJ=0A]8r0,HX4!b=sWe'6K)U_<&4bkDd$4>&)p5<F`oC@_j?1pTk`(2NlR%RS5gKIZJ_'Gpi4R%TdiLI`9J3Z#R?I)6'-8Y:(4OK/f4eVq77mhS73e:1q>DkBFAWkJR1#(U6I`9&Oh(%q9_Tg#Wh$s0e[^FR+B_%II#=dQ+Z5l>SS*nh7^tGg[nbG[*mKS]C2-mYuUt^c]$?3h]nF\p\e"Yih$%Aqu4_6:?2/65DXWed%.mdL$lAa,JW^o^ITWHI+e<k%reR]Ts81qE%!s(&W`)YbprWDq.bO=<h]=XIA/m=\o-\`jMn)V]_(99Z_=V80/2XSScX*P;aABMF#J-:[QHU]o>/Gb:\)K$i>]pQk%Q(76TGQA>/Z$&\WZuA7HRp?Z$X:>6q^FU"@=lY>480mS6TTF*L2Bl%&1$m&>R!VZ2pIj)0.KPN7B!^-%AC@#X5pI&o+]6bdKq<]Z%YL1IaQQPJ*k4I!1E32[.NWn5Sg$GZ\iaAY1P_Dj7]>du=F8l6^s5Qi*8Tn82WLP_PiNtAh;l8o/l@Dp&8.'3#JUM^*q/(LdIcBhF%Pr.1&9!HfO>IGYA&kqfIg=9U`$f\]A+);I8LZHq2+q^/QK!_hDVs#T`aJoksg5d2&Hr6hic_j"B.)Z@<Z;J,r!P)MMlPI[3@YW,O%Q@o^j.I/i)'I"+[=A7qg@_$-m`E&m@nsbUH=@V)m[M'-dJ!MY7NIO.fDun*c,a.U(=_&$&PXuX]Xd<eapnS;57]S>mp6f+N];Pc3%$jE2eH7BrADIjj>M%Q(i)cmhglc,I0ZFTB:l8pKhe*7U=Qi5F1J8TMk+M1.L5B>FQ2r@E3n#%IN5F"2VpXAL+BjCD]k5/l_rDXF0%Z(Eqe-LRc@YGM&DMS4%&f]A7`QfL4%dh.1MML!khVjN:Kf^>(GI[[<U;g$nl>qEnUeerm#]d2[&`.5VpkN,3[\=W\FT"S=rDB+`#%V5#Z$?Is8@_XRL\XS_8OrA9"E506ac;`SEsqL7]b8[6-]R^&JchbT1!Voe\^55/"G?.jZV7#9VoL[V-Tm\ddb2$:tp;\se9jO<%9%H9kU0+@sUS?B>I?P<\KLT3`.fTAf/"(PVX7fqWL1Sbm,-2U5kuS`2Bue)L7=S,6pmrNra)C%M;1bl)YYI]@`15BZqrabL6WiZb@N%'M6Rfp/@=.c1f\ErR<>Ob3$hE'Lh;OA]+8kiqmH\rR>IFlK3+O4e"%iVr,tGDY)RBbgq4>gS\.(4VcJA\iWN!>\LM;6U-paN'-;a%/XUB&K6#p]m._>(V5oV1S[r&8V0*`UG'.cSSLBnd5Sc>IM+MFGP=\k1j[A;0WNGK_c?Bk^R_@?gghcW;.QkjS`WcWR-V.]N#a]/q%cD#,[S[AucF%t0L\\c<Y<XC3IN!i!Op#QR*UNG&%[mqV,D4E'mQFL&up4okef^.7mP6na=O#Gk65.9C7:eN(!We`UcS;-SHeDeCm%+uG`U@G>/RDl6o;98iFCf&GB51(23.pA'%\)i7b\cp^9"PcERfr&=[GpG_O)D-LIB$Fcj5NhjdSW@MZ*#cj\B,D;M&j:Ko%$6kZf%2"6\'35YiU>0F]YY`@=i4R!Y,b(Z355qH!u$93hd$WkJWQ#tm?+Kjeq3nJfIZNO`=.JVqc(!SAZknc(:Y=PZniF!\/K2B8e!eip,%-"<+<k[&t=%>SR9KTd+WDhd_g*c+*%Du(>0kJKFN52O"M2;.h?aO@ga&PG<'-1O<6?C01"+g`gW.C(h."B<^UP`+fbb6st*>&0>j%4qg'6-:cd8[q<H\?t[G]4GYuK,&IN6S!_HQOHbh.mm4fTKS6>1^?MGn<-XJC->1+lKS/T:CO+p.@rg`j0t#iaYpLa%o5"]=GVIR3%KIO\mr^C)Z'8IFVqu+^I9l4tLR'9KCOR)&*HaUk@8'=N;ZJm\ZUl>.S3P>G:^fai!;NE14DqG)s:6#[sjsn]o[QO=tcgn!PpQ3T-%Mi&4ZMt94W`("!tGjQf]I7LQ9BLIeq+(<=!KU%iNK"s\H+ro[Y9H/sFM+&.ge"q1dDi2Q:1,NOBl`nVg^>"8o8Xu&\K8%[:ouKtj%63M'K<dPP"WeYT)f_rjqm6WJ\orZBP:uUulFqIcu9\P28_bgG25V5'ZGL8HEH)BON(?G$M"T(;"\F<2u$61WhAOqBZOh+g4$j'^G%C(/uq]kG"]oH4m_)BAH;dH!"RjkZ4+9R:@m8u%9S%^nJ[PqA#sFA=)qQaXn$-"7k%#N:-fiYt*bFSor"3P)Tm'5]lA[G)HF`6;Q:%dtjM^L)$`A./%\C%/C1D#ElcSR4mTd%#MY=>5;!i_\$<e:6=$5nIEcRT#;O:%;@_t(W\*=,1l:2?lX/o5!M8H`c49:;E#sM(f'RW%bm-"VUDu1f<SEs*<\D"MpJY]>U>]+570E*r"IifXF?Z<1RHDtK$<Hd][2)dp4r`+5>KAMbp$1AdaZtR_VEpk>a=Zt_W^[4\=f6'V%qMEcZdp2E=ghi;\Gih7Zm&%,+a*DHXOlS0)8HWq:jlD6-HF`6.1X"CAl(+f&8=pS%IO-7<1A)&iTu_TqU-Aol1`qCuX&F3q@TCH(%&1.0.T@b7q@/%fCa(Lt8M\o@<%FQhj\VZ3dVV@@n5m>)AI1tRYUp`3]/i(IH>Ja/d?DaV\]D%/$gX66/N/"O^lEH]J/:_q&J-GJ%%is'&TG7Z!?Ue0EZG9F+MU=f/_YgAN%5qA.%Xr-q'p63T/2&.ZMl=t31$?)S&fd9JK![,^B>o^^$S)%j\iYul_fM3mTa[HB.Bh8Jq%*b,o)[!o,d9pRQ2_+mKl1eE>KQ0KRaH%@a^CZ8;!Rpf'Ma;X:FoNninF-sa_]S!Wl-_m;t!iW!_*fbtuC,\[,F7ZO8a='A:-U_()%\:5(a1j`V5)BqTJ\\jVc(M6g)!:aJ0nR7ag^k#Je]&dlHD^=Srpuu?;j)(&8^nWT%)a><<G*99nm?WgGZ5f6ZO,:1(,PPs)&umj.%9:IK4%A#>#;Y%l#oUialYVKduXooUM.c+jY[;Mo*7Q);qWk2$rM3;Yp9>RnM>>#B&m_o0(X(@$dAms8A7PHXmifQ6;4^E!)(NtP[%,Bu,dS@6EOah$hjRX.:(8g,q.6u:-!Fk`i20PV18Wh'%NXNoLi&Or4pOE'qVZT.9LP,QBCAfdN9Mj52k@$Wcl'V8"cb^lLt!X*,Z%JH?RHCh-d"&t@lMlMFstSq\/'jPLO=`]_d,MX"[?XhkuX"l.nsZC+ZC,#$db=[qt0#]jh(DbGe(/ur)Y)6?sjes]f<Y>B`R*e[;A%E6ue85+Pd3FW+&O6KU-;VYU*e[sIa!OFc]9/:4R\,Im9;Kj'"r;goF4_-h=6]jiCM/.jE7B%X%B(cSQ2YOs_H4hL+):R5"?$%l/$%REOqVMoZV,\\XM!Y>-TOc/gEAZM'k!@FF'gm$A.fcESfEMG4XTAnP!Na;#G[74g;L`*%FT"d/\Bcg[I0ltk.o/EEWSk0i;VGJSo.%kq=Y!JK&8XWc)!-"`CB4kjbA!K\T.Z6JTNMZ-G?_?.o%'Hh*`@KB5fqOf(pCajQ#[:$^+OmlJfI&X\8VHnUM/k)(!n]&I%9&\@Y'%O_NGmag'qX#YQ*)ZlTSaj(Q0)iuUGDBSc/!"PbVeYE#2VDH,?D*Ngc%M]Fm@BS<S89($LIQEagan9K%VrWZd,'kYt<gU><]cB\d!%6)<DrR$I)8<X)@=8@3;NM[.!Y=d^VU-0icqK1hE9hj+a>a9U^VgJD>;qS@0qeOtbljKA&gGfGX^HZXT"Pi#IE;'5Zf[3"!GNB6XX%80Bt\dF,Td6,8oVo<;&rPff]&B44k`<4``OLmu!$if[]*&\gI=?7>qij<'hcl_Pn+d)<SO.T:Y&8W_0eL?78J$Z^JEW914*lI?!d%K[bA"h+,0^VH6n04"^P5=dLF285FJD?!*ia>R/k^i,)i(1`Mu0,.;a"\@5VnIPZW$KRfhU2]*UPVJJ-6;b"@"Gh8A1]@i1iKJP?T%*U$.JG7X+elWueH-jQiFN$rB%FRR'EAs+thZR_[Re[$bK`gJkL-7UbePH'/[ns@sZ)=%=d+:gB,X*%02pBk=<4HZe^pa.gnGAps3%gX7furbB`nY[D#dB#j`@ZB5iW307QHkSA+PT)#^J[XI2";.Z!,pNL)7Xr?.^YTW^@]"(3&]O-^p^Ws8B)W)8,a'@8e'-fAB>*j0R%>=S2)&(9I[cVpNW29_t:iltaEE#j,b'pOH_Sb.UGV0VmmL3.%n!,h)(>Ab^tMV[*6Hm(CkNqHhMqmX1!745("[.Kf%D):a''9gUh%eQQq+SBg'GlHfgtf`WPZNqp4LD0SWq_6GAk@Uht>I6Dcg-PdXELP#jOX)EZB(YHu\Ur)?7WT8&i[6f99h+Itflb<agqqG2=]0`5A%R/,uBCYcNa;:F*LRi14`4[<JI.-NjJ@YUU&4l@*%4pO#a_q'p"a&!gIg9:i<#f/ABHX^8(Ft^6^!tAJ1s0<qFctk!KUt,ua=3\RY%nh?;kP$='>c8@6=Kj'Y55s0]BHEU',K@<DM`GN=;aVdh>mE*F_[RZLOa=]+M$-DHuclupqEjWn3'IUc7+MHVE*^Kfe"+jHLM(giB%4TSQM4cnKTKpA+%0He'+'P/u8>YrgL=g33f&Gl!`dY_e]b8]eK7D5X'Vr?,k]g.a"C+df`q<(s-VQl[dBjh/L&W8l7mh"9JCjg_7%ak<SnY.BWB;FAc5Am407!tS5i;rQLF5U.aTMaqP_Ot%iHK1+mY)=Xf;9bpK4'ZBgVfuc5srD;62J-?.Gbm$0*5.+-/oC>!!L,+9Q%^M*k$LV7<(GRC2Tpa.>Ud<q0"El@'1^F\6Ar'cT^agd/5gk9X!Lt5ENqou@d[*g7[=U9VD04FZ971>1f$$%m=dSRZ?q/S+%aSBhM%jBt,):H0f<LuVaX9B42n&kpqbJ/(^BGFmYEMr#Fi>3K\\U.57,?-"d8+uJQl&Jk+A7c*!t,Z>Q'(M7j*Zl[FT4n$?GmiL"YA*ERQ%fk$qQ\qp`W*???r/d(l9`K,DY$Yei^[O&QAZ>XCofE"\[^@@31[bNbOb%Q?LCPu*"dK;i^E?`%#ZRp!%&XlA^6o]N)9>!*73/;:n%KH^iL2_Y@OdF-p6,sWR8+PX$3<]?jDB]YU@0iUtg8C`Dip@u/Gk:8`AP?`Zi-bbm1o>1f?qFAp*KB52@>>pJV[Arh>8qG2:IN<;^%?n?s_8-;%S9AJ-,2oI-p@jeh>FQRoN\`)Bj3K]l"MjA+_4E><`"B&2HiK0T6p2_OfJo%rI`0orrc_lJ'XY:5GL!/a4)0He3N(0=u%M`!Pqo1I%,R4$?N'LIZ%C`k,u<%*`,`=bN,hF3&&h*;"eG6!Lp8G8Y=PpYTi-q:S0imsQBQ!tF5dXlVM77XQ0V0dfj8E*KG^gc5a%XRt%q.dHN/Gd@[lW>$/0J$!Tk7Y@[-B_gRViQ3'77_"m+;&=8PjB4Y+R0h4N3Tt5OGimq!R.,ueQ_ng_OmEll`bHkF["YpM*$ZiI%$B"FS75[8dZ#h![U1B]pU[[T':Y^_-4*gLZS`Lb#Aj]joK#u]`K/-T.Qj\uNY.GN>j:@/_"*IJk3e.nO\q1<N[;M]Da[CpeGWN6$%#\,Sl,g6r:2joiFIBKOcbZDp3HS#/p0B,BU_NIa2ou%@e3K-K51&AH3PGsu9M9*<9OPn[7dVU1gI.8A)1*u6o2?nj<q\\OYY)V:a%_+B5E8(u\Q>#Mf70.57k&n,2G7lk&OFj9?$XdrGWI+ZCM9PUP81a]Wp^.2e7@6W,>IQWp*6mte<7;h1PJdY5)qr]qok%ZanAO=mF%P.%#(RcIGt8d/V&&TJjsH<;A+-$8$KbZum:nHcO=%d*9/\s.ne\D,%VFX9%,Q%imfP@_3a&Y)D*S@grd@)cf+fG"El/BJs<YTP=Y%.uLX$ilM79((9*]&AT$#ZV!9dOf_M&43MF]hq3=?YULhD,aA*S_)84r*50p:g*/jcoH3:L2[UQHGSCPFR3T^!p]b_D`DhCTE[ocS%*:q-rGhB+-g.8Oq24Y:5PD'%hUX6.=kJLNqM1R`J9+PXk10nLI!R+^tdM?^i60-R>>^@<[M`_b@aJc'u^7]*Y3XKkhQZpDk1ee2N%l53t=Q3t&?fp9+V`nR8a?AC_iL/9[S^"(:o;@K7ES_BmE';=6eW7;Wm=?C\S[_g1gA(k$B[7t\/q,so-+H)_qOL@_V8,"LqO_S=5%Lc@;QGZj+X9@ob_&H#EOZl)+aW<$_miaE-EeZbl%86d+$^hT`D.O$=RH@qj!apN)5A!SC>6Dbu?^%8`h'bEYq.k1:;iBZbdgf?T(%s-ZqV?<-"G0BVBmFY*,@UXU/1%0rT>PFDeidd!e6B2<m:HP0R[)F7/9FsCrPHDP(@Fbu:@2W=qZn[^QWHUeR8bkd%gN`'"3H<l71%@9KTC_a/@TVp/)?4`_?KBK[I+U[r2,Qh%H^oSpI:9I:AJnig!!ih";Xf0RMoo]oecN43rg@V[M(H4[tKP1>[\'s+Gl9@d^@"1,FX%.mpKHUE-nnettZE020+.Ukop`UTDuC-6"@1/0%tKb=pNXr43-8b'&7DZ#]?5Qqj]P):+GJRa4T^l!W.Uo+P"RniWl%KJYs#dr-=3%8mcN+He.H(mU45WmH*])\@[jW8mY-;$"lVKYI\;&Y-6b+"O!)ZW,r/TLKd@))Wppoist!'Zo((3;A<PO.PJ9J_NMP?;K]-HLoGTu%BRq7!Si'34jU=c*.n)06B^Ujk-(HRL\T7k_.08m*(S03cRF]#WfM./EQ^IPYg.oRG9>o^r0-[iX=Tt%?p,"M/>iP^<OiX<AKuTG6%])f#Fa8h+#MU8)jX+JR2\AD599V5d"k%&$PR?Y\K8TK3jAl\MK1:"6cR4397R+IU5>MMA,c?F<1(?/(i&VDfRr2t@.(8Z_8.8^qc%(Ek02&>cAXgsl;.=)F:&3c^a5H^?:`V4MQlY14Dbkt@FLnK5UGe`VT%OtTIHl0UJMs7pA3gr8$mUVnUuD4BPNF0Q/QqQc:U(kTdf%jGU(aiu>,3Ru*86<o$1m?Q:_SmbR152gU/7Zg'\/SkOsXKqG4J4YrfWTOnO_3NKE'@6m?.R`i^2B#<32R;S4f4u*.:`0'PQoC6.Z%9mn:=JX[4KA3NN&<(L?YPNT/&H=$C&NfRP4bX^qDS;Yek'ItupiIo.R4,Dj2l(17C]Te;D3e5L*IfPPcjOM,*KRc$a&f=6g:V.1\%Zf!#[1K9O^;.p<f[bX#1Db.<I";;sZ+Cbh%0c-(-[GQ2Z*Bpj-B1qA0nrS(@9[@no@IsVB;W=1h[A%Wh6%Kj%4I]K:D@S_HKcaYS%%%M>ZJ&BaaMO0Q9I2WC)g`^'[a!!go+`lIj'ctgC=RC=3P=j\[Xao>JU:.e,oW.SL-e/3CY:$LdeST3V!=M7cE>;a,Q?ObfnSn=W%`ra%=T.kS]'5noVh<B"P@1Z]]4uR:BG]@hSi$5^X:W3M#L>Rt:7Z*SaEV*LfAdQ]ng<iuaGYA9#j4'^_gDA<C\s<+\&&9@85Oj>%%e\fmZ<[*V;R"]b^4Xs(/,o+Y49Eg_[FLEA^_1o!g,YV<'E_D*KVV<.IWh\aK9I/5a!nkm9hp!\dh@$kYQ`FkC</aXZO1Bs=nLS*!%j"mb,9PbMG%7A]L<ZI<FVV;UD2?=L9Chuasq7P%[n1N]gP-3_Fo7L.d8Zj4KrE_m69M!4-*4LX6,3rW<(,mpe.(9(U[gJrcFJLT<%(D=2$enCGYPcFtVUi"?KjL[odI,UB%GH-08^*K`n.U[Y!H?#*'@62pK/LhkeV]*MVg&emmO/r$eG^6@`3Oo4X1@!'W>n/:b*DnQ:%prIhdYV=PS[*0HKB.n9X=6?,am;TU2CjVk`(EKt,*N^VS.uu*qiYVU8R\Ecs2$m@Yl,&0p.BSAp1J5Jl6D2NahKAZSCd+R0&btX2%D[VKdZi96?I8BKjiQ`mcE\^I_:=\#[-p/U?4IlshQ5]`d?43\cZ@+dI>57XIqcV+f2eGdde2*&@('>UD=GZ_^h*rbY!1f%NSOX2c%V<[$t6=YmF;;Q#RcLae4n"Ki>/&g-$=_DBD?#3"L=di1LDXU+`>Fd(JH!q-#CYSssj,DA4L:^_97EfPq1:`%sB"*)#CQ?V&S\u_Z%Lk3L[3cELl2D"a1=&^m>+J+R-Q5)'?L27rc';4BVjlK],Lijk=9IP8]jF7ac;..u?3.K`M#:pA\M\0Q0GSoP2+Q>iC:YJ,@rnkAu%Rmd>f,%2W<.]m6U2lOU4h<F%l<rZ9;R+t<R?osOY27/2e^OVb#>K3rT]kgjACV94-nFnV/V.k.Mbca:Hpj5t"4+0b\Iq1&ZL+\-c%Q7dtIEPptW9Q+Al46hOH&<Z:[Y<jgJ_N+0@S<q@8]4>gD@0d)A-a3<ul)!i&Vcj>gmd+4"?9$c:-S+pZak;(oH\k6aRj^[i8?q]E%Z#6_g4NO\(fe3Oeb$GQUS2K&!eiXoERH=jMAMNY],cSS9/i7hp],mC6k#%*$Ro8No4C;e(9Sb5O&^K)OcL)k%B-!)=C_KGP7]"['%%qaSQaH2Y,ZI]\F+M<5]/i/"0jrh7!Nm5#j3^E!tn(<#?LW=D(OWbMJe&L!YnfGp.(!Lq[4RIi&4@#O6N-R+^Ul8dg'PQ5L6fgL+%^\/%\@.f'sDb,=aR9%.%4Mot^oOTgr)_(hH*lZ_F=8&\@%^:nd%k,PJ.2c$ON054><?_a!1c=%Vl>(20+Tth,Q[,57i,$]ar*_@\%ECc5_BlsKZLcU\sn,tJm__[\HU8^eU'P:AjOSFQ3[6,iM9I8N#qH+pG]8<m`VKA:hjuS%:8G;"FqCXKm[Kr]Yr@I:3.rc&lN?$96%?CKo<#s8UJ*4tEr9<AM!Te9uMUN0HCVfQqsU.[YQWH^/JH_p&6j/qf!SaZ!Nl:qNaB1)CHboO/^G8.Za/chCo_F@U07Nk#/ifXE<%f-;[\mT*6kQjJThb-TerE1AV8S00lXoD31=ne<8*"aQl2Hg&;>D=U4gELOMiLDT/A&/E;/L-.b9ktD\ENc?(2+!T`EHJ2YpgDcc,%VU-h_bNGDNEn(6Rf>gr9j9Ue8'JU5(lO9J(N1).'ZES8lS=,8%Ut'Y8H[$N:S33qe:*X4M7gI;O@+8=$C1@EXp=C)`J9E<XR,[0j%hErsgES&7].MF2F,ed46Q<*OLH[6nr<>"@%*Sq#McE^MCD+eh3AYpqL`D#cGM,@$H!;N6f#hOM]1\T4Ke$cndaKmG0rhs4J+?4Aq%dT0iIgIVXMA\+85-$g:aVTjo2%NCU<ZWHoZr"gf/:6Q5tB<"@U>f[ptNOWd\4N3\d5^,pk*lXhL""$rUn40;8GM>h8$WJ]ATTgF0%!H/PbY]NRHg47cdK>^7X.MWj%A!*Xe,3W%6%W7]!4H<9tB2F9/.1N1MVs.YXqgJ,-Ygo_$KKpU"h<LqrjA&pjHDgf]DUR-q[Xko1%nRA13ks;97P,?%Z[,`Oqltt^ESdQtAjt&t(mjUhu&e2>h/`2"O0t,Jd0hb=J`pX'_Z!RhDL*:qYMqtd$[Af*#ki(ZGMFj=#"(-e;%<iKJa>Og;F!ZJoKN&fcdk@s(FT`V#EMAX=p7G.FTZ.SG@89]5tDE(1Jn%3kbPcU3F^_)a)YiLb"W&McPb1]8Zea<D;=i>s0C&Ons%jut3o]<U4WnnGGgmpmZ,&&aWoUuH9fAKYHT^q1tdM$bL*U'c9mQ#CJSKL.3sRcb=+QO>cDF7'P6`\[-e1FMVCehb)OXbh?p1K(t]%O3gdXH8`NZVik$91/>9R#qVA?e2ZcS.kHm(R:>&%NU2qi;\`ldNlMCNJ"`5R2o*'8a`Z36ZtVE?KOdA.$@P3r?;Ii'r@-he)O%F/%d4k;@TfmagP).p`<k[)rDk7Zfqnu>bm!5^%_aOBIUWAXN'rWPp_VN8@-6u([6ih!Wc.GHtJOXHNV0(q$>MFpi.4?a<^"R19N!>1^%_5O/*-^M!fB'Dt`I?!RSkMiORNR$g:6d<KQ`-i5"3YUut*9<OTaQg77$cooNbQ:u8@'Tf'K#&"p&7LtnMe@ibjG=^?n3iG),?g8E%V`Qhri.'\&?P+W11.%Y>]*Kd2`(V,rbqG_\n2;GAbaLiB\r#+@,KjI8AWtk8)!qg$k(t8+UYk7`NV=!J%mrOTJEU`A"@uC;c.68]%)C,@u),thSrU*!--?[M3G_Ft<^T)Vl;1tU+P4'u!a=$Y7RX43N'V+ki69Jit`T2T2j28N>$G&=fR(BH!(\KVRAq1Yq+MErRNGJu[%d?uBY6<t7;Lng.o-:S6%GGc^Gd6El0@%Tjrp0W[6fbPn\f<EeI%t0?I?b42/=N,V!O6)rVHHcsIib"4uV%44-2qob+<9CGr91`@S%Cr8P;&VWT,PFS#%qjLLL?qO9)^9_\RG(Wp'c69Lh`H1:p[eQksQS933GB5B,BCKi'Z8lYR%DQ!-T"c2joPR<I8nmZ1aOhtOUu<o2%c.)lC,XThb>*dC@&@X3KAfmF@.8^i<?f1cZIh8VaJU1H/#@c;sZ"lO_&fcf%</<cN`HUOGHEb`-8dGuXc,?-ik_!B]7>qaso98R7%0VDb<dRPhr<rafDR/+j^#4]AbNfr@TA[Tc;NMUagZH%n-&f858[4LaskKD#9Re7SEWe-)dLCLMOs8K7%Wc@+3<$Y\0!^\;IL;bi+%RYu.n*u=H9-brkAm+-T)&*G)T/:0g!0`kh<3A<oR]GTY5^4r#j@%m:ua\3Z<X;$TCST?h'SYj[irLS^:gH68r-LE^Y`rrdRC40OX%G)+N^e"dYTf4q/<%LrgmDjQW1RseS$T^NI6:K3J*JI0#5A%:ES\o2[MMm2u)H#nXI0iIFTLkej6-uO\#JkTXIk.9<R/nWaIZBn3g%^C'/f<S>t_F6:SNXGb>$/agp'2(gRs<.)2_gfYft>k`LD._FkeR/>n2>b!AeQ_!_TKGBUFln7J+gqJgV:ffs0n!W8a._'M?G+NV4%?\hXE[NO$<L1`Nsg6`Uo2M>3R*qaE\Q`rMu"b5X<17m)3]-3tZ'8!2pSVQn(euh/fK"3$Z<@UM:4l'`#q.Q=+HYd.*?BP5)Ft2\=%`qn+8kOo[nXM:WAk?c9_-hB/]-J,aiasb"D=NROm[`r5$7=p:_N*Jpd>5GlQPlid>[r0B;19X3h]MIZ]-bja^3Q'Ouh8B_)[cEAl%]9Hd=aV5-T7SrWr9*<ONo5'e*.I?ZYr73\`jNY>ue-gRC3O+\@.OpT#4ilJ??[:,*9%q)*?s)Pn/^3-LRj$.`aUdDS,_t`p3WTsq%>8K".R%m48JN&&775e`h6O\!ebn)[[it$O0Z-a(Skf*%)CW`5m5)?['0iNe%(sGH^#elnTRD?e.d\\l6Vl,?5J^)kM6s.!g1-QBA%dGU1Dq?u_dJ^\t8cJdhcccq%,dOefJ\ls$4,7sDb[i84ga89J8()):0A7;8G?V#:u,@=n/1O40nmZJR*,/c,d;+NNa0F+o\dZ"9K%@?*>R")&C/_SpF&!%l6<=9d1fk0R@gasOX"\5$7TF'Ie25'8MtE<rX,"4H.\:`uXu_W'B'CJ![0E/BD0*^MB<e#oqq_YKOBFqi,a%1`#9-89:333(sip\Ssq>."l<KSuF\2E8r&f7K!,4j1@*e&bt`N`'fa63b)&42mFs@#c/hF/.aR]"9hK)&;gp%\NBU@`O?>Q6!Q^F%Ab2t?6rF@2"p7bC7<A<RH&rnI8[03r#3/uom_R0JR8QlK+Mf033'8UV,L^SuL/[-Z<TQ*uN%pG'rIke0C\9>E3_P>aE-hnE3;gt$%Arf1XdTY/fFER+JSunqNL`98ZE3edM`,0RfbOEHNHc:'jTBe[JCRksiO_j1J+@aog`?mufUm,IXCb?(!>f.1PRRoiB2cO2Ik/\VC%N)&eb'V[kJ5T8\-ED_^`EB%%]hCVnlk<kn(bNZ*T>&`ZP$*=B$"+r0dH()%ci\"5UbpI8t&JP@-\W]sb`L5eT]L5?81mSEO['=2j%3lo3hlTYYr2r)hI6(&PL9RrW[g=akmkQ1KlUXNPUV%:Bu!0O,s$Z.)MdGn/q67icSIrT4SR>BPFQ(hj,hGK6Gadp.bG*i=P]kU)[%k!TH36JBQ%j*nu6KR_C+Psf<(Z0]9$bPbn*)_9o?r$VPN(Y]S`Tp%e_[uhi1@&_+B!%rgG,0tq$?8+^aTIZ'u!$RC)@=NCU!!tek%"]C/3m2Ro(7!d2tO!59F\iOS/K^8_!D++k2D@pcFF--gpTKp-^ki0ONV7fHERVV6MDi\3jK-RtiLk+KShToe5lma6Or?.Wk,10&d%aHSU^IRa.1cBDSjS8ER.qR)fJ^%iR8I%qdRC74T;&Y"1t$@i<8]J`qecD%fdN0jO97>t@8;+NWLVAlp]<bKAdR+HLuS!^tD&&'oQ%`&Fa=63X$um\$h^:C5QXqCiDTLZWVEOB=-sPtl)L#\:G?/1tC"Uc3AoctNj$hS,DQLgjJ';E,=P,O2^qBY+;i()-;BUiNBC>rdim%-Iu:H?j:Y8)P)L>Fn(&$:/Y$k!%^GeG:[Ss`$_m!`GJ"F`dDQh8h-K?+Qc*$[M9Am-'/D-lU;^*46Cit'5gS"2d_Zt09*\6m'WH8%QnNmj$sMA&>U%(0Ie*)J$g^s5Q)gEkN?Z<TJ2_cM4`ojmNg"YEckb]GI<2E(=jL-T6%mqO4pQ'M.=B?5A'mW;Bo8<+^,b'?nGP'j%rTpSV;(ZZJAMpA!fqcPNa%8>uM[QGL1cJI)3U#"hn`e\#+=h'8PD5]'[!6MoS>k%Eqh6Xok%hrs?uN"ti8790<2P`q#2^;We)ISM%Bfh];(2@b8+(&?;3gM?_/jpc/6N''p$=DPn!QZR&M,V[[f^<`3V@kO,Ln74DD!U-M6!$X_#QnS94\lGn$4G$r6&\cP8^/]#C9`G7%#(e5A8nsH3+F)&`150-[Tk<DD(`^LqbgAZZn>`Y7."$W<U0<Yc12!3"Ai+?>[i!cri^722dhj',;9[ce"kC.A"tdsT$m(,,-Mb>b%jns-T+((R=/dCkKMQfl"Y^Y-(6n69,*DFjf+-Z"$=uf;)$IVU9N,2,!aXX??ELkV4dPMV=etTo-n.W+pnNDLCp?'2jGW6TiL*[:K%;6fp.r)ARqX+8RKFm"0rRutSiFK?*pnS=maVA`pn5HJ^R.lT\_*<kWDS_l,U^b%&r\o*Gt:]gl/G;<D``%./Y!FX;rJ`TaG#ouLQ%CQ!EU.,8&SmI%9@XVAAk*o7YDP/@h<?rG1F$-F!DZ,&7ulBeiJGcmIqp3QC0HHQM"c"#[O6=an399b1E;!=rf9(b"bpj&BRb85Tt%E)Cc0o/'sYL=mO_nXTB;I:.o$_7gIV$lSI[(XG8bMIBgfOEc7FEFqO%o6Q$&PDKj4Qf,jS7+dm`&>k^'8cf[39XVea%:Ba[I%M1J%AoKYY3dHUbD9)q>m?Vp+/\CQQoklmf<.JYGLgd"]e@q,^#!Pq!(C11DSbtL2@71MKnK9)MhbiUFOM`?T"];9+6ZR]#ZF.Q`BlCY/%.:%r_-k$."!0BSp_Tkf>k!5>rm\t)8J>n(rJ%&%ef+^a31muJ#$\=6#_`?RBDf>aa:Zr7AO`4`J87X+T?KFl5*b'%8>oUpVM%7<u%^/gVfTgai1\f-Hk+0r>bl7NaY/_R8Blb\J[=E5Sg44r\%T&:pY7(CXs%pgc;D6Na^iN1oPJh@XF_ju>m;).A3j1sh06FY<n=!XTo%KT'&PDBgc,Cg5,AUDQ0k&`V$egpn1I&b=%oOe<q#at<An@BnR^<eejR#?3CrlG;K0+Q_f\>cINQ^L0*cf*O[1I-Sd'>UFK/+:rS"%M+Fu-bVa\$.lNH785!cpP/`:;:q!%67B-prCPj(!9'B=`dnb$!qT_&,ZO_A/@HQ?RD^9c^1in&s65R\,$0gam#!d.@J.rF0X$K&7%_^]DTSo=)QpP7A+fk_,Q;4Ld>JV;]bGWi4SbLHjD-C$9Eql:3Q2gBA[E4,bg=g92#G`J_9Fn\XMTDGet2)C9EJdYA/0[DS]HPDAX%n4Y(bZhQ6r)XYXL9N>UG4Y7&a?X<s#%>oLJ74I6P`CWEb\<4Nh1Vait'iup/S)<_fP[A3I]Mhs*\VN5LO;qbZ]5Z8U;(]uhA-RRa%QJKn4(2?n+5tkldfU:B'6$tUcg/(O=:N!k)#"l.%5HCZC-!,1U:X"<M^V2_m(rSO8BP@fQG\h#==gR[li6\_tJX!ii]n8<V//]-K%D>7NT:1ijT:F.sbBKlC,1N<D67>.mRj!Wc/e&+$dJ@YnFW:_8k$R%Jn.2:)==bN2s==H'11NP"T2a&:'Bg+]W)(_Ek?5Z-(9AegG%&WO]]q-aZB_AS==1R0J:i*dFF`9AI*B13no#'#4SM)^\LT8)Ye85tO)+YsF#'MPc<+0I&qI2,*T><u.d3Ys?lJqMpsjEue%+:Uho%?jW;kSA[/im<iGu[;+8Y'[Pf".%%jhVE*l5R4W;?6o4I1='BadkJO<!]l(,a%E8R8W!4.^V]jLS1F3B3nCES0q7;g9>O2$785%%*%"sB$K=bLu0:)=8d@:VsGKMCmk(*V\R=qbt[^.HY3]VrA7rOmcmeV&sY4bsVaL[LJlWD6m!(.Q395R=,e32_"F%+uXJd=ULo$dV@c%^;l=lioGu="fRH)BT&Us>\>Bo4>ST=>e;uF_j\5%'=4p1#QlT#pns9Wg\*V4A/<:,;(%YuA?erEZLen^0AJfYEIJ(W*a.2lLA-c\%Eb.R`$c:-_9(Re'gf^2\2PIL".bimO/7I[(6@A,b[M0>[2o]CYfhM\ZUE(%*VrM>pM$Ob.\7ap7K)uc0kO>.;=(Z3J6\PjoV6F=K%ZVu\AH"bJLPDtd`Qe1:^k//rq>GQ,pmjBVtFHVUE]?(Gk;ol$NbjJBQ3Cr#/3[pK?4E,6PS3.2Dh!;!A+m:WZ&Y->r(,MKD7MHP7%)D,fW-^,94.j[9o-*9?7EGq$hWJ3-&HCLE0i-^``fanp>8.Fq@6!QQ_I\?O_#V6E<%Whi27Hf-;4o(p:XK7].rt(k[*Og,CX49/E%oiXoG#U,3QYi;#]oe\^3Q<\ts+#&F"_fAN6$@499_C_3.o>sK&GCLsmUPU@TF)lSnK9GFE/OU$1`j5;jdn")srt8c&/"Y$hH!G<C%(ak*#et(!#^[erCKD^UG94quS;b=C'7a'60Fnu:Xgc6o\5DFeW=:2g-aN5`9CKYnu0i[.XD>*nAD&silc;u1s-@j&j7C=F(fl<mn%WYf^h0;#"+C^Rn1M\%f[C8Cuh"o;HNFM_4s"tmc,DJnOA(NH!'H%nNkBfpH=,"0;or:Wn?,"kmgWK:4$kD]iI&-7?_M-5Hd)'p?X%f'U*T`!TmWk6g^q[&rA:9'S=>_c-N_oI5ZB6lpX-K568j"-P5GQ2/4;*LX,X/rm4hC3^BYD$L.;,+]%HDLsL$AG8OpL^N,#QBNdb%L@R+tP]#u;3_T5sW6EqYOQ*6+TLj-hZa]R@,\E-o0KFh-34Ms*psJlA/`KnO8\b2h'/9u,'6hdrn/XsP:3(bUhNX<K,Ea'$Q#ZLW%Cq.iL8au+NKKu<8>J%>_Q'lXAj0N\]*/0$qK2h3%g^';hT;C]^KW1J2JlfVk`,]I%er7uo*h.bj5mIC6?nlK+O382K<.'*@7L?;A%&rV<I:EP=i#/o1>+GD&0I0IuASX:_m.aOjPcss/t0d+0i-lgVN=LX6"'AG*b>r&`fb-kR$IQuV[=`$+\!i8,%M#se$Fg8(GplSRP%>c_-r[7g]eNHIpqi[(hVCh*kRo7V!RS\Ncl+a5fpHA38@*A$>fW=[]4%3sS(g49U@KmG:F\,2/YcX\RAH="CC`M7<q[!8D"*#.,V%MA=:?>4nZ4"5S_BC`\fnILIiiZAb"-mq8:S"K!b+(3iQ]1TZR6LWc*DGC)HoB)l7uHjB9>.Te8/D0u2ka7P^*>>82aS@(/;Y3+6F%.@uqO)SE0F5RE^pPZh,SC'bVJm=Hbj[[".fG(s"!bdeIhYh6_0Z.PccOnOW^34/==IPkmak/_4R:NXol,YhI]615F1#u$\ZR!NJ#%957qrfU;nC;B.OQB?)?D=KH1\Dh+7d5'pN7j+=3X?=FptXj/R4`&S8S!9fV,CVnMbmU.7H+)=Fr"=eFqS[H.Rj-=on"f/)-6&k(2%o9)ch2@A]amhVtbccbB7OBWQql'NJ_EHfHfN57,Mlbd]/&AA:A=k93@2eF$;@mW3YnV`KRn'fD<,kcotU.,o2R2C#0=!8<rH0]6I%"!T,WoRret.ULUa13SrF)<L;pO29Op8gaksq#`"Y)=AE>`ou)A]!*SO$p7GZbkCJK^ETbLl&!GuG$,j._U/a\_H1_$ZuSV[b`7bt%5+DV)&5D1-8/Oj^Lma1\W+FogiELGLZB/15YXQK*4OPQX`N6u.SFAXe:iI0#Pr3Q5ihZ?"\O_f[*:(J2l.H?m,A@Dqnb5S(?3aM6%1IZu8qGjHL7VU*d.R<jd1:\I"DLEj'<"enEKs1gK=J,*^l6N'OJk"=Wl6C9PK?M1(mcPS^R<L<^Bu,CmCe2utOJQNuHTBZ2qh2]$%=IfP7\'"%S=(,Z\E1H]u=_eR:n'h^I?<Vt:.!d.AKP$i)0HV#0A7KEh6=66OK.0V,X-]?'_Ir$M*t)T*o'$UuV[JI>\M@8dFBRRi%)-6gOh145kB"i?;k;n"PZP6K*d,TY.%a$HDq`BcCSB(p=9:gr@-/^lJkJW7$rKB5EI!F;h/oEjoRq4<6S2GL<]0]kL(XH<,F'BH6%Q>F+,fFuPCIFEgn1=r*J&afVY_05M!a&i<;^CL;;2a@2[nUH#Xr5iS)^NoM&kDrub^4#h4KV.*"k3;JipnRlZr;#BbgF$)$is4Q.%B+M_%+:/=>M"%U_huE3'p4)na?1bb0EqS=nrr#'ueWX;8YJ65qNC!j8+mapm!ScZaE>2b%`C[.K,5e@%Hc/k)oDQeGHlr`P].kGI%QBV7(DYD[4!KQT;aD^eg^[aLEIsM\#rl;_Par*7CIOCSbgi[GD,[7j]0s%G-DSgAN$F+d,OA2Utlu/_;9Ct.P<hqCdRPhJA<:c62%B)/,8AN+Pq8@CBh>HM$IQi`1R7I>8j+'&`rgR`Qefn1sP.>`Z+<!'mV,nSEIIgRqs<r?Yf1:s7(hBPWpla-P&_kqDQes$#8r9D*N%dD*XNK3;3<&c_>(\&<=0`NJCH?"'X?/[P:[+HKKURBG_+A@C6!-<4t\=C0/E)>0S%OK[`"MRDJ<C]Z+@"[_%acXC0-,UcD,e,("\%/'1HC#q%QV:pNFlU9i"GYsPtIp,tt9(2tj?<jVb=H\SFd^/tA,Eu!Up6B.;8pmDgWUVE-VG[>9*A'sAs$/O/-$0nl@!5c7^Eim,]%+G9FXRUmcgACKTsEsAqb""c.S&^)O,V(>grk60b%]s>VK4DYcgX0;pM5B(+p:1$;?,aSsu#q3J=_o?a%Fg#DRHOa*83ogWUI^Sr'%CB?gMGr[/G9W\A\OqUrV>47i<gF$rhb$.H;.RbAF!qCMuB:PnIc(skb#,kTWKTJMg_-fY,o-)shWu9`qZBGStpUW?#R@`k))@BN+%X:\%e/Cak(Oqr#3-%T8P5FiDZ;!>gY'2/O#CY]j)"I#V\l-Rh5Z2+GlF&]*#/Q3dWHE@l[0Pa%QIk]'K->/GuNYCYXg$G#>mr+<c%UD+faU,mB@'_6>#BGFaF':%<MZ`FCPgWJ-,os[./lSV5SPg,"bRn_e3ON7f'bar0Tm$8N;Dhu*kn&_U`-)665(:i+ri#dJTi2+A)%`F&e]DGjrN>Ol21N3EWk88n``-'FK4a)&47Mb64Me7XcuNDufr`mJ%pK.r?3+#=72aX']9_?\PB(TPb=KDR/?Fk1`kGN[3T`d4Jm%T_,S3a\_X@f*YJ\&!cj7`OVoS=CGqDn=&4&UmM.jiSk"D8i1Ibm=N6K]=YR6N-J\>5S[h*."7'p'3:S"Wn-H]2gufg=gPQ+h)+as%JH+6dNp(Rdd.gi"^g4Ec*X7k?%FHYjm9`0^?Y&8&W-R?EPCq%TDRCBnrSkrn5OFus^Ml1Wp[_Dqbd&/g@CJ&Z`K?MknQAn#hG9;F%T1K:fDqura]h_M72t/Col"sA*,'AZ(8DC;EFP>X"^2!DN?V!u`DLnk':9:'^/B-;+I@(UR]\qUJ@]3MrFD7&[D9!StVb=CX9=,dq%,?o_cM\P*F0uB158_r4G\n1C&6:plC9N?>N>B]-Q:d%Ho37)K`^P7csb<pUHH[OtuR:S8A&0=iah1f39E@9XQ=60fB:+.j(<,o3p%,[FhcHs\+Dcq+.2B!TE%]@k([!E7G-_kcZQB2:GZREK':q]7S_?2Q4Xk3DpLC(=+gT'c6Tn1J=ZHd<d[#OS5JIc6t3$U.o]f4RT"%;uFUe^\L*drp8b4T0L#7rUe)#a"Mploln%3,Gi637f)oFdk>%BI/<b"=!)kag!=PR^:F-kMq=#dl,QkT]/TZbrI5@EXbKqcrcH9(%]$loSCNa'^)8f'Js6[NB*5l$VZYsJ^^FX9D20CWgmQgM&>rR8m2/E(q.nK(>L7];OR1Sf9KeL@SHHh6;qC'nH.e2Ls`B@\^nQbtb%b<n2!7Q_%L8CTkL#;H^=Nk=dJ$N^=hftG1Q\CU&5hbeaKis8jXgJn.79J$9]a<1PU>Vj8b)p,^<k=%^IoNQnY0!bofOB__GKe(4B%^5CY!0&."$^=s+gHNu9f@F!11YffA!+^:fj3Nb+uMip'=!==h10KbgIY2fk!Lm?keflLs:s-O(Sid0J]G;qO%ler1j)?Y]6Z,^EB%nOPAl8V_q#f`AF`jE@>qbDD=IjCKUK(]HM^^cQu5];<Hrk>]AcDM3DX"mPV&X@rcWR3sY*,@(H@[RVK+JkC/mc=N@!H7tCf,[`^G%D.TQ[HZu'Wq^+4I!pOfh"YYWZ,@[>2D"Ks1bd']-B@=5ikf+?#jskQfrf-'GIX@Rh?5W>clPOOF4o9RHRc'3boc_W/M#l*f.eQIA%a]WJRB4+h8OJt\)O!Dk6\)Jlm\m^B4hBkKNl>A>N?P!>Q*MNo\,J(j/RAi0*`69])Us`C&-@@]><lkjGCjZg>GkQ=u9YVX3QOBpd%oDp/#E/VE%C0umVqrXREc<`NPDuZV[_$G3G])'il21qT3CEDF[o1#8n1*EMbQmjj!.kik#A]Sge'"/Jd&i(Z&E]('kQmj_HFn"Q=%H>ZgeB!H1d4tnb?a&%F+B;):>_MII^7_mac1\Q4-L>LVS'_>bJRH&Y@(qLa[Ej6\<Rl?uWUdeg*`iL`%J((8-#%hJFnk#<i\)i[C%=l70@<UcE%#.]O_A7]YoIRUd(-(2mpciY`3dZA7A^mdjX6+8@C#<sqrQsJr.TPW.LP,no1_0!YE>D!Y7A@Nq.#a+9re"q2,X<lOC%7*Ib0Tm$T(,Io>PK-D,oqjkGo_C^OO^1]G<[6Id498#+?Y70mT4elMIK9o>7i?2'[,KU(mhN=gDaUb-WMj\&Gh.X9tGK[FPeXDaa%njm(DEQ,OT5slT/V?5d8]eB][E%@9,*eAUtIcZpO5:"/Uetl2\$>*nUPdCu*"=>Eb0;YK?n=CH,PS\#TVq9$fM!5`lnYZG)qspuZ%<=^uhi/u#qWU;+'9_6r>e7"ju->^AiXb&l5\CH29L7/nO\Onb-F_[A,X?L-7PKf=I`Lq(N@%U73%juk-9J'gnSI.=5KbCr<MH"TS%*0eA_jIXF4Yg"52?b!G(JYY#@(MXAq(5qda&>`$2$HQH%l!BX0R7Xk/Ft`JqBtjB_eE+`;:q=!M"Vqh97$7YlialV0DJbhb'FMOF%g(ql90&Kd6*mC75]UCnCBRn%?'h@4nc1emWn**.2a\'VWeo>R*A/X7=#_F]se>_$nP2jY>/B^)G/40Ku_Ks$`kN-K3Da-iD2K'4s%R`254%W@pI-HrH4.L8G<PjBA%Ef/[<_%oR>k57?tP?4'kI.t3GIE@`ggeM>iH3;SaCg>\u9\C$ke#c*.`F['.[n\OZ->#_hgk=`=%m9Y)IQE_s5Ws;cL6?elCNF@.$#V-FoRG9+X-(e=PLW+*RR;`eANVq"8D`c4.`.0i'lt`'HL#JG&8O?P7?74q\"cos3@kTWHhu$oG%`;MpJQ8o*()'5Tp=X)CPdi1sRkuQ(N(*2UpUZs#&\$7M`1Se5p0I*3%Mhht['G`FOoPD^!N;*mN/q,FaA8`OEe+BB[qk&A3Y89]O%mgO/I2-""Q-Ash,VC%g&O+L!jpW612@Eae'Zb9QS]SdqWkl)&sG[2+mm+ES-j+99o>lXNU^4gfOakjA:7;jJ.$L]lEan'40f.\S7%gb@D+=@lWh=hr;j)$kkPQZE8t:3!"VX_u,iC+6b<)jl-c_R))2XI\:kCu;4SHj3b0OX.2Sn92*f5:*GhM4l[,ZU)I%n3>28RUdfT%ca*bE6;IfKheEeU6ZkpYSB#SV=sT@e=0PS^`,Nh'K7^Q$e"JPW7:"].r5%)sHa[6+5b;Zf.0eujgkKH:X1(j;"9ZW"*a5doOEcIE%0rljU-Y5%t2^(/;nDZ[^G[dn-[SRcm"/8g7l[jp!Fn<s%8dp^=k"SQTe>)ehjNZA?1Q&^T[IY[`p&?YI:=C]?.(eRIgnf8oOq]FR%3pT`0o[8URJdK-]HlTKXYSL*t1ol8"++&1"j9cPt^/_5s0Yj8nT?h,Y"VkX<=HZ\5-t_]h!GC(+*1h!a31tAZe_r'C$7^asTmhP%%gEg^\**rB?mIE9QCjEoC,@urtD\8@4TfU`"dik^^KJKI-^l+=fD6V<+jPof?XfP:1V0!Kk3s'D;*A'.Ombg<2Yd)&@h-Z`0;b(p^%H,3\hY13\7/S%<:=9-<f/4SK,haM\r$f"MJ.-;')V8,.s*/n,e[KQ=q+UV1F9V`TW,V&])\4&>9?+f6$Ua&uf2/c;Nh.3hf_BXlC%9Ep5t(rG]R31(;khEhY5!]+8.:)>?egn90_Lp1l3eTl_tA`M&crh[l-Op#J1+nd2VNPSZcdbtZP2Rhm.Hh1352J6HpO)#srWq_s3%-OpbLDqLT0;SRKrDqfWGhU@+8]tHD.MfZ+P2&:3M@J]R!Ysj/nL2'7O2s!de-=Ej`P#7(t`^BFrhW>oY#^luI!_Dc)H2'=RmjT\[%V#o/l%F_I$"qrcrlL%-^aDW$/g\.*k^RC5rL!:J)W.=$=<+`,j!=J8[Et@Uk=!Hui:Z1Z$"!!>Y$dAqnm6#0P,X<MB4=\Q3';=1D%3Cj"UZ>7i,TbS(:-e_=q.%1Ikh(,j3i4?L4^8L.1UQ8.FB]aF0ab\E:U!/).Te<e-!."@M8*/XbRC=N;H5>pTJQ2i1UoKMH0).lI%+P\q=Fsc&JfK][c:#V5@?M(6R`/hI69!)^^PLX.'7=.'r$<^jdYFE1Khh4d[E:[tEk8aV\<I+i=pAu(:9q[/i]I`*!d"a'tI"np=%/ppLtGXT4@g"4"L[t:d\p8C\>K$H'\4Eg:aYXB5N2'p`=kSjPVD&X-(4N^M'Md9*igE>kr8i0<Q*6[;,'Unj]rE7i,".EE>7sY-?%q.s1e?[VPAleBaWh*-=o^Ws%^n`R>g55M1(S,CIu^V3uS<KLqPGDWAm^"d7,5+!Jfe@NkRF,#]i2qbg<=Mct^a<J$J!1kfL7S;U1%AY_cY0*7I8Cch4)X:D(*`ol)lRH!G%X/T'=;h,ON*MCb?i140-/q]]ucY#Kn!EeoN6JJq[\n'\)UmmWBeD5s`M@/'#Y^7[=`MAq-%9JT6W#q$+W%$lW_kPFl^Q&?37-P2U'kZ+[]<m?U)(=aI%M*9_m\MRP\1f^-.*`J=<p=.f)W]&0r04p^2SVW&&Xm]RD:$lmU<!5Wh%F'jTj/WEIEg5bF-Qs(:LHGJ4.3'-JRC)'jQKc-3u:e9[8/@3I,bIFG#o/X#]bPPpl-0-H>KF(70-KKOi<fL:Y!h2Kr]Ln[+j]I>\%,M*BX5$s-]("cR]7+0sjlQW\GfQ9i%FPc/ZZqVIdf`;HE@@/A&]^6]iU@iU4Cps'7LHn&Hrkb#Tb&5(-bGW*:&N@H>bN(V%:.Z,"%og.esSJcNY,#o9IZL*In>s5SJ6M,g"7<.sO<`<e''eEr-.'t%?DqDF=>`71>3KOQRZW;[LZJB/5_Tc46B'BaLU"GHQZ\U-g,g-QP%-aV=4E?0t!':+_P5MO<b&,rf^5NB:5%ut*"k6"+:'a>%K*Zklc4a_EpBfehkBK[=1rC?A'hXqICXWGT:q^m1kgk@$)2ZU&o0au:m%#\4Mo(9jWrmN>b2q(@uT[E,nKL@C$/&.%%GA]rAqOAed7_pVSc"5+]#3>D6`,U^Tbfm0sC'l&l^;*?XgXRl2@D@PsHmYnbk!a[RV%NoFf6#8?M7^pCl27d&8"8CRA%Za?b=s3EpEGlIO<Y$^Y$qr'mUWr]s6`Ii[>H83Z/J+h.dcX2.sT=6b_++3^e-SN3HKjju<+$Y8Q%S(j92^O5k<p>s>5rjs]Xb=@Vc4a[$pQ]Jo\lKJa]rl^39cT]$W='r_VqM/^E?XJ6XL8H&"4aca][Z<_'nB5_l5C6=UCRWmteZGi(%ruf"gmeoQOqR*?7qULLBSj.L1n+@JSE27=H`JqSWD5F8boN1o)k]=E<4ahdY1#)YnQ]GLe])(dHj!V</1KASKp:ie?ro@j?c`d>(%`ij<aY&>E^>$Iu+H^as*MjLW^])(FZj-O[^pr,1!5(<Iimcf_Ue`W!#^4(D"m++8'DdC,*/pkn&=8D%V?bCdV]?@;dF7nata"M@;%bVs]JiBM]GVeBq@Wg76m?g`FDlDlioqr6c"MeCA=5/2N[[Sp2hNFabS1OPFRqY0RFm2s!3Wk,t8YP+m;Y5Q*VJ,;`9X/]J*ZeKD)%5(%DJnCc8lT721\M/O/bO8L#:(?b!lh[eiVg]%hg55!^ir<p0aeCC^VV>e6"rqiiO`ndP=oSB/HBjPPn^HN&e`_ZNYEJ,k@TD[\C%A,RHSkN@$P4*n%YUiM,!.6h<V55W)sa,:q/hX@EAhN&=seWPnCP((s=IBVghJ"6$'W?Us.O%m2us-"=<p]pfiYjMIK.9Q?%A]Np;%@NG@/gYZug?cAt-WrMm:c<ISuce^ib$,udkCc:2D%'J@TKs'.q+4[Zp!a^*\ad)u-7Fq)BX#DYh[`)-e#^M?%7JCbTWtaU8mrB,V%'@0DJ\0)8V2]G`LD.1*o9;7g-i`1Dbp.C'M9^[?.,h_<$m0g;)0O:Md1bk?d`mMHBIHR1H=@VT]]FKAicZU&(r\k)\?b6)4QHpMA%4Db[Yo_tQYX8QX2CmDc=a/7mIpHRA]`M$>LeZ`\9rt"u9:DO$=[ZO:m5#E@Ps*LAjSsG[+G^jJ7#O\(#.9r)*r3=_6[DuS_)>!jb%:&k)+UOAIN_'RQAmh[Q+qt.)i0F4:WnNYR4qYf=Fs0DgZ?16ZlddH?.D7>_SjOk>2TsR2WIJ&1]haoKT&)<(]BN99f[NDp_e#Yu&%el+3oFb0$ihNp`[T*n%-&][JBLOLZ;8?BZfP,#m7NARg$oArX*i.q.1mkr5]QbAdHVdJFAs#n?_ho#$RH272F'<u*h?^DVDUtlfm%7l61\2Of]q:>XNj`hh:SP7aXrI+mm7QB@L/Y63p/lqL!GF>C6_E@D&[W3sk.r9<+U)[<WTZVFk*?&#WV4gt0?p_N_Wh>GQVDmR43%5FsN7s*hH?*dmf[cX6V<\c1RQn+Ip]4FJD4mn`t/n(lOO55=b_2m8j&Hcs2(o[/T/YN:<6LSrJ:>l6\>Oe4hPZ3DZSfKOF7q:eP,%g.h@3hnJnVT07YroOe'@b87q,IH++drqj$/^-p^]am.pAa7SBaYAS8b]R7$2qu2r5$q%XQgK:_hGd=BarUn^u?TkpqBMfuqd(d?D%VdB?#K<%eeCq_Th7k^Guq<$r-H\Sg)n9[n(ajXcqhY`!bcBA*QcI"<>*^&0nbgk$Gb:EK-akG3[%p/cP+l*+n+'2gaFV%m5*@B@0%/CV1Spp9oD]DC`@]Xn'\\$s\5q;fY%cF3SJs+C^*hfB!2IEU$^@EdWde):i8Kn%/;pXto1LZkt$h<]R\o_/+HX7<Hb0ge<X72RCn%]94GV6"#BEo<[?@H9V5m"()5rr@W]:K_N%Aqimb+gk%Hc>].]A\%gnrnj7i)GPehto:=b*K27!eIrB8>OY5j)k\j8ChTqemi=CuV%^A&6Lhfl=7RC0D/kC<*RIQoOH`Z'Egnk[N-g&L1M_d<?1?_4u\p.#YaHM-O+DBJ=_kge-HkUY:=d#^A8/^^%n_I`H+me'Y"\RYO;%(5K-WD#2uK2O)ldke*]\G\gI]FSSR(k=[OYGE_)nT/hD8Q^rWEmlJ5TGQ#3,dJ&#8$/iQL$ti2?Wk>>rXRZ'eE6:;,h-U3t5C`Ur%X4p\t_K#21q&4lr6"rL/0pgZY?Xi&rM<X;$qAB5p@td3lcf"Ngnm1T<+6M_V4`C!Xm2u)i+"s8#HN!4)+2YJVmL5H^rU`$uGl4$e%]4DdcrGRg*YZp8I]p7CdBr8P-*^@Dfp$1R;qY8680:mU`qNcWi<mB[:^&@8LkiM3<T=M>>o]_RsgqNUmg3)8c+o=Rn5@WCVI'4WV%4nI:9np_psn>"%-?=/-Ne`/#1IeP#P`'69JIt1f-FV8q;m"PQSi=E],I$fq/4)b*,ZZ0u#rJ-`K[oYfOXecge?_;2>a1o9kbFUP8%]<-7kaj<3Ang:=06h"TDls&:n7p'<l6G$pu%f2?s'6;DfG!TKLcn9)qj^j@Qo?"&bf#O#a:SQ4d/Uq2dL$VSJ)!52DqgNP9j^!&\%AW`O,H'b(E=_-Fh=TV8&\A,6*_N4_1r5J9b]R9XZK],.FpA"=J?g$rMlT9KW:@2s8-bAe&rj)G>K'9m\D"$M(nRilsR8]J_HT+^Y%5O6tAI:FdWl!lfem;cb18*j]3=#&f91oMtdMW*ioP[j/Nl\\8Ch%(N*2B2)I040+opT,#AmdPE:/@a`t^QehD@:F`XrN4aS2pYf>%55oPohN)Pt6VRL7C#sa8ioM6lJo>R7^;fPFJ+;X,k;m`,Fo1a_2la/Ylfmr_hs*Qml/(^Ef8jh[Tt%9J5CN@ZF[?%_a3S*WIWbAu%QL9C9Spuh\f'g1eiWQskm&S;kkf8kF</#T#s&YH/l7.6\6@VePSG.@PMXTR=rbGaRTa=_0Y`doT2k_3#AR?8e"oSg6([kpNs,41L%5/*c9q%M]SH_&RaG]S6)q2<ihS^9Tld-ka'rl*^\bK%r#>lE[V\%2knTnq2<UjXnV\U5TdJY\f1rCb'ppRfan5@lu+>FV5+\HujA%Z6!b0:H..FjRr#9^"W@'nQV44h3bWHKF1=Rd/OLqN$$.jrV>L*0;#t'rUf7;=&6U/;YWW:l#D+nOEmJ07k\14^O>qC&tF7GgWQ8P%6]8F3hRWYS(=P5:+r]<lJaqmHo[<iug[;r*ceC)4s.Nkj;IfX:4'k/M0>IGU5C^*@jkj@GbQ(^oCt:dUdkc3m+(=qoHQX/m'P]j^%qWdBZO+2(tr(`sI^VgqD[r_#-.R1VG&*-I\\#'-!VK^U@AFJm&Lo:.R=anC,`&B?ahZ*!7Dk9(:p=G3-pgb%=#H8a'FkYaHQ2I;;%b.m:b1^?l0l"CmkYMh\?X"2s1oS;mWder[f^OC>&>3IEL3ZIVJmk0Rqq"J\anqT$TpZkna%n"*Yp@Rc_>I5;;r6OQ0^OFA"]^%Z8%-[CZHH-)'Dmsde4p5a^(rRLnDIehuI!kipVjKEX*I=I:-+,)rGhE]*ShBEj+q-/3\JB\VR7/\QfomuJ=Z6/ErqLtc]r;$*A^Mk:M%>IrbL\(-Y;kdg%27@EF)XMh@ckdiO.Ub@r@)J#8"qln9Sp^KR;oV4d7`q',KpXTSl?bpXVbq"W,I"(sqK+*7<Xn4tOoPO'9Tn#f)%2m8i:I4bVdhgbBIn&`o5mZ;\ZhYdEaM#9a`&E0>ci[s_>mrq$EnE/t2*n5DG0n+-6o')KJ^2qk\&&rC/c57>2#E':qoQ@<SY9*.N%ra1+uqtRX56\4mH5km:qD&C4]f*aQe)o^k#2d[R.:S/a/pkmlkLgPQ$qL(i,Ik[T=-'bK7MgmQmr-gEA5)`cEPK8IA>)GfqFc4t<%PRm)3nRL6/Is_(hk,TRA;pGo_]D_72ae-<7@=Ob4QX/]MnEoVt-8']PVY7WYh7]FogeTH`Vj6l&b5#c5r,ee5aZ>T]qr652Q%nqG%55i`-ch@D;P_\j?b/=#_^eoSpn^2m\pLJ9`N9":oK>$1#6L@hboD#-BDY_!9rMLK[BRC-DS]SYdONBa[bFMHI\8V!e*eTOQjnA_g%roW>!V<ab^kTAInrJihLO$<UBbK"g&T=k$qC5$c^IsrjSoHVM*q]c>GmN63ffTbHe.U1?N`qi78Op!03fDH<;kPOYds1V,JJ+N%"%Ik2Q/(JjM6Ic_U>,f2CfaS3<\fgkf4^8&>I3huB.Ie!?Xcb+SZ+"]eQq;Z+sY@$1%-U.S$JQ8J(=!.D<YP,_Zp%mc[)=N'r]D0uZ%&'guCh^i:5k^S$R<9X6b-qp76c<tMbaUmtJIrfc3=&&[o?2Q3mJU^WOr`,,r8gf+"gY6YKeFS1is2Blj2u+hN.B,&q%r'PZhcs=%%?1Mq25J1,&I.4V.`PP)EPguak-*+FVEa;7Y-0SN'VEao105kd$?i@ab^25fl,K]M)Jc(:N&YL1=Vu2"[TH?d*X1)]>DQQlD]nO9h%?mW-O>`h]tntN;_qR(Cg,Js&h9QDg([-H#n_o(9bmN-ZIVm<_/"b37nCJ=n>1>Stac['f9)TY7[Y(`@7SRi7Pc:eV85%r'oH<eSL%_6"fVM9%0=7k1UA;%!*9T6srR9,ea'Y,r:*6\Z"BCHo!d&@uRFLDd3uoNT\pp:&;cmH<$8s*cd&hJS@\=PWV9\t(u)8\&3a[bAEC%*D*NOIWP=3S\s3p^KSg[)IBubCt(nND*Eue>iuWI8eWlRoWZ<YOd]O<^GXHJdVX`!`*BCVhT428R83.=rt>'gZIhh/[(tYhan4"?%/SY!,fFkf1'uSqbaOai^5HM#k&P<I%H#*HRrn))?hV\/]lMd_FX].sn3[fbL2'"Gk4/=pT[P?m9rcLuQq+kHr;2mb#kJ7bjidQ>Y%XfgjE?>SbBhk$3KRrk0oFnD:C4Am2GWU5`f*1LPuEdES_g\]NX?K%#;7StPJ]D-Wa>$eC0]g(nFmL?uhYAn5;@LQ89r(5,kb=6Et%&$LMaMg)3<07P+bnCRY1kKX'&JIh7"]"[t;Z5*#m4K#UcV!Z%\q:@jFq<PZ-rUnKX+4L,roDNa=Ms6n]-LLdNkC;A.5tjcGq!I9t%%'ITcIfK+H]T(dKRXTqY^^haa+8+C%<-[=W"hU+0G+5nOY*t!rd&hK0]g-rp05pk-_":X%n]-%O5D_N$MT_Se7uf_#ei!GT[pD8T%Lp-j7`P][]X'`RYr[eU.rmc;Bno)uT0Q5fO4!,o$?9LF-c-OAc4c7J)MXMU38aNKb`bZ"fr4#ncY;T1W3>`m?]6_!^G]eH-n3r14%N'<74W,lsV5HZXtQh0>8HG'nf&sg4mnh[qF(XdaHB0o1b$a)TflD=`TV!Jk9P'1#ZI?mS,m^g/kCOLPZGHk<,0#,KfXtJm)#8FX]%@!eI%?//"NFFSH)GYMgU8c4f'"4?!I+7:1=Cdn8&S#cQ5Ta3A'BB'gJ\&S?M])VHA#d^r=Q\3(Y$'be"]XbsYm7R,Z`4t-2QbTY6%EM#2U6*@s$cQ?2S=-#;r"92/@?i6"1i^u4gJ/]6@LH0r=SS_HN#B:@$2ob$3o9XZ&Mk/C)i+LiSTppu;h\r!)T/O6l\89%RDckrq%c/Z]fjPD[#q<#q6F.rU_K77-4s3HT.H*-]2o&:S2^ZXM/fYb)%lIG%aG<KO;BA,p>F^Mp&_naY!olu$t3^6t7XfckCp2=m+9&M4X%OltO"q<$`&o$-k#pZpRhqu9cH3C`o;j%%c,;LZ6P+%FsU/t\p<$*lHa5,b:UFo8aPJ%E3t*N'TaC\d9Kjl$CCptb\ce]H9eX`^!H%KHb%&j%5&tl88*.UG-R6!IoK#/K[@uI(Zu'\6\NpiiOBif'3)T>4cBjpInr^9'HiUo(qWHPRTAZrtJ3%=dFMG`8.*4f2&Hl*K82?%+CX/L)4)AShG)(]r:>$5^QBn%SUGlfh1)cAgtXQK@TM)>IlKl?EI5<H(q3/7CQE.RYP\36ES2^e]Nq*O=l&(B?+rj4on39i\%!I/%d\5?J@"!7pG_4lQe-sOn[_^W?J1)Bb=Poi&F5M<2O$'I?:9nWp1R)?([uCVee02uZ/nL&u$+GrD_4A?iI6YI366s-TS$')i];4H"%XZ!6?o3L)s<QS)^iSDEJp'?.>Z_M3*Tt=TY^-ItH.+-'cSAB&@Ye0DH"<<lke*Y'4?<$T[(B_e@p"ecZHINadUeJmJesC6qkodT&%hu'pm\_-h'^]*k>nT"L]C4d=aDmTrH6L'@!h2?!N=.^fD4@:[r@<K,ml5,P+X*t*B\EXmWDQS57mm0TRo]*pQQuI[qdj9K>OPWRM%E-;%lIHnqDmS+1Tn3n6)niY73nE&pKXQ&\MQ[0\13R^:Rs1A:*JF`A)68_2N,>Kf]I]+8,U"Q^nLT$N.bJf*Y+bT62kQHJ!I_!*S%Fr6M,mWpm<1PaMLP"AWeG^:OhY=HM@<9qfl@BQ@^D4X*%*[GsqqlAaD"tJ<p]:l@bH)gNA26RZK]=cuO7X+$jB)dn=%[Q['rG^iE%J9"P1LS[ZinUtr`MN:gL2]$\M#4ach^;\()%XJ0?qRCp6F<?Vd3V'm,]Nj9"ID.k`m^p*UJt_Te=TQpRCL.Q77J?W%aF7Ec:pW49%8JNF;e"5Z+(Sr,$91!iF,FWSp)T6rj^,$#F*@DkE_(!7C&EN[=C!WLFr/;YS%d>C'>\_FLLe8AUe"6R;_f_`c]=WIiM'-S0*9j&e%:e5OXYGY)W64:nBD'm\0O&u0$8Ef?TLRoWcpNje4BhDY.gR))1Fna-G4J)]O';<rtB+kg9&$?otg5%8h\R/dRc1<Rsb5:)!mR1.5%rcUoK_&6Y:m*PY.qtf>WE>6!nS+:,Wo]I<GT)WXT&DbKL24ASS`,@OEg4G>YjO$(k)tfPk,m'huoCZ?"160cKc8Y2L[f?'3fY/rN%`Tloh8Ej9GTDNk^TBluKr)ns=J*J9SQfQCF_i\K_<c7GN4iRElX';G3@$(u]ZX+u,=1>qMh`i[QIgkuKh8>Sk,H#7B\s(*sPE-BL%U221SA]/,uo0,el>n4Vsr7k_JV@3k-%TCY]\(5S?GiplUIWIbMpXC#2&)rP$,9cYB[6J+JpSluQR!R+Jh]H65ZN"?QFhbTbdPOWW%4n\4*_3=,DqfC8Z2QQlPLeR[Rq/X$W]cT%`a$h?AM"qX^)6#\P&#[KU.-=rBbYKt*'D#-8kk>4)ZX0g&mt]Wmal-H!mkMQRD<ZHl%ouj/_mmuojW9m5[mp@BPr`,]YpI'4F63[/9#d<+thW*&JGD4Y@,(H<UqUaqEru0j=cO''e4*#B>Ml#%=8p]<oUt<:PHJNA4f=ae&%h5d@'m7OQbfRrFtI`O%XfBnC_EHuZ<id3(B\jcTbnTD#I?hYK/[Ej]u&)q7qjF:'VmE=VC^.NkAX5qmH8q-/CjO_+<IdO2sfC$h#%4s@]72=bO,jS-/Lg0OM;DWL2Cjk%49IdLq3f/tFqB4!9/:C=:N\aZ%h$*SW>n=!DbYBc,sRTBg!H'RlfIGmmJ*+-$(]L2Jnp@bsU%RZUpJQh^DAhd0YSZ@X3]o7%u@Ep+cV/O+^Yr@`qaps5*6>ta"2d(1LG34l]L#,\HOO[@VQcX.5Z?TbFHrVCd1nb1u-qFH'W)"[`A%ot1.jpIDQm"7c+%pCI:+IDhN%X#WNnkI^EU\+^]['E#o$m:@X]0-.Kj"$p/]M[.!cZLQ2[oh^lHVhT@h("7Jin+?=Pf#Q2C`fgp\%-[br>m*7W&\XSL1YNP'AW7NbFHgGNmM34uRjj'N#E"XC&cH%*Y\*N.ZS+Y%k&3CE3"<8AmbLCKQ6SQFL9Ka*Glp(@iCQBQ+*Ur3Y%!?I!RD6@c*5b7^-kteA+0;PDJIs\Q(4).,kakNTPg.?3<]o=>NRiI8t$F@@JpQ*j]iqtJq57@;#0OEE+qg.kgq,k:Sh7.B!2%Mf2%nu)NU;VrKHc4@h,79TNcGXoRcm8#*%='NVH=@:E.A+H]/^:HI*)')9$Vt]oOX>SoF<qPT)T/m#+#^CYY@o;.f-<0Tnn%.B0(F@@f%bU%bj*;\`d4OZCagqY!arct;+nY-o(DP+%3]O\ZU0YZB-VL%cOe0A-W6E:^%T;#=LIQl.uG%16Y^16`0_tRcR=b")/35>6og5M#N%?OK;LX3p;SrjM"0:A6<K]Bm9FKO)^U%0o(/]N$ssaM8>"]/"RB2_ZH&o8g5]8NW7EiV[l=cJODJ`o2cKX6g0q=#uTGT:,ME=V5(i%Z[)(pdLp;_H^be]'Ka'tIJqb^bl;8J8,66ALIj&R_4madG)5nNOR0jFD!-;l\Yaeb`0*X?7_^Y.],flChBM);XDs.2Eo's=*pcU)%6n9>'p<4bo4*+\\Pfd7f-70&7qUtfkHC+C*Ub#2t)Z:]^GL1mtRrEn"$RI6HC.m2&h*p'>QA%&im-WaAXMhq-S2%X&\-G7@s0[nd%*kVA\Md'^nkOJZe;d)<-(;$MJhBuf#P4S9d_8=(cQm\t&llmgLk>+7+7&VP'V)$?A;ossYXkuF7S>t\P_tYfX+YnuBjjd9^_HY]/%S"h)Q:5B<OA`8N.:K.WO'.tT!d8e9AKTnnR1!IsS>[Go(ZX`7j[LOrM@303HV.V#^k.=^o0XKFb]MBQ[FC[*MkeMdAnqnkJn5Ig]%+Il"hVQ[]]P/Chc1m?.T`$_lDCb\,qEa/q,\gF4-r]R5S'um.$dlUdg8B$5u4BEOIs5=D&&`d>q7)gTJ$Eb`RTXGN:b)88_);a)s%$pLSCYh="TC8r9uj(&gTMl!0]g%$aF<JAe.ULTBK:K\/X5*IJ.;:6X+H#s\0/,8@@/!=?%^BBD!K&CsNaJRJ.EET_P(]ln2^fR*M%^Mqka`\(9J.n4)a`BEaZX_-NZb0'RB3Nt'9.$/=nA6%$e]![B&V!*l2C?P5:R!kD0qaL+5m_rrhTp%8YCg9qNNr2c,1^B2%.GTk+%LS76-[U+2>6*b*(KlNVFk/=`(hErbSbR'niR`k[^ZF,<1Gq@0"[g7;]Z.K'@EXi^`45%RdMtd0c4.@$0`6o=<Kh-u>0G\0]?Y7*2%[?5+Z>7pPoL:IN-b(6k$b#dX_QT.uf6.o(FpWmB;?N^a#La6/LY`m+`E<I6?+sIkjf)Z*/!#@$oInc#+?$iY!EN^T&fZk\thT?-:%IGlM@2R`HNc8"rjZE_u9`[m6\b[jf<aj^kN3&6sCU-sho:.1dCXLs6]SA/K(Cm<6ilU:6+JRF.r'?g2Ab_bs=V4n./nK\2`":]/k%[Q&LF-;kgPYd)V-cQV;3ohF^e4.Rgbg(l@-:;fbh70(N*iG;ISd1"W[6sCt?2$`RgR2iH(3s(W"+k6,fC8ht&%soQ`)<HoS=D)#u%A^<fDN/3.<[\-M2%:#Z^fGd]S:(Acg!-cjoUcc>^()JDZ8O\[JF[#B+m%1k2S4@MY#skCF3;O%=]5YiF#ns9NV;3CCH)c5Sj?JjW%K2kOd4>NWG;g,1&X":5;/@8WC2]o;%d@L$!m#r#uL1`t*jCt7Ub_!1<GOWneOY5@%T1%$o![7ID,0/1pI'kMK<'Dj\KOu7u>c.8#%Bi7&kr$kAn,@qgq/h@iu*0I]-ViFCAZtrL.W,TJ]LE.S?n-7n*@5(q1.aECoC$LDl<ier)1&@b>To*tu5'Qn4^QVIGhr$nVA3]IO%ln@.fR$u<PnoDGs1-C.#_(,g&K(D-jW8?<g3L>;nM)fc_rLmsgG=4p3Wpf#1FMm_T02/DT)hdJ;Ofmr`!+up;FeTe"C4b(h(IV96%U'a*("LlASf\Muqf&aFp_OL,-s%ugI7>ZA^GUNeje8<X[<?sU(`C-4p-RM(!A:fZsFJ9D<R!a<"rZDht2MkJ;jLn@p;9plR0ZRci%9&pZE8`;tX)GcJ2?Qm#C&'9R93T^Z\g,-kGjcKg<3\&f<BC%IA(_FN"NTu'43$h=),SBT>SpECu:OL,\C8E8RKk'TRMhSX#Y*R'I%;oJii-Hukn,Jm9((#Ea9c_t4qG*RGU@haW:,'A!q.#hV_CsHcJOk+5Bgoa'Os5d)Z`p[LL>0s7cp;t+tT-.8<4?`f^cBG=h^un[M%3fuVs)$bF/<D@*#pTbAs9qi%(no%Z-Jg,n_890HN1N,_G^"?tBDPC^5KFhJG:.P\.$\F7FI@Lid#Ltcs$)Nf;<h-f@B$]s.3^crX%iSu8`MJ3[bGR'!dl^QgW#^8\^q9NkLj;Ns!>,n/95XD2L/0'"=,L"pdiZu$93NQY2,pWQA(VtN?Lo?"5aU9?QbS,S0$]pCs;b=?^%]t2N*NW9WF^HACQ/TDc7d]i*.DV-2;-cq,DV<&`a9o[*0!XC^u^k)m,WB6H&AJeU,]4g(EQCWu.&)VmbH,U2ATdR,OToFe*3KmU?%&I^4A.$.=I?VrN'*>OSqfJIM8WFT*9fbj;$Mk?=VV$0/jYO*(DLXYWHijt6aeYgJOQ=Cr"29!%L$6DVT#EbZq(iHrek7mVWU;$?6%g8k]GEi`2KL=2l]bOZKr6H;Co$q0_/:2P_E#[[sE4Hj_K_R%[s:uJg0;\oqX$+M*manA8ZT>3#u0PWIB#soA]D.q'4cP+Dk';A"#%j:WdJ82a2="kXuDmPp/]BPmO+>F:&`-).VT9Amk.!N%GgL1[U*CTjaeKcd&Y-cEm6K&W8m`q:q%,JG*/]#<UTnnmk9f-7@KZ?j6E%6$m,/UAr*k'O[I\ibT-]9Ef.Q/o>k\38$FaUXOc"[+;bKR_\m.VY3u`h[l.HY0!=bjcT>:h4?6QYr>Xf<W(Xl6sl)%JU00#PS)n]%LVXu-$,BE_3Ud01OMghaFB-jY+G#K?)%.g-Et](>IE$8"-J,-.N@m`&K7bll9]J]McJF`A_e/gpp,Em!Z+BeD+VY^%ZT!Je!DW'>%"l&qrLl.Q\&Jj'ATW_(2YagR).hS:d8r%ph6r:f/`u8E&jhsrNCanCo$l^q%=V^JP#I>O#2i8]0"U2q75XT(P6V]6-<8OZg6&R,e%YX=)'iZ.H5'3<ZBPnue9Pks"fA]h<85[_YPE`4uWYsjib8Vr1Q>nu_#TL1R@;3hhl3Ya+]'YJ^.8I8O<1kLPdK7fuiLBrk)&0-X<%PgL`<(c)C'>=:P6R^+,u+q%+5L.Y3+W&dU=):?Q$?X+9uQRNNYVU?rSLIAo:bL\]s?o4Cpk$'>N,5O2+lOOJ>1hnXg6qMs)>*b.g%%p^&dTLoT^M`=r^+r23=(#oK,c;CsA&nN"cPgJ'p]*V,qlG([1r9HSks7\ar8!$*$Yp\O7jd=tqMdM+4M=<)bot&+/MGqIoW5k!O%`U9XS\>jd_8=p0UbTZCs-8[hOr[&e_UVW4dJ9S7ef@3>UST'NBkLO.^#2st(d-b*\Y/FLaUhkq?<VU1nI#Jp!23&7VG#Z*YO3C&@%n0]B24Qf8g>KpCjEJutEI,>3`0g^t6D]"7R=B6Gs-TX,t2W`nC&T._nXfPr=D$]DCVHCeQHYA!SF9_<S9sMF3D5ED7708B*'jNqj%?8-Ao>$,!<jEACfK@a4+J<Mi6D=LCB($r\Oa9:F7^c[P]g#/9klnBi!G`2ZKkE73QlEV=.cuYs[Ao`h(gAYpW+\[iMn"J\hp5D"S%%pQc%!GR<)\g`cjK%Vp'Qf-4)KRcMc2.1kU/t:ME.U2#&-8hB@7*IS$UlH9(LplhIMKr'$'%!X7D61Z4*h9=Q(PsGirp`P3M?Bp5%`YdF>N't1uRR7)8ZOk0UCQs?JS@g-1`n3*ko!AZ+e>R&#^qC0>XA4<WYbWJ[N5(,7TX2V;1Y0uH^r0SSbn#U0*h'm(Le)bY.`X"#%ZC>b5F93DD8Ld<ZE:sSN&[\9%HjgoX0sSUfSW@*<U:N!Ok/\La[[JA#,-DJ`4;L-^Z==2l67Nuf'Bq(lStaAs@)Z\WO0YVC:4`]f%I7pZ7;D\Hdp8<q*G1Vt8Lh^1^g*9.\<P&,lAl/m+&n]<n2XV_q,aM`+T2I!=j2TmrWGj&^,.(C8&_ljj6)+UZ)3A]&PV#L7BSp[:%HjGicf-B;1`N6sH$jo?s$'88+F6e\i*<N+j@9A.SoA)4&&uFtD8he-Q*4;Tk*)\97@T3YnY,3DB6f'c%+]fEjW>7l>rEM+-6!bhd%l'[prBdn[@W^daZ+c*6%A%<1=FC(Z,JV\AC7[R_0O;'O;S$848J4dp,Wgb7=*=1(/bWf2mmP59gF;dK%$@X/CD.7=Q,*].pV=7KG%YCfJ!`uLJb@M8qkqB=#aZ%?/C<T0kC3p!iO,,$su5"AnJ\9l8*@M%Q5ljtsT,YNa8c-lgeAYJ**<gD,GH("oaeUa]dOUB+KUb69S%1(,p&`D.:MR:#:_.g\Qcd/ae4g7AU<'J!B\+<0uWSIqpN+TZjG0W`/[?;-#C&?GGnMae/,((-`fNC4M<_s8!t3"63,abDnY+(bQ1%KeI0HMX3AO(EY^4(a!C,R?70S"Ht\k&_.hbb!f$40K&B/emSh7`>+%h%"j!o:]l_)Fn7GY1%6s&<YIM"5T1!C"ZC$^+K*FCSoIki%A4+lMRr#$l3i5oY:OHrG1c75C>CG?6M+8&TiBU7a'KGBV`i_$Y.N\%GhkEK&nMR[G%fJC[)e,Wr'-'-7$*GY-DJ97UGqihp+j8*(%B^hUdD]m85?aLfgX<*L7Pfq;24t.3k0F;Ec+qt;77^B>7*J+\9[HE4ZNJ`"qJ&5$$Zre.+`Ym#kh%5LsFpXWRd%luH!1YDI+1?&1%iXH['q$BEc)LDsi(q=ra^"U\&fRu8eb$/E),L/;)]/D*<e]`,%:)KSs\R;DuD[!I\,Ck5.JCOSs,U?jF$ArBsM1d(7$Vhr+.RFIj%16E&2V9&(2.gF6e%+u.$AAL_1QkY*Ui0b<F'j79"KU`DoKp]\)M5dJ7'?%?uS4mCjA.fOt!emacg7"\u5Kmlj/P_*]A475;<SR^>%c&a,9'KSRZ:.H6ALHH%qg(`JVJWYoM!'l!'i+WDUOE-e_$His(?@ZL+&"q1R,&]D,&Y1L_;#hFm/?F-D7iEQ0P802]NC@,7%EZHn%M!F&@iW_D+18<.JK)hQH<bi)k+/h@i69R]&MPH/tE(2]DP'KkV,9RC^oRLUeUqr',V/c9IShIFmcsCBR"@Y+cC/I9QM'BZ//a@3N%2c_F!n:"uC!>-_&U+9^6k7SoR.P^9W`B_(,%J2An8<0eaQJ!D%%m4En+c",B!$7DFW(b[lb[!3[%b::K7//a=ISfm@o_'<Z;*=^Z%K\ms5KL)UIl8BF3*jQ_IZW8K2MKCn^(l\MDS6Is-[6Z4K=_L^WK@f\1lT?NXY_#!G[M``[2kUN_FXb]V2Brim#^f5TA5QH&P#%J?%^(j'Yf(W\),>Xeb<O.-3,"n6i;`;%Y&d0O&5SQpBJ?Zm<2^(iFSCM-\)!^h2fPVn_\`Jg5jMIY0n7eRXBlF,I?Fe9A"RA^@<Vc`S%<Kf;ABm\o0+ZY7)!<WBZR;(eC%]N>B[FOKRK2=haa5oWrpR9O:9IM+`2'?OJ0L-q>dOq+sRn1hXMGD1UYfJ(V84MZS#&_hiN0r7"%ELN%7$mj:UiM"%-cXfG;X[<^.InV\[Qq4M%jq<Fa2?AX;EOLD969.[HSDc76'BddVZE2@sXFlFjp,K>>F2oI-[7aQl%M=S%ikV!N%*It/_oHl(YZ4Zn#kH,Lh&h41Hpot*;os_Mg6(;R_eh]O-&T!oSC9BpZ<'mi<75s*gCM-"4RIA)cPr-a6UDPg4cNPfT,Us?EiAeJ/%D+'MO==RZ*JL=Y?EhLBda:jW3pd;Te6?<QMN<uHHl6eh21^KDR&]'XWP_#5k<k:`f0DfQE#M7H6qU@q+@KeLn&iS_q,cGN@5upa)%2=7oZ"Ts1Cibn%,U8!p:aOD'nQCJX>p3\JI$XIVJ;pc/%!g%6)N''VOAPEln5R3uZ=#(c5H6bn:'8!s(XBem@Q'fM69I*M^LoVm+%C5t>lJmqUG*DM53otGe-4dHNPAIB4T2d['!JYSpOZJlfuQpfblW_B4C$m`4b'F-jXih[L<I`(5K8(3]eDcM%?jGJT\nPMHR#n_lP%2@+8@KFkSLq6H^P)@*XV.JUk-@;0+`#6jRhjp*6Y1rkDXCK08s7g[!oL*[ON@)iI^8U1n0dp_HrAH)arAk(oc?9o>0T#Bc:A%sK4%$n0+AAi@b67+;bXk,0RPGkDi=ZO-4T]n[q%(=FOan*Wfk2bUg3@OWJi@bYT_/,CdH2RHd5>1JM4(uuH7;+DFWXlLIXU%2(RR+"bp%.uNlJ:WRm.WYW&W@kTZ_N;mK*:FU<@H8pn-gk!P@;TV*E`crNdZj?m#NLeWc.Vb"dfM/)OEJM1#9WOj'+jt.G7f+CG$IJnq,.]/-%&6V(EZ"In7_,Q+kBbuQs4s!9G`o`$jeWEKqX*$s;rDQLW1rToW7:3(o#[KA5YRWD7HPeKb0EIcn1_Ug2Ep++9BuoCP$PPF#[Xe.7%<0_'VV@^8N0Lc/KA1('p4R44(lG?qeS-oT%ljI$+W!J3q7U<@BKu-/0*Sl;0#:,<E!>OC];&,5O5Mu+#XO=SL$q*]YK:"Xs)cIsF%W?lsZ_AS"Wdi@jN,Z*\9H.)b_\EodicR6$6?Bj3'b#2Z.g*1>!Rht0<e"AHo9DSq)EkqU]V8EMuBnhoeLSgGq$<\V.r3'c8iYTp1%aP&fKS0LD0R4DcIU-nE[Ao(qJ0F16]+U<-gO+;s4#lRc%<EDR+,9e<[\t8;S,7t7i5.G;V&b$A7<tVKVLp/c1_\.D21pMIG_HQ]@%.rac]KG"12ZRQR_T%lG,-6b1iUE>ef<35<=U$ofr.N9Q^(Bp8\\1gdr98[S96=aXiTgJ!u#G,uRrH&rh"<\`5b)<!CEmX.ZSQ1n!%qN2trg!\"/0]_$-=CVrGdX=O;WnOleKDm>i1!*75A^ni>i+<b=U\Lp%"J3\j?qR#(cicO-,f*RBTWG"R&>&fFa*FUP37]+u(B;l_%a]=<-h,/GXnu`c5dG;@[?'R9Hp<!PP"0Xj!U9!R44L(qPr'*,KSW("f5'1g,SGHRO=ecF>;1XAd'k-q,K?eDAm/o`2DJ:>p"Q_$M%FW1PCM<@kpN['NcG2'C<$(;m$K?bDZHskI8gn]m>=fIY]^<1bj]%J9:7@G49P83J$&Ui9)%Ymao*t_/P5t@FWG'?_QA1'<``[r_b%rC_ei8%=q"^`pYd,4&57Z&POEcEn)05@RHY`C=8?V:oU.R<AG:N"XH>>b0Nr'[=2HYX9c>n-*h=#8'[*B/=!F;\;A"#GgLjUg,KN%BV^&A3lPL1,K$LZqLG7s0U1Xd`'Va8'Mr=M]rD0ei:T[5L*f,)"LojLZlGD!$R=]-rW]i^*EWCFQD!>kb'BXHl80ee;BC0*d%uIJ%,'=i0KX7*5>)Q^K!j]o$Z?nZJJ8=(gFGQHUTP;IZ6ae")0kel;&>Pd+&cIO0HO.J0@bl_(@1#-@QFoUR`rITJoF0*+cll/l$H<OB%X)peG]3lJR_VLJE$J%5E^Z3gFnK*G*WPD$k?B&c\__OZj4jr>O'NT6D"RM*$m5@h88V\IEbX=<#R34F,][."AYSbuTZ%=^6KP_Q9%kG3PA2BnHeIP(6A\R6$N-)1gV>0X>4p&aUbZ7>(t#MY^u7k^?^MQikfcE2*Q*(<(Ol8SgD_#fnj;:(Hi6:(7he!\a*as_An+^5-/%?pu2Ok@_u6'H0Zm6CKtU0j,ebZPZY[dK`%G5.4Q5_$hZC0[Y/b=js`R6A-K$Bk5.cI:.^@e=1*H2CA6fZNbp)=:3Cr6+2q+OYN:`%n_O7RDH84?Q3-ZHJ.W3XC*86G75.Z)(b6Bo;t,$"feP*hm6C_;*>6:VUmZsl=[;b2,0$Pt.0k6;H2>qjfjOL0)`%08@B34R5_U']%1W>/qXEOE&WoOrT3=/A5;lE!'/O@DlmChH:1Q8,,dtjTP!SMA:\qd[ec3^ai9X3qd5r@"nH6Rb@W[-0C![:RM$.F_7d0CuWY.u28%7G2JB"JBpmA(f>(]$L76n;nZKL;7h;=p,$3m83o_4R08WXSp(H'AK#@/0^@8iXE#!^aQFoJC4kK!-hS;WE;t$.0Z1Ycjg2h7p[Q/%U9PCrNEnGaIUJ%YeI7hD&C#9.3DSp7;jE0lOY?msfgI!>\?E=u6^:>VMS=%/CRcKZ6@!(AXFn@NnSEme[*+_Nm0L@sU&Rf<>_RG&%7EuEa[-WGbQuL>W2Fj*WA.1;d,$(flg:n!>#:sW;Xt<[1FR_(QM9$9^LB)+\;"hrA=B[5@;mUE2k7[oD`8aCn"?&o8lR;QD73[s+%AA"4sa\TggI(DgY-RRH\*a^nOKh[!GGt!Zho`J9JMA*rNCe_-2DgLAa)K`N?.><Z!):b_?3QKDr=D8gkFPsFacaKS0#BC<Sa(hu(%c7V^)3<;Rrk[^N5-Y%eY91?mlpre5PVo8#7dOkVE+TWB%i$JgNf5Mr;M'%PJdm0;ZS41%9)B7)^"!lp,dNh^SCVo:om>ou,!kj[t%!;,Z<;3(6M!H`QsBd4)3:H/fr`s@%6#!F@::%?\b6No4fPh39G.B5j)BoW?@IT[**[E$Ue&]$/$dPdMe]HT-@BhhEWgNLGA`,JE:%_C\7o$qpY)ITdYV/[,8ELh[#9l#cVBQ=Kn1iW;uS$g+"[=\Pu4A@s:Y,A$6r5AY9D@iWc\DV`#Ont\0\(o^I?4;crdF33FpI5S[!%k1E$Ao#l8neC=Wh"1EdjOXJjq4Z<HYdIQ?T01k1SStRlBoO/s#ZH!MOJX-]ma[*Tt=^5Y9(o)mH/9OS:__$EdL'#?lff-ZI[l(t_%U!L^4!!<9M.(!%COU>jFH-It8)@(a,Af?ufi9HoD13a7jpBV!T+t$1@Ku?'uDMOlgbF94[(>>fYf5<$&ZQtq5rV0gfhp&YR&iA=:%hS#&"`f1HXYD-KKlPOK4lNlJtX#@]##Ri0m#i,ql?`1J;k#_F-c3Yj%OpcnjZqOM8j37?s+;Jf!Lb3=r0KO%c$1&T$l9@]p,O?b3%lS'k_KS]BOZgS[EpPMb8X[J)8kiZP*@+oPOdqDZ9WO2P9dOa*C!&&2F%YJJU5'".cgX^2?^4tL2$JH"nK:e8"Cj!p9AWWY,22WGh%X`^nV+/(TK%$\3ABcWGGXC/LlV`04T>j&K4l1>>gBXkBcpDD_$VC;__3NS>n/tF,A?:ou8Z'UJph'X[Y8oKP]7\/bQbH44dNV@EU%1*gZL@t8@A4#\@#rD,RVdL/]5R/)985c_a)+Nu\oHV>9H=kjsd-:5Ss[>>f2<RWL3>?HEhnfmACBJ?!9>HHg'bM4\J-*h'2>@F`k%;+4e1@O<1Wj-LXP4p1ZeA*\QUB)A+m/NN(&05aSLGVuqji>u^\4P<GiM8"]p7AP&SZ7`-PR`M4)6+!A1+q&FhmF#YVU4X/:XmmkX%a;?ZcW"3qB.f.Ygh^Z&bbtR0/@^LJp7*]E(NQVB=m\k0S:j;9kEl/=h,'$"1:3^GUT3(Y56]NN/&&u;B%ZpaqACngY/F)&eF2dds%*NnKoI:CLU3):9BUg%U!G/,(L'CS%&Fjol4ijdMF6(ZJ<#=1ipZsdmCBulJ])F3mqTs*Zj$eScQ/2>%S>((QZOD2W_9'W>do,3ah%\aVYKfc1Q7"M9-9>37dsC2hAIZH?4i%^UI'S=<rBVD6!B4P"(`AZ":Ja_g^Fn&g=B]`TqQ)Z@hZBPUa"/Us[d1U`T\#\h_A'Q#F3%`<;8YWHFLQA_)Y\L'j=N*GhpfQ:3`gGHnD1Op**Gi>QihmPNaWG2pb#$-W2#Lk+r;\/db0V5g/Rd;KDOa]2PdBrtsZY^hkcl[$Yi%"VN#U[=3G8A=VCKCLCsC!0XY<S+oH8f)]UV;!:SK(d>n=B1cfgo7B'0pb"geW2%+t9b9D5;"d6QnC[O&X_i99,JJ2lXdXVV=SEA^%SnZb_C<OR)#i<S"V`Rb,J(-Z7+XWQ)f]&qjs5cJOD'($#.^[XhK`fO%^*?;>LMPCn9IQkD5(GC=#;VE[IDCdWT`%Pt/`AGTne*Y.%DS8J\,6FgfpC0M4H:=:1B5q;7Z>CADK\0#Ent3ts#s'Uo2r>atGFEAXWa*1V'3d$n_-,@EOpG'I6WsXRlYQb^IIV\]V9.;t<"`[i%Hr"9tU6RFU=541#`BGJZ(f!FRHDJEKMP@FUCSNmlCX@<t@;?6)bKkR?$AS!d<KoK-L/tud1*I]QpMAToL3\.rJUS3nZLEFlaD"g>%ZLq7.;`#9'-W/7k<Zs^$j.QjHf1=<-kL'Lk8f,36dC_GJ\4u.-XlDP%H5Rpc6o00bG1%uF_;uHVc!rj[:MdJ:s#q%JG-AYT`*4S1%eIadiM^KnQ1U2M.HG,31<D.t_mYBI$+Zma!g=8*lL<$"^'C&[-[.pFaC9lhVDppC2'IuU'kW:P-7*mKY%PTU/_[o24QB?E/Fjl-c%.j'"#Y%TT(?/n$8Yf)U%3*r$e,93'u$D*e\T[J2;n:o=J'DV6qfHK_:QEJU=;X,fFi0.&ph+%UMpuk^0WM`(Q'%@Ze5qe#/@ph]]%Hjc6]cB4'LfLR@$_gfQjUM!90'G*D/[Z'2%Bk_k)`)mo_KS\)\UrV_,c6`r[!q\549QY5NVm&=GL-(S>`p94Vn%r90MJ,.&%m;%1%gU?cTe<?[qN>pUHTRenE6Cu9FPgT\#-Q(u'0iJebK&aX'34^&kc.)WfH,OOMl]Wf!5g]8@D<E5gQIRTQDEQ,-`/q>_m39\Doq>H?%Ggi\E;Rb1&Pj$Wb`4jBMN0Xc;LU(RSWlHZ$'QokGgO0WCT*u=-'Popco]+:RQ-uuUf5Z4HD<DfS[WPZk1u5b5SV?&q:ET+@'OEY.%"#OpAMANGGR4Z!(KH:B&nSLD2D8mV`d.Nrt-eZAh%'2uB_#>\_bd+#1L*l>b%]_Ip*Y'ph5ce\=3H7"$2GsVbms%:Tm;>e0<LYAS%Zpa[CD?iN=Ig8TU-_j5`E/RH66pf7.bBY[-!K4)S]cp7S#kug3^%*b.S/TDDeB?%>YDQR,f]i"$EK?`@]UYfFd$&.8J#cqUr:B;%%^FK'"5L.">$D.?J\%0#[?>X;Hmk:85F8j2Q`PW$IiAS_p3BsT(X82^tled97OFd>Sjne$&QgSYS^W>d5D]VrKS#]b]@/bHE0OOd"%[JV+=M;M7G])=0ZjTlSc@E]6?$Xl(_G_[r)DJl(rk[/f6Ac/gB,HG!c<ib!P'5Lt7rK$lI^S^@hS`HiTrqs7oBE'(IT",%~>%AI9_PrivateDataEnd